# Available Jinja variables:
# cluster_configuration
# cluster_name
# instance_types_info
# {%- set queues = cluster_configuration.Scheduling.SchedulerQueues -%}
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ClusterName:
    Type: String
  ParallelClusterStackId:
    Type: String
  VpcId:
    Type: String
  HeadNodeRoleName:
    Type: String
  ComputeFleetRoleNames:
    Type: String
  {%- for queue in queues %}
    {%- for compute_resource in queue.ComputeResources %}
  LaunchTemplate{{ (queue.Name + compute_resource.Name) | hash }}Version:
    Type: String
    {%- endfor %}
  {%- endfor %}

Conditions:
  HasMangedHeadNodeRole: !Not [!Equals [!Ref HeadNodeRoleName, '']]
  HasMangedComputeFleetRoles: !Not [!Equals [!Ref ComputeFleetRoleNames, '']]

Resources:
  DynamoDBTable:
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: InstanceId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: InstanceId
          KeySchema:
            - AttributeName: InstanceId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      TableName: "parallelcluster-slurm-plugin-{{ cluster_name | lower }}"
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain

  # ROUTE53 DNS

  Route53HostedZone:
    Properties:
      Name: "{{ cluster_name | lower }}.pcluster"
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref AWS::Region
    Type: AWS::Route53::HostedZone
  CleanupRoute53CustomResource:
    Properties:
      Action: DELETE_DNS_RECORDS
      ClusterDNSDomain: "{{ cluster_name | lower }}.pcluster."
      ClusterHostedZone:
        Ref: Route53HostedZone
      ServiceToken: !GetAtt CleanupRoute53Function.Arn
    Type: AWS::CloudFormation::CustomResource
  CleanupRoute53Function:
    Properties:
      FunctionName:
        Fn::Sub:
          - pcluster-CleanupRoute53-${Id}
          - { Id: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import logging
          import time
          from botocore.config import Config

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          boto3_config = Config(retries={"max_attempts": 60})

          def _delete_dns_records(event):
              """Delete all DNS entries from the private Route53 hosted zone created within the cluster."""
              hosted_zone_id = event["ResourceProperties"]["ClusterHostedZone"]
              domain_name = event["ResourceProperties"]["ClusterDNSDomain"]

              if not hosted_zone_id:
                  logger.error("Hosted Zone ID is empty")
                  raise Exception("Hosted Zone ID is empty")

              try:
                  logger.info("Deleting DNS records from %s", hosted_zone_id)
                  route53 = boto3.client("route53", config=boto3_config)

                  completed_successfully = False
                  while not completed_successfully:
                      completed_successfully = True
                      for changes in _list_resource_record_sets_iterator(hosted_zone_id, domain_name):
                          if changes:
                              try:
                                  route53.change_resource_record_sets(
                                      HostedZoneId=hosted_zone_id, ChangeBatch={"Changes": changes}
                                  )
                              except Exception as e:
                                  logger.error("Failed when deleting DNS records from %s with error %s", hosted_zone_id, e)
                                  completed_successfully = False
                                  continue
                          else:
                              logger.info("No DNS records to delete from %s.", hosted_zone_id)

                      logger.info("Sleeping for 5 seconds before retrying DNS records deletion.")
                      time.sleep(5)

                  logger.info("DNS records deletion from %s: COMPLETED", hosted_zone_id)
              except Exception as e:
                  logger.error("Failed when listing DNS records from %s with error %s", hosted_zone_id, e)
                  raise


          def _list_resource_record_sets_iterator(hosted_zone_id, domain_name):
              route53 = boto3.client("route53", config=boto3_config)
              pagination_config = {"PageSize": 100}

              paginator = route53.get_paginator("list_resource_record_sets")
              for page in paginator.paginate(HostedZoneId=hosted_zone_id, PaginationConfig=pagination_config):
                  changes = []
                  logger.info(f"Deleting ResourceRecordSets end with {domain_name}")
                  for record_set in page.get("ResourceRecordSets", []):
                      if record_set.get("Type") == "A" and record_set.get("Name").endswith(domain_name):
                          changes.append({"Action": "DELETE", "ResourceRecordSet": record_set})
                  yield changes


          def handler(event, context):
              print(event)

              response_data = {}
              reason = None
              response_status = cfnresponse.SUCCESS
              physical_resource_id = event.get('PhysicalResourceId', 'CleanupRoute53CustomResource')

              if event['RequestType'] in {'Create', 'Update'}:
                  response_data['Message'] = 'No-op!'

              if event['RequestType'] == 'Delete':
                  try:
                      _delete_dns_records(event)
                      reason = 'DNS records deleted successfully'
                  except Exception as exception:
                      response_status = cfnresponse.FAILED
                      reason = 'Failed DNS records deletion with error: {}'.format(exception)

              cfnresponse.send(event, context, response_status, response_data, physical_resource_id, reason)
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CleanupRoute53FunctionExecutionRole.Arn
      Runtime: python3.8
      Timeout: 900
    Type: AWS::Lambda::Function
  CleanupRoute53FunctionExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /parallelcluster/
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - route53:ListResourceRecordSets
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${Route53HostedZone}"
                Sid: Route53DeletePolicy
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                Sid: CloudWatchLogsPolicy
            Version: '2012-10-17'
          PolicyName: LambdaPolicy
    Type: AWS::IAM::Role
  CleanupRoute53FunctionLogGroup:
    DeletionPolicy: {{ cluster_configuration.Monitoring.Logs.CloudWatch.DeletionPolicy }}
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CleanupRoute53Function}"
      RetentionInDays: {{ cluster_configuration.Monitoring.Logs.CloudWatch.RetentionInDays }}
    Type: AWS::Logs::LogGroup

  # IAM POLICIES

  HeadNodeAdditionalIamPolicies:
    Type: AWS::IAM::Policy
    Condition: HasMangedHeadNodeRole
    Properties:
      Roles:
        - !Ref HeadNodeRoleName
      PolicyDocument:
        Statement:
          - Action: route53:ChangeResourceRecordSets
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${Route53HostedZone}"
            Sid: Route53Add
          - Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:GetItem
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
            Sid: DynamoDBTable
        Version: '2012-10-17'
      PolicyName: slurm-plugin-policy
  ComputeNodeAdditionalIamPolicies:
    Type: AWS::IAM::Policy
    Condition: HasMangedComputeFleetRoles
    Properties:
      Roles: !Split [ ",", !Ref ComputeFleetRoleNames ]
      PolicyDocument:
        Statement:
          - Action: dynamodb:Query
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
              - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}/index/*"
            Sid: DynamoDBTableQuery
        Version: '2012-10-17'
      PolicyName: slurm-plugin-policy

Outputs:
  DynamoDBTable:
    Value: !Ref DynamoDBTable
  Route53HostedZone:
    Value: !Ref Route53HostedZone

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pcluster.api.models.base_model_ import Model
from pcluster.api.models.cloud_formation_stack_status import CloudFormationStackStatus
from pcluster.api.models.cluster_status import ClusterStatus
from pcluster.api.models.scheduler import Scheduler
import re
from pcluster.api import util

from pcluster.api.models.cloud_formation_stack_status import CloudFormationStackStatus  # noqa: E501
from pcluster.api.models.cluster_status import ClusterStatus  # noqa: E501
from pcluster.api.models.scheduler import Scheduler  # noqa: E501
import re  # noqa: E501

class ClusterInfoSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name=None, region=None, version=None, cloudformation_stack_arn=None, cloudformation_stack_status=None, cluster_status=None, scheduler=None):  # noqa: E501
        """ClusterInfoSummary - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this ClusterInfoSummary.  # noqa: E501
        :type cluster_name: str
        :param region: The region of this ClusterInfoSummary.  # noqa: E501
        :type region: str
        :param version: The version of this ClusterInfoSummary.  # noqa: E501
        :type version: str
        :param cloudformation_stack_arn: The cloudformation_stack_arn of this ClusterInfoSummary.  # noqa: E501
        :type cloudformation_stack_arn: str
        :param cloudformation_stack_status: The cloudformation_stack_status of this ClusterInfoSummary.  # noqa: E501
        :type cloudformation_stack_status: CloudFormationStackStatus
        :param cluster_status: The cluster_status of this ClusterInfoSummary.  # noqa: E501
        :type cluster_status: ClusterStatus
        :param scheduler: The scheduler of this ClusterInfoSummary.  # noqa: E501
        :type scheduler: Scheduler
        """
        self.openapi_types = {
            'cluster_name': str,
            'region': str,
            'version': str,
            'cloudformation_stack_arn': str,
            'cloudformation_stack_status': CloudFormationStackStatus,
            'cluster_status': ClusterStatus,
            'scheduler': Scheduler
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'region': 'region',
            'version': 'version',
            'cloudformation_stack_arn': 'cloudformationStackArn',
            'cloudformation_stack_status': 'cloudformationStackStatus',
            'cluster_status': 'clusterStatus',
            'scheduler': 'scheduler'
        }

        self._cluster_name = cluster_name
        self._region = region
        self._version = version
        self._cloudformation_stack_arn = cloudformation_stack_arn
        self._cloudformation_stack_status = cloudformation_stack_status
        self._cluster_status = cluster_status
        self._scheduler = scheduler

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterInfoSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterInfoSummary of this ClusterInfoSummary.  # noqa: E501
        :rtype: ClusterInfoSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ClusterInfoSummary.

        Name of the cluster.  # noqa: E501

        :return: The cluster_name of this ClusterInfoSummary.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ClusterInfoSummary.

        Name of the cluster.  # noqa: E501

        :param cluster_name: The cluster_name of this ClusterInfoSummary.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501
        if cluster_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9-]+$', cluster_name):  # noqa: E501
            raise ValueError("Invalid value for `cluster_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9-]+$/`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def region(self):
        """Gets the region of this ClusterInfoSummary.

        AWS region where the cluster is created.  # noqa: E501

        :return: The region of this ClusterInfoSummary.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ClusterInfoSummary.

        AWS region where the cluster is created.  # noqa: E501

        :param region: The region of this ClusterInfoSummary.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def version(self):
        """Gets the version of this ClusterInfoSummary.

        ParallelCluster version used to create the cluster.  # noqa: E501

        :return: The version of this ClusterInfoSummary.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClusterInfoSummary.

        ParallelCluster version used to create the cluster.  # noqa: E501

        :param version: The version of this ClusterInfoSummary.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def cloudformation_stack_arn(self):
        """Gets the cloudformation_stack_arn of this ClusterInfoSummary.

        ARN of the main CloudFormation stack.  # noqa: E501

        :return: The cloudformation_stack_arn of this ClusterInfoSummary.
        :rtype: str
        """
        return self._cloudformation_stack_arn

    @cloudformation_stack_arn.setter
    def cloudformation_stack_arn(self, cloudformation_stack_arn):
        """Sets the cloudformation_stack_arn of this ClusterInfoSummary.

        ARN of the main CloudFormation stack.  # noqa: E501

        :param cloudformation_stack_arn: The cloudformation_stack_arn of this ClusterInfoSummary.
        :type cloudformation_stack_arn: str
        """
        if cloudformation_stack_arn is None:
            raise ValueError("Invalid value for `cloudformation_stack_arn`, must not be `None`")  # noqa: E501

        self._cloudformation_stack_arn = cloudformation_stack_arn

    @property
    def cloudformation_stack_status(self):
        """Gets the cloudformation_stack_status of this ClusterInfoSummary.


        :return: The cloudformation_stack_status of this ClusterInfoSummary.
        :rtype: CloudFormationStackStatus
        """
        return self._cloudformation_stack_status

    @cloudformation_stack_status.setter
    def cloudformation_stack_status(self, cloudformation_stack_status):
        """Sets the cloudformation_stack_status of this ClusterInfoSummary.


        :param cloudformation_stack_status: The cloudformation_stack_status of this ClusterInfoSummary.
        :type cloudformation_stack_status: CloudFormationStackStatus
        """
        if cloudformation_stack_status is None:
            raise ValueError("Invalid value for `cloudformation_stack_status`, must not be `None`")  # noqa: E501

        self._cloudformation_stack_status = cloudformation_stack_status

    @property
    def cluster_status(self):
        """Gets the cluster_status of this ClusterInfoSummary.


        :return: The cluster_status of this ClusterInfoSummary.
        :rtype: ClusterStatus
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """Sets the cluster_status of this ClusterInfoSummary.


        :param cluster_status: The cluster_status of this ClusterInfoSummary.
        :type cluster_status: ClusterStatus
        """
        if cluster_status is None:
            raise ValueError("Invalid value for `cluster_status`, must not be `None`")  # noqa: E501

        self._cluster_status = cluster_status

    @property
    def scheduler(self):
        """Gets the scheduler of this ClusterInfoSummary.


        :return: The scheduler of this ClusterInfoSummary.
        :rtype: Scheduler
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this ClusterInfoSummary.


        :param scheduler: The scheduler of this ClusterInfoSummary.
        :type scheduler: Scheduler
        """

        self._scheduler = scheduler

# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
# with the License. A copy of the License is located at http://aws.amazon.com/apache2.0/
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=R0801


import re

from pcluster.api import util
from pcluster.api.models.base_model_ import Model


class BuildImageRequestContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_configuration=None, name=None, region=None):
        """BuildImageRequestContent - a model defined in OpenAPI

        :param image_configuration: The image_configuration of this BuildImageRequestContent.
        :type image_configuration: str
        :param name: The name of this BuildImageRequestContent.
        :type name: str
        :param region: The region of this BuildImageRequestContent.
        :type region: str
        """
        self.openapi_types = {"image_configuration": str, "name": str, "region": str}

        self.attribute_map = {"image_configuration": "imageConfiguration", "name": "name", "region": "region"}

        self._image_configuration = image_configuration
        self._name = name
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> "BuildImageRequestContent":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BuildImageRequestContent of this BuildImageRequestContent.
        :rtype: BuildImageRequestContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_configuration(self):
        """Gets the image_configuration of this BuildImageRequestContent.

        Image configuration as a YAML document

        :return: The image_configuration of this BuildImageRequestContent.
        :rtype: str
        """
        return self._image_configuration

    @image_configuration.setter
    def image_configuration(self, image_configuration):
        """Sets the image_configuration of this BuildImageRequestContent.

        Image configuration as a YAML document

        :param image_configuration: The image_configuration of this BuildImageRequestContent.
        :type image_configuration: str
        """
        if image_configuration is None:
            raise ValueError("Invalid value for `image_configuration`, must not be `None`")

        self._image_configuration = image_configuration

    @property
    def name(self):
        """Gets the name of this BuildImageRequestContent.

        Name of the image

        :return: The name of this BuildImageRequestContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuildImageRequestContent.

        Name of the image

        :param name: The name of this BuildImageRequestContent.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search(r"^[a-zA-Z][a-zA-Z0-9-]+$", name):
            raise ValueError(
                "Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9-]+$/`"
            )

        self._name = name

    @property
    def region(self):
        """Gets the region of this BuildImageRequestContent.

        AWS Region. Defaults to the region the API is deployed to.

        :return: The region of this BuildImageRequestContent.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this BuildImageRequestContent.

        AWS Region. Defaults to the region the API is deployed to.

        :param region: The region of this BuildImageRequestContent.
        :type region: str
        """

        self._region = region

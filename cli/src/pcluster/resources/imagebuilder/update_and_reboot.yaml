name: UpdateAndReboot
description: Update OS and Reboot
schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: Fail
        action: ExecuteBash
        inputs:
          commands:
            - echo 1

      # Check input base AMI OS and get OS information, the output should be like centos.7 | centos.8 | amzn.2 | ubuntu.18.04
      - name: OperatingSystemRelease
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              FILE=/etc/os-release
              if [ -e ${!FILE} ]; then
                . ${!FILE}
                echo "${!ID}${!VERSION_ID:+.${!VERSION_ID}}"
              else
                echo "The file '${!FILE}' does not exist. Failing build."
                exit {{ build.Fail.outputs.stdout }}
              fi

      # Get uniformed OS name
      - name: OperatingSystemName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'

              if [ `echo "${!RELEASE}" | grep -w '^amzn\.2'` ]; then
                OS='alinux2'
              elif [ `echo "${!RELEASE}" | grep '^centos\.7'` ]; then
                OS='centos7'
              elif [ `echo "${!RELEASE}" | grep '^centos\.8'` ]; then
                OS='centos8'
              elif [ `echo "${!RELEASE}" | grep '^ubuntu\.18'` ]; then
                OS='ubuntu1804'
              else
                echo "Operating System '${!RELEASE}' is not supported. Failing build."
                exit {{ build.Fail.outputs.stdout }}
              fi

              echo ${!OS}

      # Get platform name
      - name: PlatformName
        action: ExecuteBash
        inputs:
          commands:
            - |
               set -v
               OS='{{ build.OperatingSystemName.outputs.stdout }}'

               if [ `echo "${!OS}" | grep -E '^(alinux|centos)'` ]; then
                 PLATFORM='RHEL'
               elif [ `echo "${!OS}" | grep -E '^ubuntu'` ]; then
                 PLATFORM='DEBIAN'
               fi

               echo ${!PLATFORM}

      # Check if input base AMI has supported OS
      - name: IsOperatingSystemSupported
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'
              if [ `echo "${!RELEASE}" | grep -Ev '^(amzn|centos|ubuntu)'` ]; then
                echo "This component does not support '${!RELEASE}'. Failing build."
                exit {{ build.Fail.outputs.stdout }}
              fi

              # This component only supports aarch64 CPUs on Amazon Linux 2, Ubuntu1804 and Centos8
              ARCH=$(uname -m)
              if [[ `echo ${!ARCH}` == 'aarch64' ]]; then
                if [ `echo "${!RELEASE}" | grep -Ev '^(amzn\.2|centos\.8|ubuntu\.18\.04)'` ]; then
                  echo "This component does not support '${!RELEASE}' on ARM64 CPUs. Failing build."
                  exit {{ build.Fail.outputs.stdout }}
                fi
              fi

      - name: UpdateOS
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'

              if [[ ${!PLATFORM} == RHEL ]]; then
                if [[ ${!OS} == centos8 ]]; then
                  dnf -y update
                else
                  yum -y update && package-cleanup -y --oldkernels --count=1
                fi
              elif [[ ${!PLATFORM} == DEBIAN ]]; then
                while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done
                flock $(apt-config shell StateDir Dir::State/d | sed -r "s/.*'(.*)\/?'$/\1/")/daily_lock systemctl stop apt-daily.timer apt-daily.service apt-daily-upgrade.timer apt-daily-upgrade.service
                DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --with-new-pkgs upgrade && apt-get autoremove -y
                apt -y install linux-aws
              fi

      - name: RebootStep
        action: Reboot
        onFailure: Abort
        maxAttempts: 2
        inputs:
            delaySeconds: 10

  - name: validate
    steps:
      - name: UpdateValidate
        action: ExecuteBash
        inputs:
          commands:
            - |
              echo "Check the OS has been updated"
name: ParallelClusterTest
description: Test ParallelCluster AMI
schemaVersion: 1.0

phases:
  - name: test
    steps:
      ### utils ###
      - name: NvSwitches
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              NVSWITCHES=$(lspci -d 10de:1af1 | wc -l)
              echo "${NVSWITCHES}"

      - name: OperatingSystemName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              FILE=/etc/os-release
              if [ -e ${FILE} ]; then
                . ${FILE}
                RELEASE="${ID}${VERSION_ID:+.${VERSION_ID}}"
              fi

              if [ $(echo "${RELEASE}" | grep -w '^amzn\.2') ]; then
                OS='alinux2'
              elif [ $(echo "${RELEASE}" | grep '^centos\.7') ]; then
                OS='centos7'
              elif [ $(echo "${RELEASE}" | grep '^ubuntu\.18') ]; then
                OS='ubuntu1804'
              elif [ $(echo "${RELEASE}" | grep '^ubuntu\.20') ]; then
                OS='ubuntu2004'
              fi

              echo ${OS}

      ### tests ###
      - name: FabricManager
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -vx
              if [ {{ test.NvSwitches.outputs.stdout }} -gt 1 ]; then
                echo "test fabric-manager daemon"
                systemctl show -p SubState nvidia-fabricmanager | grep -i running
                [[ $? -ne 0 ]] && echo "fabric-manager daemon test failed" && exit 1
                echo "NVIDIA Fabric Manager service correctly started"
              fi

      - name: CloudWatch
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -vx
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a status | grep status | grep stopped
              [[ $? -ne 0 ]] && echo "amazon-cloudwatch-agent is not stopped" && exit 1
              echo "CloudWatch test passed"

      - name: Log4jPatcher
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -vx
              OS="{{ test.OperatingSystemName.outputs.stdout }}"
              if [[ ${OS} =~ ^alinux ]]; then
                echo "verify log4j-cve-2021-44228-hotpatch service is disabled"
                systemctl show -p SubState log4j-cve-2021-44228-hotpatch | grep -i -v running
                [[ $? -ne 0 ]] && echo "log4j-cve-2021-44228-hotpatch service is running" && exit 1
                systemctl show -p LoadState log4j-cve-2021-44228-hotpatch | grep -i "LoadState=masked"
                [[ $? -ne 0 ]] && echo "log4j-cve-2021-44228-hotpatch service is not masked" && exit 1
              fi
              echo "Log4jPatcher Group test passed"

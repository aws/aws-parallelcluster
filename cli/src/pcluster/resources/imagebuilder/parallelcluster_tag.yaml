name: ParallelClusterTag
description: Tag ParallelCluster AMI
schemaVersion: 1.0

phases:
  - name: test
    steps:
      # Get AMI ID
      - name: AmiId
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              AMI_ID=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/ami-id)
              echo ${AMI_ID}

      # Get AWS region
      - name: AWSRegion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v

              AVAIL_ZONE=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone)
              AWS_REGION=${AVAIL_ZONE::-1}
              echo ${AWS_REGION}

      - name: OperatingSystemName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              FILE=/etc/os-release
              if [ -e ${FILE} ]; then
                . ${FILE}
                RELEASE="${ID}${VERSION_ID:+.${VERSION_ID}}"
              fi

              if [ $(echo "${RELEASE}" | grep -w '^amzn\.2') ]; then
                OS='alinux2'
              elif [ $(echo "${RELEASE}" | grep '^centos\.7') ]; then
                OS='centos7'
              elif [ $(echo "${RELEASE}" | grep '^centos\.8') ]; then
                OS='centos8'
              elif [ $(echo "${RELEASE}" | grep '^ubuntu\.18') ]; then
                OS='ubuntu1804'
              fi

              echo ${OS}

      - name: ParallelClusterTag
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v

              DESCRIPTION="AWS ParallelCluster AMI for {{ test.OperatingSystemName.outputs.stdout }}"
              append_description () {
                VALUE="$1"
                if [[ -n "${VALUE}" ]] && [[ ! "${VALUE}" =~ NOT_INSTALLED ]]; then
                  echo "Appending ${VALUE} to decription"
                  DESCRIPTION="${DESCRIPTION}, ${VALUE}"
                fi
              }

              add_description () {
                DESCRIPTION="$(echo ${DESCRIPTION} | cut -c -1024)"
                echo "Setting decription to ${DESCRIPTION}"
                aws ec2 modify-image-attribute --region {{ test.AWSRegion.outputs.stdout }} --image-id {{ test.AmiId.outputs.stdout }} --description "${DESCRIPTION}" || echo "Not able to set AMI description"
              }

              add_tag () {
                KEY="$1"
                VALUE="$2"
                if [[ -n "${VALUE}" ]] && [[ ! "${VALUE}" =~ NOT_INSTALLED ]]; then
                  echo "Adding Tag Key=${KEY},Value=${VALUE}"
                  aws ec2 create-tags --region {{ test.AWSRegion.outputs.stdout }} --resource {{ test.AmiId.outputs.stdout }} --tags "Key=${KEY},Value=${VALUE}" || echo "Not able to set AMI tag"
                fi
              }

              get_package_version () {
                set -o pipefail
                PACKAGE_NAME="$1"
                if [ $(which apt 2> /dev/null) ]; then
                  VERSION=$(dpkg -s "${PACKAGE_NAME}" 2> /dev/null | grep -i "^version:" | tr -s ' ' | cut -d' ' -f2 || echo "NOT_INSTALLED")
                  echo "${PACKAGE_NAME}-${VERSION}"
                elif [ $(which yum 2> /dev/null) ]; then
                  echo $(rpm -q "${PACKAGE_NAME}" 2> /dev/null || echo "NOT_INSTALLED")
                fi
                set +o pipefail
              }

              get_modinfo () {
                set -o pipefail
                MODULE_NAME="$1"
                VERSION=$(modinfo "${MODULE_NAME}" 2> /dev/null | grep -i "^version:" | tr -s ' ' | cut -d' ' -f2 || echo "NOT_INSTALLED")
                echo "${MODULE_NAME}-${VERSION}"
                set +o pipefail
              }

              get_source_version () {
                PACKAGE_NAME="$1"
                filename="$(basename $(ls "/opt/parallelcluster/sources/${PACKAGE_NAME}"* 2> /dev/null || echo "NOT_INSTALLED"))"
                filename="${filename%%.tar.gz}"
                filename="${filename%%.zip}"
                echo "${filename}"
              }

              # ParallelCluster bootstrap file
              add_tag "pcluster_bootstrap_file" "$(cat /opt/parallelcluster/.bootstrapped)"

              # OS
              add_tag "pcluster_os" "{{ test.OperatingSystemName.outputs.stdout }}"

              # Kernel
              KERNEL_VERSION="$(uname -r)"
              add_tag "pcluster_kernel" "${KERNEL_VERSION}"
              append_description "kernel-${KERNEL_VERSION}"

              # sudo
              add_tag "pcluster_sudo" "$(get_package_version "sudo")"

              # Lustre
              LUSTRE_VERSION="$(get_package_version "lustre-client")"
              add_tag "pcluster_lustre" "${LUSTRE_VERSION}"
              append_description "${LUSTRE_VERSION}"
              LUSTRE_VERSION="$(get_package_version "lustre-client-modules-aws")"
              add_tag "pcluster_lustre" "${LUSTRE_VERSION}"
              append_description "${LUSTRE_VERSION}"

              # EFA
              EFA_VERSION="$(get_package_version "efa")"
              add_tag "pcluster_efa" "${EFA_VERSION}"
              append_description "${EFA_VERSION}"
              add_tag "pcluster_efa_profile" "$(get_package_version "efa-profile")"
              add_tag "pcluster_efa_config" "$(get_package_version "efa-config")"
              add_tag "pcluster_efa_rdma_core" "$(get_package_version "rdma-core")"
              add_tag "pcluster_efa_libfabric" "$(get_package_version "libfabric-aws-bin")"
              add_tag "pcluster_efa_openmpi40_aws" "$(get_package_version "openmpi40-aws")"

              # DCV
              DCV_VERSION="$(get_package_version "nice-dcv-server")"
              add_tag "pcluster_dcv_server" "${DCV_VERSION}"
              append_description "${DCV_VERSION}"
              add_tag "pcluster_dcv_xdcv" "$(get_package_version "nice-xdcv")"

              # Slurm, Munge and PMIx
              SLURM_VERSION="$(get_source_version "slurm")"
              add_tag "pcluster_slurm" "${SLURM_VERSION}"
              append_description "${SLURM_VERSION}"
              add_tag "pcluster_munge" "$(get_source_version "munge")"
              add_tag "pcluster_pmix" "$(get_source_version "pmix")"

              # Nvidia and Cuda
              NVIDIA_VERSION="$(get_modinfo "nvidia")"
              add_tag "pcluster_nvidia" "${NVIDIA_VERSION}"
              append_description "${NVIDIA_VERSION}"
              # TODO Cuda

              # Add description
              add_description
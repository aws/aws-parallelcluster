# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
# with the License. A copy of the License is located at http://aws.amazon.com/apache2.0/
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=R0801


import re

from api import util
from api.models.base_model_ import Model


class CreateClusterRequestContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, region=None, cluster_configuration=None):
        """CreateClusterRequestContent - a model defined in OpenAPI

        :param name: The name of this CreateClusterRequestContent.
        :type name: str
        :param region: The region of this CreateClusterRequestContent.
        :type region: str
        :param cluster_configuration: The cluster_configuration of this CreateClusterRequestContent.
        :type cluster_configuration: str
        """
        self.openapi_types = {"name": str, "region": str, "cluster_configuration": str}

        self.attribute_map = {"name": "name", "region": "region", "cluster_configuration": "clusterConfiguration"}

        self._name = name
        self._region = region
        self._cluster_configuration = cluster_configuration

    @classmethod
    def from_dict(cls, dikt) -> "CreateClusterRequestContent":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateClusterRequestContent of this CreateClusterRequestContent.
        :rtype: CreateClusterRequestContent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateClusterRequestContent.

        Name of the cluster

        :return: The name of this CreateClusterRequestContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClusterRequestContent.

        Name of the cluster

        :param name: The name of this CreateClusterRequestContent.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search(r"^[a-zA-Z][a-zA-Z0-9-]+$", name):
            raise ValueError(
                "Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9-]+$/`"
            )

        self._name = name

    @property
    def region(self):
        """Gets the region of this CreateClusterRequestContent.

        AWS Region. Defaults to the region the API is deployed to.

        :return: The region of this CreateClusterRequestContent.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateClusterRequestContent.

        AWS Region. Defaults to the region the API is deployed to.

        :param region: The region of this CreateClusterRequestContent.
        :type region: str
        """

        self._region = region

    @property
    def cluster_configuration(self):
        """Gets the cluster_configuration of this CreateClusterRequestContent.

        Cluster configuration as a YAML document

        :return: The cluster_configuration of this CreateClusterRequestContent.
        :rtype: str
        """
        return self._cluster_configuration

    @cluster_configuration.setter
    def cluster_configuration(self, cluster_configuration):
        """Sets the cluster_configuration of this CreateClusterRequestContent.

        Cluster configuration as a YAML document

        :param cluster_configuration: The cluster_configuration of this CreateClusterRequestContent.
        :type cluster_configuration: str
        """
        if cluster_configuration is None:
            raise ValueError("Invalid value for `cluster_configuration`, must not be `None`")

        self._cluster_configuration = cluster_configuration

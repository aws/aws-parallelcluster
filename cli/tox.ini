[tox]
toxworkdir=../.tox
envlist =
    py{27,34,35,36,37}
    code-linters
    cfn-{tests,lint,format-check}

# Default testenv. Used to run tests on all python versions.
[testenv]
whitelist_externals =
    bash
deps = -rtests/requirements.txt
commands =
    bash ./tests/pcluster/test.sh
    # Running with discover and not unittest discover for Python 2.6 compatibility
    python -m discover -s tests/pcluster -p "*_test.py"
    # awsbatch-cli is not currently compatible with Python2.6
    py{27,34,35,36,37}: py.test -l -v --basetemp={envtmpdir} --html=report.html --cov={envsitepackagesdir}/awsbatch tests/ --cov={envsitepackagesdir}/pcluster

# Section used to define common variables used by multiple testenvs.
[vars]
code_dirs =
    setup.py \
    awsbatch/ \
    pcluster/ \
    tests/ \
    ../cloudformation/ \
    ../tests/ \
    ../util/

##############################
###     AUTO-FORMATTER     ###
##############################

# black is a code formatter for python: https://github.com/ambv/black.
# The following target formats python files with black formatter.
[testenv:black]
basepython = python3
skip_install = true
deps =
    black
commands =
    black -l 120 \
        {[vars]code_dirs} \
        {posargs}

# Checks that python files are correctly formatted.
[testenv:black-check]
basepython = python3
skip_install = true
deps =
    {[testenv:black]deps}
commands =
    {[testenv:black]commands} --check --diff

# isort is an imports sorter for python: https://github.com/timothycrosley/isort
# The following target sorts the import according to .isort.cfg file.
[testenv:isort]
basepython = python3
skip_install = true
deps =
    isort
    seed-isort-config
commands =
    isort -rc -w 120 \
        {[vars]code_dirs} \
        {posargs}

# Checks that python imports are correctly sorted.
[testenv:isort-check]
basepython = python3
skip_install = true
deps = {[testenv:isort]deps}
commands = {[testenv:isort]commands} --check --diff

# Reformats code with black and isort.
[testenv:autoformat]
basepython = python3
skip_install = true
deps =
    {[testenv:isort]deps}
    {[testenv:black]deps}
commands =
    {[testenv:isort]commands}
    {[testenv:black]commands}


#############################
###        LINTERS        ###
#############################

# flake8 python linter: https://github.com/PyCQA/flake8.
# flake8 config is located in .flake8 file
[testenv:flake8]
basepython = python3
skip_install = true
deps =
    flake8
    flake8-docstrings
    flake8-bugbear
    flake8-mypy
    # flake8-import-order # delegated to isort
    flake8-colors
    pep8-naming
commands =
    flake8 \
        setup.py \
        awsbatch/ \
        pcluster/ \
        tests/ \
        ../cloudformation/ \
        ../tests/integration-tests/ \
        {posargs}

# bandit security linter for python: https://github.com/PyCQA/bandit
[testenv:bandit]
basepython = python3
skip_install = true
deps =
    bandit
commands =
    bandit -r \
        setup.py \
        awsbatch/ \
        pcluster/ \
        {posargs}

# checks that README file is well-formed.
[testenv:readme]
basepython = python3
skip_install = true
deps =
    readme_renderer
commands =
    python setup.py check -r -s

# Pylint linter for python: https://www.pylint.org/
# Pylint config is located in .pylintrc file.
[testenv:pylint]
basepython = python3
deps =
    pyflakes
    pylint
commands =
    pylint \
        setup.py \
        awsbatch/ \
        pcluster/ \
        pcluster/resources/batch/custom_resources_code \
        {posargs}

# Vulture finds unused code in python: https://github.com/jendrikseipp/vulture
[testenv:vulture]
basepython = python3
skip_install = true
deps =
    vulture
commands =
    vulture \
        setup.py \
        awsbatch/ \
        pcluster/ \
        {posargs}

# Static type checker for Python: http://mypy-lang.org/
[testenv:mypy]
basepython = python3
deps =
    mypy
commands =
    mypy \
        setup.py \
        awsbatch/ \
        pcluster/ \
        {posargs}

# Target that groups all code linters to run in Travis.
[testenv:code-linters]
basepython = python3
skip_install = true
deps =
    {[testenv:black-check]deps}
    {[testenv:isort-check]deps}
    {[testenv:flake8]deps}
    # {[testenv:pylint]deps}
    # {[testenv:bandit]deps}
    # {[testenv:readme]deps}
commands =
    {[testenv:black-check]commands}
    {[testenv:isort-check]commands}
    {[testenv:flake8]commands}
    # {[testenv:pylint]commands}
    # {[testenv:bandit]commands}
    # {[testenv:readme]commands}


##############################
###     CLOUDFORMATION     ###
##############################

# Validate CloudFormation yaml/json templates: https://github.com/awslabs/cfn-python-lint.
[testenv:cfn-lint]
basepython = python3
skip_install = true
changedir =
    ../cloudformation
deps = cfn-lint
# E2504 disabled since does not allow two-digit numbers in ephemeral(n)
# W2507 disabled since we want to have nullable String type parameters
# E2523 disabled since we have both a Launch Template and Launch Configuration
# W2508 disabled since we don't want to always specify Availability Zone
# iE3008 disabled because of https://github.com/awslabs/cfn-python-lint/issues/564
commands =
    cfn-lint -iE2504 -iW2507 -iE2523 aws-parallelcluster.cfn.json
    cfn-lint -iE3008 batch-substack.cfn.json
    cfn-lint ebs-substack.cfn.json
    cfn-lint efs-substack.cfn.json
    cfn-lint raid-substack.cfn.json
    cfn-lint -iW2508 networking/public.cfn.json
    cfn-lint -iW2508 networking/public-private.cfn.json

# Validates that cfn json templates are correctly formatted.
[testenv:cfn-format-check]
basepython = python3
skip_install = true
changedir =
    ../cloudformation
commands =
    python utils/json_formatter.py -c *.cfn.json
    python utils/json_formatter.py -c networking/*.cfn.json

# Formats all cfn.json files.
[testenv:cfn-format]
basepython = python3
skip_install = true
changedir =
    ../cloudformation
commands =
    python utils/json_formatter.py *.cfn.json
    python utils/json_formatter.py networking/*.cfn.json

# Runs tests for cfn templates.
[testenv:cfn-tests]
basepython = python3
skip_install = true
changedir =
    ../cloudformation
commands =
    py.test -l --basetemp={envtmpdir} tests/


#############################
###        TOOLING        ###
#############################

# Creates a source and built distribution in the dist directory.
# Very handy when you want to package the cli and test on a different machine.
# Simply grab the tar.gz file outputted by the build and run a pip install aws-parallelcluster.tar.gz.
[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

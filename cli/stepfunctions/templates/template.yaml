AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for Step Function Integration'
Resources:
  CfnClusterLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
      Path: '/'
      Policies:
        - PolicyName: 'SecretManagerPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: '*'
                Effect: 'Allow'
                Action:
                  - 'ec2:CreateKeyPair'
                  - 'secretsmanager:CreateSecret'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetSecretValue'
  CfnClusterStateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
      Path: '/'
      Policies:
        - PolicyName: 'StateExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: '*'
                Effect: 'Allow'
                Action: 'lambda:InvokeFunction'
  CfnClusterUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'CfnClusterUserPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'EC2Describe'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'ec2:DescribeKeyPairs'
              - 'ec2:DescribeVpcs'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribePlacementGroups'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeVpcAttribute'
              - 'ec2:DescribeAddresses'
              - 'ec2:CreateTags'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeAvailabilityZones'
          - Sid: 'EC2Modify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'ec2:CreateVolume'
              - 'ec2:RunInstances'
              - 'ec2:AllocateAddress'
              - 'ec2:AssociateAddress'
              - 'ec2:AttachNetworkInterface'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:ModifyVolumeAttribute'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteVolume'
              - 'ec2:TerminateInstances'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DisassociateAddress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:ReleaseAddress'
          - Sid: 'AutoScalingDescribe'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeAutoScalingInstances'
          - Sid: 'AutoScalingModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'autoscaling:CreateAutoScalingGroup'
              - 'autoscaling:CreateLaunchConfiguration'
              - 'autoscaling:PutNotificationConfiguration'
              - 'autoscaling:UpdateAutoScalingGroup'
              - 'autoscaling:PutScalingPolicy'
              - 'autoscaling:DeleteLaunchConfiguration'
              - 'autoscaling:DescribeScalingActivities'
              - 'autoscaling:DeleteAutoScalingGroup'
              - 'autoscaling:DeletePolicy'
          - Sid: 'DynamoDBDescribe'
            Resource: '*'
            Effect: 'Allow'
            Action: 'dynamodb:DescribeTable'
          - Sid: 'DynamoDBModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'dynamodb:CreateTable'
              - 'dynamodb:DeleteTable'
          - Sid: 'CloudWatchModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'cloudwatch:PutMetricAlarm'
              - 'cloudwatch:DeleteAlarms'
          - Sid: 'SQSDescribe'
            Resource: '*'
            Effect: 'Allow'
            Action: 'sqs:GetQueueAttributes'
          - Sid: 'SQSModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'sqs:CreateQueue'
              - 'sqs:SetQueueAttributes'
              - 'sqs:DeleteQueue'
          - Sid: 'SNSDescribe'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'sns:ListTopics'
              - 'sns:GetTopicAttributes'
          - Sid: 'SNSModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'sns:CreateTopic'
              - 'sns:Subscribe'
              - 'sns:DeleteTopic'
          - Sid: 'CloudFormationDescribe'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:DescribeStackResources'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:ListStacks'
          - Sid: 'CloudFormationModify'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:UpdateStack'
          - Sid: 'S3CfnClusterReadOnly'
            Resource: !Sub 'arn:aws:s3:::${AWS::Region}-cfncluster*'
            Effect: 'Allow'
            Action:
              - 's3:Get*'
              - 's3:List*'
          - Sid: 'IAMModify'
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
            Effect: 'Allow'
            Action:
              - 'iam:PassRole'
              - 'iam:CreateRole'
              - 'iam:DeleteRole'
          - Sid: 'IAMInstanceProfile'
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/*'
            Effect: 'Allow'
            Action:
              - 'iam:CreateInstanceProfile'
              - 'iam:DeleteInstanceProfile'
          - Sid: 'IAMAddRoleToProfile'
            Resource: '*'
            Effect: 'Allow'
            Action:
              - 'iam:AddRoleToInstanceProfile'
              - 'iam:RemoveRoleFromInstanceProfile'
              - 'iam:PutRolePolicy'
              - 'iam:DeleteRolePolicy'
      Roles:
        - Ref: 'CfnClusterLambdaRole'
  CreateCfnCluster:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Creates a cluster'
      FunctionName: 'CreateCfnCluster'
      Handler: 'handlers.create_cfncluster'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  PollOnCluster:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Polls on creation of a cluster'
      FunctionName: 'PollOnCluster'
      Handler: 'handlers.is_cluster_ready'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  ScheduleJob:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Schedules the next job'
      FunctionName: 'ScheduleJob'
      Handler: 'jobs.run_job'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  PollOnJob:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Polls on status of jobs'
      FunctionName: 'PollOnJob'
      Handler: 'jobs.is_job_done'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  RunJob:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Runs the next job'
      FunctionName: 'RunJob'
      Handler: 'jobs.run_job'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  DeleteCluster:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Deletes a cluster'
      FunctionName: 'DeleteCfnCluster'
      Handler: 'handlers.delete_cfncluster'
      MemorySize: 1536
      Role: !GetAtt [ CfnClusterLambdaRole, Arn ]
      Runtime: 'python2.7'
      Timeout: 300
  CfnClusterStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: 'CfnClusterStateMachine'
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "CfnCluster Step Function",
              "StartAt": "Create_CfnCluster",
              "States": {
                "Create_CfnCluster": {
                  "Type": "Task",
                  "Resource": "${createClusterArn}",
                  "Next": "Wait_For_Cluster"
                },
                "Wait_For_Cluster": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "Poll_On_Cluster"
                },
                "Poll_On_Cluster": {
                  "Type": "Task",
                  "Resource": "${pollOnClusterArn}",
                  "Next": "Poll_Choice"
                },
                "Poll_Choice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "idle",
                      "Next": "Wait_For_Cluster"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "complete",
                      "Next": "Creation_Success"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "failed",
                      "Next": "Creation_Failed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "timeout",
                      "Next": "Cluster_Timeout"
                    }
                  ]
                },
                "Creation_Failed": {
                  "Type": "Fail",
                  "Cause": "Cluster failed to create"
                },
                "Cluster_Timeout": {
                  "Type": "Fail",
                  "Cause": "Cluster creation timed out"
                },
                "Creation_Success": {
                  "Type": "Pass",
                  "Next": "{{ entry }}"
                },
{{ jobs }},
                "Delete_CfnCluster": {
                  "Type": "Task",
                  "Resource": "${deleteClusterArn}",
                  "End": true
                }
              }
            }
          - {
              createClusterArn: !GetAtt [ CreateCfnCluster, Arn ],
              pollOnClusterArn: !GetAtt [ PollOnCluster, Arn ],
              deleteClusterArn: !GetAtt [ DeleteCluster, Arn ],
              pollOnJobArn: !GetAtt [ PollOnJob, Arn ],
              runJobArn: !GetAtt [ RunJob, Arn ]
            }
      RoleArn: !GetAtt [ CfnClusterStateMachineRole, Arn ]
Outputs:
  StateMachineArn:
    Value:
      Ref: CfnClusterStateMachine
  ExecutionInput:
    Description: 'Sample Input to start execution'
    Value: |-
      {
        "cluster_name": "cfnclusterstepfunction"
      }

Resources:
  MultiUserInfraVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1Subnet281E6D3C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.0.0/17
      VpcId:
        Ref: MultiUserInfraVpc
      AvailabilityZone: {{ region }}a
      MapPublicIpOnLaunch: true
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1RouteTable440E65B1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MultiUserInfraVpc
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1RouteTableAssociation2F67DCF9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1RouteTable440E65B1
      SubnetId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1Subnet281E6D3C
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1DefaultRouteB1A9DE6E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1RouteTable440E65B1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MultiUserInfraVpcIGW322D5805
    DependsOn:
      - MultiUserInfraVpcVPCGW8C41E9C2
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2Subnet5218CAF9:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.128.0/17
      VpcId:
        Ref: MultiUserInfraVpc
      AvailabilityZone: {{ region }}b
      MapPublicIpOnLaunch: true
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2RouteTable94561FFD:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MultiUserInfraVpc
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2RouteTableAssociation69E447BF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2RouteTable94561FFD
      SubnetId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2Subnet5218CAF9
  MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2DefaultRouteFFA92127:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2RouteTable94561FFD
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MultiUserInfraVpcIGW322D5805
    DependsOn:
      - MultiUserInfraVpcVPCGW8C41E9C2
  MultiUserInfraVpcIGW322D5805:
    Type: AWS::EC2::InternetGateway
  MultiUserInfraVpcVPCGW8C41E9C2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MultiUserInfraVpc
      InternetGatewayId:
        Ref: MultiUserInfraVpcIGW322D5805
  MultiUserInfraAdDomainAdminNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: "-1"
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: MultiUserInfraVpc
  MultiUserInfraDirectory:
    Type: AWS::DirectoryService::{{ directory_type }}
    Properties:
      Name: {{ ad_domain_name }}
      Password: {{ ad_admin_password }}
      VpcSettings:
        SubnetIds:
          - Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1Subnet281E6D3C
          - Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2Subnet5218CAF9
        VpcId:
          Ref: MultiUserInfraVpc
      {% if directory_type == "SimpleAD" %}
      Size: Large
      {% endif %}
      ShortName: NET
  MultiUserInfraVpcDhcpOptsSet:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: {{ ad_domain_name }} {{ default_ec2_domain }}
      DomainNameServers:
        Fn::GetAtt:
          - MultiUserInfraDirectory
          - DnsIpAddresses
  MultiUserInfraAdDomainAdminNodeWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  MultiUserInfraVpcDhcpOptsSetAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId:
        Ref: MultiUserInfraVpcDhcpOptsSet
      VpcId:
        Ref: MultiUserInfraVpc
  MultiUserInfraAdDomainAdminNodeWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: MultiUserInfraAdDomainAdminNodeWaitConditionHandle
      Timeout: "1800"
    DependsOn:
      - MultiUserInfraDirectory
  MultiUserInfraJoinRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
  MultiUserInfraJoinProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: MultiUserInfraJoinRole
    DependsOn:
      - MultiUserInfraJoinRole
  MultiUserInfraAdDomainAdminNode:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: {{ region }}a
      IamInstanceProfile:
        Ref: MultiUserInfraJoinProfile
      ImageId: {{ admin_node_ami_id }}
      InstanceType: {{ admin_node_instance_type }}
      KeyName: {{ admin_node_key_name }}
      SecurityGroupIds:
        - Ref: MultiUserInfraAdDomainAdminNodeSecurityGroup
      SubnetId:
        Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1Subnet281E6D3C
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash

                set -ex

                AD_ADMIN_PASSWORD='{{ ad_admin_password }}'
                AD_DOMAIN='{{ ad_domain_name }}'
                AD_ADMIN_USER='{{ ad_admin_user }}'

                SSSD_CONFIG_PATH=/etc/sssd/sssd.conf
                SSHD_CONFIG_PATH=/etc/ssh/sshd_config

                # Install dependencies
                yum -y install sssd realmd samba-common samba-common-tools openldap-clients krb5-workstation adcli

                # Join realm
                echo "$AD_ADMIN_PASSWORD" | realm join -U "${AD_ADMIN_USER}@${AD_DOMAIN}" "$AD_DOMAIN"

                # Configure SSSD
                # SSSD: don't use full hostnames for the AD domain
                sed -i 's/use_fully_qualified_names = True/use_fully_qualified_names = False/g' $SSSD_CONFIG_PATH
                grep use_fully_qualified_names "$SSSD_CONFIG_PATH"
                # SSSD: modify default home directory path
                sed -ri 's/fallback_homedir =.*$/fallback_homedir = \/home\/%u/g' "$SSSD_CONFIG_PATH"
                grep fallback_homedir "$SSSD_CONFIG_PATH"
                systemctl restart sssd

                # Configure SSHD
                # SSHD: enable password auth
                sed -ri 's/\s*PasswordAuthentication\s+no$/PasswordAuthentication yes/g' /etc/ssh/sshd_config
                grep -E '\s*PasswordAuthentication\s+yes' "$SSHD_CONFIG_PATH"
                systemctl restart sshd

                # Write a script that will be invoked via SSM in order to add users to the domain
                mkdir -p $(dirname /usr/local/bin/add_user.sh)
                cat << EOF > /usr/local/bin/add_user.sh
                #!/bin/bash
                NEW_USER_ALIAS=\$1
                if [ -z "\${NEW_USER_ALIAS}" ]; then
                    echo 1>&2 "Alias for new user must be passed as first arg"
                    exit 1
                fi
                echo "${AD_ADMIN_PASSWORD}" | adcli create-user -U ${AD_ADMIN_USER} \${NEW_USER_ALIAS} --domain="${AD_DOMAIN}" --display-name="\${NEW_USER_ALIAS}" --stdin-password
                EOF
                chmod +x /usr/local/bin/add_user.sh

                # Signal success
                # TODO: don't assumed this is installed (in case non-AL2 AMI used)
                /opt/aws/bin/cfn-signal --exit-code=0 --reason="admin node setup complete" '
              - Ref: MultiUserInfraAdDomainAdminNodeWaitConditionHandle
              - "'"
    DependsOn:
      - MultiUserInfraDirectory
      - MultiUserInfraJoinProfile
      - MultiUserInfraVpcDhcpOptsSet
      - MultiUserInfraVpcDhcpOptsSetAssociation
  MultiUserInfraUserAddingDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Add user to AD domain
        parameters:
          NewUserAlias:
            type: String
            description: Alias to give new user
        mainSteps:
          - action: aws:runShellScript
            name: addAdUser
            inputs:
              runCommand:
                - "su - {{ ad_admin_user }} /usr/local/bin/add_user.sh {% raw %}{{ NewUserAlias }}{% endraw %} "
      DocumentType: Command
      TargetType: /AWS::EC2::Instance
  MultiUserInfraUserAddingProjectRoleC4F44634:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
  MultiUserInfraUserAddingProjectRoleDefaultPolicy63A414C8:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::{{ bucket_name }}
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :logs:{{ region }}:{{ account }}:log-group:/aws/codebuild/
                    - Ref: MultiUserInfraUserAddingProjectA380D59C
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :logs:{{ region }}:{{ account }}:log-group:/aws/codebuild/
                    - Ref: MultiUserInfraUserAddingProjectA380D59C
                    - :*
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :codebuild:{{ region }}:{{ account }}:report-group/
                  - Ref: MultiUserInfraUserAddingProjectA380D59C
                  - -*
          - Action:
              - ecr:GetAuthorizationToken
              - ssm:*
              - ds:*
              - s3:*
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: MultiUserInfraUserAddingProjectRoleDefaultPolicy63A414C8
      Roles:
        - Ref: MultiUserInfraUserAddingProjectRoleC4F44634
  MultiUserInfraUserAddingProjectA380D59C:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: DIRECTORY_ID
            Type: PLAINTEXT
            Value:
              Ref: MultiUserInfraDirectory
          - Name: ADMIN_NODE_INSTANCE_ID
            Type: PLAINTEXT
            Value:
              Ref: MultiUserInfraAdDomainAdminNode
          - Name: NUM_USERS_TO_CREATE
            Type: PLAINTEXT
            Value: "{{ num_users_to_create }}"
          - Name: USER_ADDING_DOCUMENT_NAME
            Type: PLAINTEXT
            Value:
              Ref: MultiUserInfraUserAddingDocument
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole:
        Fn::GetAtt:
          - MultiUserInfraUserAddingProjectRoleC4F44634
          - Arn
      Source:
        Location: {{ bucket_name }}/codebuild_sources/archive.zip
        Type: S3
  MultiUserInfraUserAdderRole33101908:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:*
                  - lambda:*
                  - codebuild:*
                  - events:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: inline
  MultiUserInfraUserAdderEventHandler2ECBB45C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{ bucket_name }}
        S3Key: custom_resources_code/archive.zip
      Role:
        Fn::GetAtt:
          - MultiUserInfraUserAdderRole33101908
          - Arn
      Handler: user_adder_event_handler.handler
      Runtime: python3.8
      Timeout: 900
    DependsOn:
      - MultiUserInfraAdDomainAdminNodeWaitCondition
      - MultiUserInfraUserAdderRole33101908
  MultiUserInfraUserAdderCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - MultiUserInfraUserAdderEventHandler2ECBB45C
          - Arn
      codebuild_project_name:
        Ref: MultiUserInfraUserAddingProjectA380D59C
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
Outputs:
  VpcId:
    Value:
      Ref: MultiUserInfraVpc
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - VpcId
  SubnetIds:
    Value:
      Fn::Join:
        - ""
        - - Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet1Subnet281E6D3C
          - ","
          - Ref: MultiUserInfraVpcMultiUserSubnetOneConfigurationSubnet2Subnet5218CAF9
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - SubnetIds
  DomainName:
    Value: {{ ad_domain_name }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - DomainName
  LdapUris:
    Value:
      Fn::Join:
        - ""
        - - ldap://
          - Fn::Select:
              - 0
              - Fn::GetAtt:
                  - MultiUserInfraDirectory
                  - DnsIpAddresses
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - LdapUris
  Password:
    Value: {{ ad_admin_password }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - Password
  ReadOnlyUserName:
    Value: {{ ad_admin_user }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - ReadOnlyUserName


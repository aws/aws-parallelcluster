Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.0.0/17
      VpcId:
        Ref: Vpc
      AvailabilityZone: {{ region }}a
      MapPublicIpOnLaunch: true
  PublicSubnetOneRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetOneRouteTable
      SubnetId:
        Ref: PublicSubnetOne
  PublicSubnetOneIgwRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetOneRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    DependsOn:
      - VpcGatewayAttachment
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.128.0/17
      VpcId:
        Ref: Vpc
      AvailabilityZone: {{ region }}b
      MapPublicIpOnLaunch: true
  PublicSubnetTwoRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetTwoRouteTable
      SubnetId:
        Ref: PublicSubnetTwo
  PublicSubnetTwoIgwRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetTwoRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    DependsOn:
      - VpcGatewayAttachment
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
  AdDomainAdminNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: "-1"
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: Vpc
  Directory:
    Type: AWS::DirectoryService::{{ directory_type }}
    Properties:
      Name: {{ ad_domain_name }}
      Password: {{ ad_admin_password }}
      VpcSettings:
        SubnetIds:
          - Ref: PublicSubnetOne
          - Ref: PublicSubnetTwo
        VpcId:
          Ref: Vpc
      {% if directory_type == "SimpleAD" %}
      Size: Large
      {% endif %}
      ShortName: NET
  VpcDhcpOptsSet:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: {{ ad_domain_name }} {{ default_ec2_domain }}
      DomainNameServers:
        Fn::GetAtt:
          - Directory
          - DnsIpAddresses
  AdDomainAdminNodeWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  VpcDhcpOptsSetAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId:
        Ref: VpcDhcpOptsSet
      VpcId:
        Ref: Vpc
  AdDomainAdminNodeWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: AdDomainAdminNodeWaitConditionHandle
      Timeout: "1800"
    DependsOn:
      - Directory
  JoinRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ds:ResetUserPassword
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - Ref: AWS::Partition
                        - :ds:{{ region }}:{{ account }}:directory/
                        - Ref: Directory
          PolicyName:
            Fn::Join:
              - ""
              - - Ref: AWS::StackName
                - resetuserpassword
  JoinProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: JoinRole
    DependsOn:
      - JoinRole
  AdDomainAdminNode:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: {{ region }}a
      IamInstanceProfile:
        Ref: JoinProfile
      ImageId: {{ admin_node_ami_id }}
      InstanceType: {{ admin_node_instance_type }}
      KeyName: {{ admin_node_key_name }}
      SecurityGroupIds:
        - Ref: AdDomainAdminNodeSecurityGroup
      SubnetId:
        Ref: PublicSubnetOne
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash

                set -ex

                AD_ADMIN_PASSWORD='{{ ad_admin_password }}'
                AD_DOMAIN='{{ ad_domain_name }}'
                AD_ADMIN_USER='{{ ad_admin_user }}'

                SSSD_CONFIG_PATH=/etc/sssd/sssd.conf
                SSHD_CONFIG_PATH=/etc/ssh/sshd_config

                # Install dependencies
                yum -y install sssd realmd samba-common samba-common-tools openldap-clients krb5-workstation adcli

                # Join realm
                echo "$AD_ADMIN_PASSWORD" | realm join -U "${AD_ADMIN_USER}@${AD_DOMAIN}" "$AD_DOMAIN"

                # Configure SSSD
                # SSSD: don't use full hostnames for the AD domain
                sed -i 's/use_fully_qualified_names = True/use_fully_qualified_names = False/g' $SSSD_CONFIG_PATH
                grep use_fully_qualified_names "$SSSD_CONFIG_PATH"
                # SSSD: modify default home directory path
                sed -ri 's/fallback_homedir =.*$/fallback_homedir = \/home\/%u/g' "$SSSD_CONFIG_PATH"
                grep fallback_homedir "$SSSD_CONFIG_PATH"
                systemctl restart sssd

                # Configure SSHD
                # SSHD: enable password auth
                sed -ri 's/\s*PasswordAuthentication\s+no$/PasswordAuthentication yes/g' /etc/ssh/sshd_config
                grep -E '\s*PasswordAuthentication\s+yes' "$SSHD_CONFIG_PATH"
                systemctl restart sshd

                # Write a script that will be invoked via SSM in order to add users to the domain
                mkdir -p $(dirname /usr/local/bin/add_user.sh)
                # Script to add a single user
                cat << EOF > /usr/local/bin/add_user.sh
                #!/bin/bash
                NEW_USER_ALIAS=\$1
                if [ -z "\${NEW_USER_ALIAS}" ]; then
                    echo 1>&2 "Alias for new user must be passed as first arg"
                    exit 1
                fi
                echo "${AD_ADMIN_PASSWORD}" | adcli create-user -U ${AD_ADMIN_USER} \${NEW_USER_ALIAS} --domain="${AD_DOMAIN}" --display-name="\${NEW_USER_ALIAS}" --stdin-password
                EOF
                chmod +x /usr/local/bin/add_user.sh
                # Script to add a number of users
                cat << EOF > /usr/local/bin/add_a_number_of_users.sh
                #!/bin/bash
                DIRECTORY_ID=\$1
                NUM_USERS_TO_CREATE=\$2
                if [ -z "\${DIRECTORY_ID}" ]; then
                    echo 1>&2 "DIRECTORY_ID must be passed as first arg"
                    exit 1
                fi
                if [ -z "\${NUM_USERS_TO_CREATE}" ]; then
                    echo 1>&2 "NUM_USERS_TO_CREATE must be passed as second arg"
                    exit 1
                fi
                for i in \$(seq 1 "\${NUM_USERS_TO_CREATE}"); do
                    NEW_USER_ALIASES="\${NEW_USER_ALIASES} PclusterUser\${i}"
                done
                # Create users in directory
                # TODO: add ability to trigger this via lambda
                for NEW_USER_ALIAS in \${NEW_USER_ALIASES}; do
                    echo "Creating \${NEW_USER_ALIAS} in directory \${DIRECTORY_ID}"
                    /usr/local/bin/add_user.sh \${NEW_USER_ALIAS}
                done

                # Change user passwords
                # TODO: put this in a lambda that can be triggered by users
                for NEW_USER_ALIAS in \${NEW_USER_ALIASES}; do
                    sleep 1  # TODO: retry w/ backoff instead of sleeping
                    echo "Setting password for user \${NEW_USER_ALIAS}"
                    aws ds reset-user-password \
                        --region {{ region }} \
                        --directory-id "\${DIRECTORY_ID}" \
                        --user-name "\${NEW_USER_ALIAS}" \
                        --new-password "ApplesBananasCherries!"  # TODO: generate random passwords
                done
                EOF
                chmod +x /usr/local/bin/add_a_number_of_users.sh

                # Signal success
                # TODO: don't assumed this is installed (in case non-AL2 AMI used)
                /opt/aws/bin/cfn-signal --exit-code=0 --reason="admin node setup complete" '
              - Ref: AdDomainAdminNodeWaitConditionHandle
              - "'"
    DependsOn:
      - Directory
      - JoinProfile
      - VpcDhcpOptsSet
      - VpcDhcpOptsSetAssociation
  UserAddingDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Add user to AD domain
        parameters:
          DirectoryId:
            type: String
            description: ID of the direc
          NumUsersToCreate:
            type: String
            description: Number of users to be created
        mainSteps:
          - action: aws:runShellScript
            name: addAdUser
            inputs:
              runCommand:
                - "su - {{ ad_admin_user }} /usr/local/bin/add_a_number_of_users.sh {% raw %}{{ DirectoryId }} {{ NumUsersToCreate }}{% endraw %} "
      DocumentType: Command
      TargetType: /AWS::EC2::Instance
Outputs:
  VpcId:
    Value:
      Ref: Vpc
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - VpcId
  SubnetIds:
    Value:
      Fn::Join:
        - ""
        - - Ref: PublicSubnetOne
          - ","
          - Ref: PublicSubnetTwo
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - SubnetIds
  DomainName:
    Value: {{ ad_domain_name }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - DomainName
  LdapUris:
    Value:
      Fn::Join:
        - ""
        - - ldap://
          - Fn::Select:
              - 0
              - Fn::GetAtt:
                  - Directory
                  - DnsIpAddresses
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - LdapUris
  Password:
    Value: {{ ad_admin_password }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - Password
  ReadOnlyUserName:
    Value: {{ ad_admin_user }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - ReadOnlyUserName


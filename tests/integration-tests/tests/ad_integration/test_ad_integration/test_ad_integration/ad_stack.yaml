Parameters:
  Vpc:
    Description: VPC ID.
    Type: String
  PrivateSubnetOne:
    Description: Subnet ID of the first subnet.
    Type: String
  PrivateSubnetTwo:
    Description: Subnet ID of the second subnet. This subnet should be in another availability zone
    Type: String
  PublicSubnetOne:
    Description: Subnet ID of the public subnet.
    Type: String
Resources:
  AdDomainAdminNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: "-1"
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId:
        Ref: Vpc
  Directory:
    Type: AWS::DirectoryService::{{ directory_type }}
    Properties:
      Name: {{ ad_domain_name }}
      Password: {{ ad_admin_password }}
      VpcSettings:
        SubnetIds:
          - Ref: PrivateSubnetOne
          - Ref: PrivateSubnetTwo
        VpcId:
          Ref: Vpc
      {% if directory_type == "SimpleAD" %}
      Size: Small
      {% endif %}
      {% if directory_type == "MicrosoftAD" %}
      Edition: Standard
      {% endif %}
      ShortName: {{ ad_domain_short_name }}
  AdDomainAdminNodeWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  AdDomainAdminNodeWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: AdDomainAdminNodeWaitConditionHandle
      Timeout: "1800"
    DependsOn:
      - Directory
  JoinRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ds:ResetUserPassword
                Effect: Allow
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - Ref: AWS::Partition
                        - :ds:{{ region }}:{{ account }}:directory/
                        - Ref: Directory
          PolicyName:
            Fn::Join:
              - ""
              - - Ref: AWS::StackName
                - resetuserpassword
  JoinProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: JoinRole
    DependsOn:
      - JoinRole
  AdDomainAdminNode:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: JoinProfile
      ImageId: {{ admin_node_ami_id }}
      InstanceType: {{ admin_node_instance_type }}
      KeyName: {{ admin_node_key_name }}
      SecurityGroupIds:
        - Ref: AdDomainAdminNodeSecurityGroup
      SubnetId:
        Ref: PublicSubnetOne
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash

                set -ex
                DIRECTORY_DNS_SERVER_IPS=
              - Fn::Join:
                - ","
                - Fn::GetAtt:
                  - Directory
                  - DnsIpAddresses
              - |-

                DNS_IP_ONE=$(echo $DIRECTORY_DNS_SERVER_IPS | cut -d ',' -f 1)
                DNS_IP_TWO=$(echo $DIRECTORY_DNS_SERVER_IPS | cut -d ',' -f 2)

                AD_ADMIN_PASSWORD='{{ ad_admin_password }}'
                AD_DOMAIN='{{ ad_domain_name }}'
                AD_ADMIN_USER='{{ ad_admin_user }}'
                AD_USERS_BASE_SEARCH='{{ ad_users_base_search }}'
                DEFAULT_EC2_DOMAIN={{ default_ec2_domain }}

                cat << EOF > /etc/resolv.conf
                domain           $AD_DOMAIN $DEFAULT_EC2_DOMAIN
                nameserver       $DNS_IP_ONE
                nameserver       $DNS_IP_TWO
                EOF

                SSSD_CONFIG_PATH=/etc/sssd/sssd.conf
                SSHD_CONFIG_PATH=/etc/ssh/sshd_config

                # Install dependencies
                yum -y install sssd realmd samba-common samba-common-tools openldap-clients krb5-workstation adcli

                # Join realm
                echo "$AD_ADMIN_PASSWORD" | realm join -U "${AD_ADMIN_USER}@${AD_DOMAIN}" "$AD_DOMAIN"

                # Configure SSSD
                # SSSD: don't use full hostnames for the AD domain
                sed -i 's/use_fully_qualified_names = True/use_fully_qualified_names = False/g' $SSSD_CONFIG_PATH
                grep use_fully_qualified_names "$SSSD_CONFIG_PATH"
                # SSSD: modify default home directory path
                sed -ri 's/fallback_homedir =.*$/fallback_homedir = \/home\/%u/g' "$SSSD_CONFIG_PATH"
                grep fallback_homedir "$SSSD_CONFIG_PATH"
                systemctl restart sssd

                # Configure SSHD
                # SSHD: enable password auth
                sed -ri 's/\s*PasswordAuthentication\s+no$/PasswordAuthentication yes/g' /etc/ssh/sshd_config
                grep -E '\s*PasswordAuthentication\s+yes' "$SSHD_CONFIG_PATH"
                systemctl restart sshd

                # Script to add a number of users
                cat << EOF > /usr/local/bin/add_a_number_of_users.sh
                #!/bin/bash
                DIRECTORY_ID=\$1
                NUM_USERS_TO_CREATE=\$2
                if [ -z "\${DIRECTORY_ID}" ]; then
                    echo 1>&2 "DIRECTORY_ID must be passed as first arg"
                    exit 1
                fi
                if [ -z "\${NUM_USERS_TO_CREATE}" ]; then
                    echo 1>&2 "NUM_USERS_TO_CREATE must be passed as second arg"
                    exit 1
                fi
                for i in \$(seq 1 "\${NUM_USERS_TO_CREATE}"); do
                    NEW_USER_ALIASES="\${NEW_USER_ALIASES} PclusterUser\${i}"
                done

                # Create LDIF file to create users
                LDIF_FILE="adusers.ldif"
                rm -rf \${LDIF_FILE}
                for NEW_USER_ALIAS in \${NEW_USER_ALIASES}; do
                  echo "dn: CN=\${NEW_USER_ALIAS},${AD_USERS_BASE_SEARCH}" >> \${LDIF_FILE}
                  echo "objectClass: top" >> \${LDIF_FILE}
                  echo "objectClass: person" >> \${LDIF_FILE}
                  echo "objectClass: organizationalPerson" >> \${LDIF_FILE}
                  echo "objectClass: user" >> \${LDIF_FILE}
                  echo "userAccountControl: 514" >> \${LDIF_FILE}
                  echo "accountExpires: 0" >> \${LDIF_FILE}
                  echo "sAMAccountName: \${NEW_USER_ALIAS}" >> \${LDIF_FILE}
                  echo "" >> \${LDIF_FILE}
                done
                echo "Wrote LDIF file: \${LDIF_FILE}"
                cat \${LDIF_FILE}

                # Create users in directory
                # TODO: add ability to trigger this via lambda
                MAX_ATTEMPTS=5
                for ATTEMPT in \$(seq 1 \${MAX_ATTEMPTS}); do
                  echo "Creating users from LDIF file \${LDIF_FILE} (attempt \${ATTEMPT}/\${MAX_ATTEMPTS})"
                  ldapadd -f "\${LDIF_FILE}" -x -h "${DNS_IP_ONE}" -D "CN=${AD_ADMIN_USER},${AD_USERS_BASE_SEARCH}" -w "${AD_ADMIN_PASSWORD}" && break
                  if [ \${ATTEMPT} -ge \${MAX_ATTEMPTS} ]; then
                    echo "ERROR: Cannot create users"
                    exit 1
                  else
                    SLEEP_TIME=\${ATTEMPT}
                    echo "WARNING: Cannot create users. Will retry in \${SLEEP_TIME} seconds"
                    sleep \${SLEEP_TIME}
                  fi
                done

                # Change user passwords
                # TODO: put this in a lambda that can be triggered by users
                for NEW_USER_ALIAS in \${NEW_USER_ALIASES}; do
                    MAX_ATTEMPTS=5
                    for ATTEMPT in \$(seq 1 \${MAX_ATTEMPTS}); do
                      echo "Setting password for user \${NEW_USER_ALIAS} (attempt \${ATTEMPT}/\${MAX_ATTEMPTS})"
                      aws ds reset-user-password \
                          --region {{ region }} \
                          --directory-id "\${DIRECTORY_ID}" \
                          --user-name "\${NEW_USER_ALIAS}" \
                          --new-password "{{ ad_user_password }}" && break
                      if [ \${ATTEMPT} -ge \${MAX_ATTEMPTS} ]; then
                        echo "ERROR: Cannot set password for user \${NEW_USER_ALIAS}"
                        exit 1
                      else
                        SLEEP_TIME=\${ATTEMPT}
                        echo "WARNING: Cannot set password for user \${NEW_USER_ALIAS}. Will retry in \${SLEEP_TIME} seconds"
                        sleep \${SLEEP_TIME}
                      fi
                    done
                done
                EOF
                chmod +x /usr/local/bin/add_a_number_of_users.sh

                # Signal success
                # TODO: don't assumed this is installed (in case non-AL2 AMI used)
                /opt/aws/bin/cfn-signal --exit-code=0 --reason="admin node setup complete" '
              - Ref: AdDomainAdminNodeWaitConditionHandle
              - "'"
    DependsOn:
      - Directory
      - JoinProfile
  UserAddingDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Add user to AD domain
        parameters:
          DirectoryId:
            type: String
            description: ID of the direc
          NumUsersToCreate:
            type: String
            description: Number of users to be created
        mainSteps:
          - action: aws:runShellScript
            name: addAdUser
            inputs:
              runCommand:
                - "su - {{ ad_admin_user }} /usr/local/bin/add_a_number_of_users.sh {% raw %}{{ DirectoryId }} {{ NumUsersToCreate }}{% endraw %} "
      DocumentType: Command
      TargetType: /AWS::EC2::Instance
Outputs:
  VpcId:
    Value:
      Ref: Vpc
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - VpcId
  PrivateSubnetIds:
    Value:
      Fn::Join:
        - ","
        - - Ref: PrivateSubnetOne
          - Ref: PrivateSubnetTwo
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - PrivateSubnetIds
  DomainName:
    Value: {{ ad_domain_name }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - DomainName
  DomainShortName:
    Value: {{ ad_domain_short_name }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - DomainShortName
  AdminPassword:
    Value: {{ ad_admin_password }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - AdminPassword
  UserPassword:
    Value: {{ ad_user_password }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - UserPassword
  ReadOnlyUserName:
    Value: {{ ad_admin_user }}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - ReadOnlyUserName
  DirectoryDnsIpAddresses:
    Value:
      Fn::Join:
        - ","
        - Fn::GetAtt:
          - Directory
          - DnsIpAddresses
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - DirectoryDnsIpAddresses

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates EFS, FSX Lustre, FSX Ontap, FSX Open ZFS storage that can be attached to a cluster.
Parameters:
  FileCachePath:
    Description: Fsx FileCachePath for Data Repository Association.
    Type: String
    Default: "/fsx-cache-path/"
  PublicSubnetId:
    Type: String
    Default: ''
  ImportPathParam:
    Type: String
    Default: ''
  S3BucketFSxFileCacheStack:
    Description: The s3 Bucket Name containing the FsxFileStack
    Type: String
    Default: ""
  ExportPathParam:
    Type: String
    Default: ''
  vpc:
    Type: String
    Default: ''
  CreateEfs:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  CreateFsx:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
Conditions:
  CreateEfs: !Equals [!Ref CreateEfs, 'true']
  CreateFsx: !Equals [!Ref CreateFsx, 'true']
Resources:
  FileSystemResource0:
    Type: 'AWS::EFS::FileSystem'
    Condition: CreateEfs
{% for subnet in one_subnet_per_az %}
  MountTargetResourceEfs0Subnet{{loop.index}}:
    Condition: CreateEfs
    Properties:
      FileSystemId: !Ref FileSystemResource0
      SecurityGroups:
        - !Ref SecurityGroupResource
      SubnetId: {{subnet}}
    Type: 'AWS::EFS::MountTarget'
{% endfor %}
  SecurityGroupIngressResource0:
    Condition: CreateEfs
    Properties:
      CidrIp: 192.168.0.0/17
      FromPort: 2049
      GroupId: !Ref SecurityGroupResource
      IpProtocol: '-1'
      ToPort: 2049
    Type: 'AWS::EC2::SecurityGroupIngress'
  SecurityGroupIngressResource1:
    Condition: CreateEfs
    Properties:
      CidrIp: 192.168.128.0/17
      FromPort: 2049
      GroupId: !Ref SecurityGroupResource
      IpProtocol: '-1'
      ToPort: 2049
    Type: 'AWS::EC2::SecurityGroupIngress'
  SecurityGroupResource:
    Condition: CreateEfs
    Properties:
      GroupDescription: custom security group for EFS mount targets
      VpcId: !Ref vpc
    Type: 'AWS::EC2::SecurityGroup'
  FSxSecurityGroup:
    Condition: CreateFsx
    Properties:
      GroupDescription: SecurityGroup for testing existing FSx
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 988
          IpProtocol: tcp
          ToPort: 988
      VpcId: !Ref vpc
    Type: 'AWS::EC2::SecurityGroup'
  FileSystemResource1:
    Condition: CreateFsx
    Properties:
      FileSystemType: LUSTRE
      LustreConfiguration:
        DeploymentType: PERSISTENT_1
        ExportPath: !Ref ExportPathParam
        ImportPath: !Ref ImportPathParam
        PerUnitStorageThroughput: 200
      SecurityGroupIds:
        - !Ref FSxSecurityGroup
      StorageCapacity: 1200
      SubnetIds:
        - !Ref PublicSubnetId
    Type: 'AWS::FSx::FileSystem'
  FSxSecurityGroup1:
    Condition: CreateFsx
    Properties:
      GroupDescription: SecurityGroup for testing existing FSx
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 111
          IpProtocol: tcp
          ToPort: 111
        - CidrIp: 0.0.0.0/0
          FromPort: 111
          IpProtocol: udp
          ToPort: 111
        - CidrIp: 0.0.0.0/0
          FromPort: 635
          IpProtocol: tcp
          ToPort: 635
        - CidrIp: 0.0.0.0/0
          FromPort: 635
          IpProtocol: udp
          ToPort: 635
        - CidrIp: 0.0.0.0/0
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        - CidrIp: 0.0.0.0/0
          FromPort: 2049
          IpProtocol: udp
          ToPort: 2049
        - CidrIp: 0.0.0.0/0
          FromPort: 4046
          IpProtocol: tcp
          ToPort: 4046
        - CidrIp: 0.0.0.0/0
          FromPort: 4046
          IpProtocol: udp
          ToPort: 4046
      VpcId: !Ref vpc
    Type: 'AWS::EC2::SecurityGroup'
  FileSystemResource2:
    Condition: CreateFsx
    Properties:
      FileSystemType: ONTAP
      OntapConfiguration:
        DeploymentType: SINGLE_AZ_1
        ThroughputCapacity: 128
      SecurityGroupIds:
        - !Ref FSxSecurityGroup1
      StorageCapacity: 1024
      SubnetIds:
        - !Ref PublicSubnetId
    Type: 'AWS::FSx::FileSystem'
  SVMVolume0:
    Condition: CreateFsx
    Properties:
      Name: vol0
      OntapConfiguration:
        JunctionPath: /vol0
        SizeInMegabytes: '10240'
        StorageEfficiencyEnabled: 'true'
        StorageVirtualMachineId: !Ref StorageVirtualMachineFileSystemResource
      VolumeType: ONTAP
    Type: 'AWS::FSx::Volume'
  StorageVirtualMachineFileSystemResource:
    Condition: CreateFsx
    Properties:
      FileSystemId: !Ref FileSystemResource2
      Name: fsx
    Type: 'AWS::FSx::StorageVirtualMachine'
  FSxSecurityGroup2:
    Condition: CreateFsx
    Properties:
      GroupDescription: SecurityGroup for testing existing FSx
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 111
          IpProtocol: tcp
          ToPort: 111
        - CidrIp: 0.0.0.0/0
          FromPort: 111
          IpProtocol: udp
          ToPort: 111
        - CidrIp: 0.0.0.0/0
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        - CidrIp: 0.0.0.0/0
          FromPort: 2049
          IpProtocol: udp
          ToPort: 2049
        - CidrIp: 0.0.0.0/0
          FromPort: 20001
          IpProtocol: tcp
          ToPort: 20001
        - CidrIp: 0.0.0.0/0
          FromPort: 20001
          IpProtocol: udp
          ToPort: 20001
        - CidrIp: 0.0.0.0/0
          FromPort: 20002
          IpProtocol: tcp
          ToPort: 20002
        - CidrIp: 0.0.0.0/0
          FromPort: 20002
          IpProtocol: udp
          ToPort: 20002
        - CidrIp: 0.0.0.0/0
          FromPort: 20003
          IpProtocol: tcp
          ToPort: 20003
        - CidrIp: 0.0.0.0/0
          FromPort: 20003
          IpProtocol: udp
          ToPort: 20003
      VpcId: !Ref vpc
    Type: 'AWS::EC2::SecurityGroup'
  FileSystemResource3:
    Condition: CreateFsx
    Properties:
      FileSystemType: OPENZFS
      OpenZFSConfiguration:
        DeploymentType: SINGLE_AZ_1
        RootVolumeConfiguration:
          NfsExports:
            - ClientConfigurations:
                - Clients: '*'
                  Options:
                    - rw
                    - crossmnt
        ThroughputCapacity: 64
      SecurityGroupIds:
        - !Ref FSxSecurityGroup2
      StorageCapacity: 64
      SubnetIds:
        - !Ref PublicSubnetId
    Type: 'AWS::FSx::FileSystem'
  OpenZFSVolume0:
    Condition: CreateFsx
    Properties:
      Name: vol0
      OpenZFSConfiguration:
        NfsExports:
          - ClientConfigurations:
              - Clients: '*'
                Options:
                  - rw
                  - crossmnt
        ParentVolumeId: !GetAtt
          - FileSystemResource3
          - RootVolumeId
      VolumeType: OPENZFS
    Type: 'AWS::FSx::Volume'
  DummyResource:
    Type: AWS::CloudFormation::WaitConditionHandle

# Using the tests/integration-tests/resources/file-cache-storage-cfn.yaml which is uploaded in S3 bucket
  FsxFileCacheStack:
    Condition: CreateFsx
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${S3BucketFSxFileCacheStack}.s3.amazonaws.com/file-cache-storage-cfn.yaml"
      TimeoutInMinutes: 20
      Parameters:
        FileCachePath: !Ref FileCachePath
        VpcId: !Ref vpc
        SubnetId: !Ref PublicSubnetId
        S3BucketName: !Ref S3BucketFSxFileCacheStack

Outputs:
  EfsId:
    Value: !If [ CreateEfs, !Ref FileSystemResource0, '' ]
  FsxLustreFsId:
    Value: !If [ CreateFsx, !Ref FileSystemResource1, '']
  FsxOntapVolumeId:
    Value: !If [ CreateFsx, !Ref SVMVolume0, '']
  FsxOpenZfsVolumeId:
    Value: !If [ CreateFsx, !Ref OpenZFSVolume0, '']
  FsxFileCacheId:
    Value: !If [ CreateFsx, !GetAtt FsxFileCacheStack.Outputs.FsxFileCacheId, '']

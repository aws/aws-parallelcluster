AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ComputeInstanceType:
    Type: String
  ComputeSubnetId:
    Type: String
  ComputeCoreCount:
    Type: Number
  SNSTopic:
    Type: String
  RootDevice:
    Type: String
  RootVolumeSize:
    Type: Number
  KeyName:
    Type: String
  MainStackName:
    Type: String
  AttributesTagValue:
    Type: String
  NetworkingTagValue:
    Type: String
  FilesystemTagValue:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  IamInstanceProfile:
    Type: String
  IamRoleName:
    Type: String
  PlacementGroup:
    Type: String
  EFA:
    Type: String
  OSUser:
    Type: String
  PreInstallScript:
    Type: String
  PreInstallArgs:
    Type: String
  PostInstallScript:
    Type: String
  PostInstallArgs:
    Type: String
  RAIDOptions:
    Type: String
  EFSId:
    Type: String
  EFSOptions:
    Type: String
  FSXId:
    Type: String
  FSXOptions:
    Type: String
  Scheduler:
    Type: String
  EncryptedEphemeral:
    Type: String
  EphemeralDir:
    Type: String
  SharedDir:
    Type: String
  ProxyServer:
    Type: String
  MaxSize:
    Type: Number
  MinSize:
    Type: Number
  DesiredSize:
    Type: Number
  SQSQueue:
    Type: String
  IntelHPCPlatform:
    Type: String
  CWLoggingEnabled:
    Type: String
  ExtraJson:
    Type: String
  CustomChefCookbook:
    Type: String
  AWSDomain:
    Type: String
  ParallelClusterVersion:
    Type: String
  CookbookVersion:
    Type: String
  ChefVersion:
    Type: String
  RidleyVersion:
    Type: String
  BerkshelfVersion:
    Type: String
  ComputeSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
  AssociatePublicIpAddress:
    Type: String
  ClusterType:
    Type: String
  SpotPrice:
    Type: String
  ScaleDownIdleTime:
    Type: String
  MasterPrivateDnsName:
    Type: String
Conditions:
  EnableEFA: !Not
    - !Equals
      - !Ref 'EFA'
      - NONE
  DisableComputeHyperthreading: !Not
    - !Equals
      - !Ref 'ComputeCoreCount'
      - '-1'
  UseSpotInstances: !Equals
    - !Ref 'ClusterType'
    - spot
  UseSpotPrice: !Not
    - !Equals
      - !Ref 'SpotPrice'
      - '0'
  UseProxy: !Not
    - !Equals
      - !Ref 'ProxyServer'
      - NONE
  UsePlacementGroup: !Not
    - !Equals
      - !Ref 'PlacementGroup'
      - NONE
Resources:
  ComputeFleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: !Ref 'MaxSize'
      VPCZoneIdentifier:
        - !Ref 'ComputeSubnetId'
      LaunchTemplate:
        LaunchTemplateId: !Ref 'ComputeServerLaunchTemplate'
        Version: !GetAtt 'ComputeServerLaunchTemplate.LatestVersionNumber'
      MinSize: !Ref 'MinSize'
      DesiredCapacity: !Ref 'DesiredSize'
      NotificationConfigurations:
        - TopicARN: !Ref 'SNSTopic'
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_TERMINATE
      Tags:
        - Key: Name
          Value: Compute
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-node-type
          Value: Compute
          PropagateAtLaunch: true
        - Key: ClusterName
          Value: !Select
            - '1'
            - !Split
              - parallelcluster-
              - !Ref 'MainStackName'
          PropagateAtLaunch: true
        - Key: Application
          Value: !Ref 'MainStackName'
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-attributes
          Value: !Ref 'AttributesTagValue'
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-networking
          Value: !Ref 'NetworkingTagValue'
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-filesystem
          Value: !Ref 'FilesystemTagValue'
          PropagateAtLaunch: true
      PlacementGroup: !If
        - UsePlacementGroup
        - !Ref 'PlacementGroup'
        - !Ref 'AWS::NoValue'
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: !Ref 'DesiredSize'
  ComputeServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            InterfaceType: !If
              - EnableEFA
              - efa
              - !Ref 'AWS::NoValue'
            Groups: !Ref 'ComputeSecurityGroups'
            AssociatePublicIpAddress: !Ref 'AssociatePublicIpAddress'
        InstanceType: !Ref 'ComputeInstanceType'
        KeyName: !Ref 'KeyName'
        IamInstanceProfile:
          Name: !Ref 'IamInstanceProfile'
        InstanceMarketOptions: !If
          - UseSpotInstances
          - SpotOptions:
              SpotInstanceType: one-time
              InstanceInterruptionBehavior: terminate
              MaxPrice: !If
                - UseSpotPrice
                - !Ref 'SpotPrice'
                - !Ref 'AWS::NoValue'
            MarketType: spot
          - !Ref 'AWS::NoValue'
        ImageId: !Ref 'ImageId'
        CpuOptions:
          CoreCount: !If
            - DisableComputeHyperthreading
            - !Ref 'ComputeCoreCount'
            - !Ref 'AWS::NoValue'
          ThreadsPerCore: !If
            - DisableComputeHyperthreading
            - 1
            - !Ref 'AWS::NoValue'
        Monitoring:
          Enabled: false
        BlockDeviceMappings:
          - DeviceName: /dev/xvdba
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdbb
            VirtualName: ephemeral1
          - DeviceName: /dev/xvdbc
            VirtualName: ephemeral2
          - DeviceName: /dev/xvdbd
            VirtualName: ephemeral3
          - DeviceName: /dev/xvdbe
            VirtualName: ephemeral4
          - DeviceName: /dev/xvdbf
            VirtualName: ephemeral5
          - DeviceName: /dev/xvdbg
            VirtualName: ephemeral6
          - DeviceName: /dev/xvdbh
            VirtualName: ephemeral7
          - DeviceName: /dev/xvdbi
            VirtualName: ephemeral8
          - DeviceName: /dev/xvdbj
            VirtualName: ephemeral9
          - DeviceName: /dev/xvdbk
            VirtualName: ephemeral10
          - DeviceName: /dev/xvdbl
            VirtualName: ephemeral11
          - DeviceName: /dev/xvdbm
            VirtualName: ephemeral12
          - DeviceName: /dev/xvdbn
            VirtualName: ephemeral13
          - DeviceName: /dev/xvdbo
            VirtualName: ephemeral14
          - DeviceName: /dev/xvdbp
            VirtualName: ephemeral15
          - DeviceName: /dev/xvdbq
            VirtualName: ephemeral16
          - DeviceName: /dev/xvdbr
            VirtualName: ephemeral17
          - DeviceName: /dev/xvdbs
            VirtualName: ephemeral18
          - DeviceName: /dev/xvdbt
            VirtualName: ephemeral19
          - DeviceName: /dev/xvdbu
            VirtualName: ephemeral20
          - DeviceName: /dev/xvdbv
            VirtualName: ephemeral21
          - DeviceName: /dev/xvdbw
            VirtualName: ephemeral22
          - DeviceName: /dev/xvdbx
            VirtualName: ephemeral23
          - DeviceName: !Ref 'RootDevice'
            Ebs:
              VolumeSize: !Ref 'RootVolumeSize'
              VolumeType: gp2
        UserData: !Base64
          Fn::Sub:
            - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0

              --==BOUNDARY==
              Content-Type: text/cloud-boothook; charset="us-ascii"
              MIME-Version: 1.0

              #!/bin/bash -x

              which yum && echo "proxy=${YumProxy}" >> /etc/yum.conf || echo "Not yum system"

              which apt-get && echo "Acquire::http::Proxy \"${AptProxy}\";" >> /etc/apt/apt.conf || echo "Not apt system"

              proxy=${ProxyServer}
              if [ "${!proxy}" != "NONE" ]; then
                proxy_host=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f1)
                proxy_port=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f2)
                echo -e "[Boto]\nproxy = ${!proxy_host}\nproxy_port = ${!proxy_port}\n" >/etc/boto.cfg
                cat >> /etc/profile.d/proxy.sh <<PROXY
              export http_proxy="${!proxy}"
              export https_proxy="${!proxy}"
              export no_proxy="localhost,127.0.0.1,169.254.169.254"
              export HTTP_PROXY="${!proxy}"
              export HTTPS_PROXY="${!proxy}"
              export NO_PROXY="localhost,127.0.0.1,169.254.169.254"
              PROXY
              fi

              --==BOUNDARY==
              Content-Type: text/cloud-config; charset=us-ascii
              MIME-Version: 1.0

              write_files:
                - path: /tmp/dna.json
                  permissions: '0644'
                  owner: root:root
                  content: |
                    {
                      "cfncluster": {
                        "stack_name": "${MainStackName}",
                        "enable_efa": "${EFA}",
                        "cfn_raid_parameters": "${RAIDOptions}",
                        "cfn_preinstall": "${PreInstallScript}",
                        "cfn_preinstall_args": "${PreInstallArgs}",
                        "cfn_postinstall": "${PostInstallScript}",
                        "cfn_postinstall_args": "${PostInstallArgs}",
                        "cfn_region": "${AWS::Region}",
                        "cfn_efs": "${EFSId}",
                        "cfn_efs_shared_dir": "${EFSOptions}",
                        "cfn_fsx_fs_id": "${FSXId}",
                        "cfn_fsx_options": "${FSXOptions}",
                        "cfn_scheduler": "${Scheduler}",
                        "cfn_scheduler_slots": "${SchedulerSlots}",
                        "cfn_scaledown_idletime": "${ScaleDownIdleTime}",
                        "cfn_encrypted_ephemeral": "${EncryptedEphemeral}",
                        "cfn_ephemeral_dir": "${EphemeralDir}",
                        "cfn_shared_dir": "${SharedDir}",
                        "cfn_proxy": "${ProxyServer}",
                        "cfn_sqs_queue": "${SQSQueue}",
                        "cfn_master": "${MasterPrivateDnsName}",
                        "cfn_node_type": "ComputeFleet",
                        "cfn_cluster_user": "${OSUser}",
                        "enable_intel_hpc_platform": "${IntelHPCPlatform}",
                        "cfn_cluster_cw_logging_enabled": "${CWLoggingEnabled}"
                      },
                      "run_list": "recipe[aws-parallelcluster::${Scheduler}_config]"
                    }

                - path: /etc/chef/client.rb
                  permissions: '0644'
                  owner: root:root
                  content: cookbook_path ['/etc/chef/cookbooks']
                - path: /tmp/extra.json
                  permissions: '0644'
                  owner: root:root
                  content: |
                    ${ExtraJson}

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0

              #!/bin/bash -x

              function error_exit
              {
                region=${AWS::Region}
                instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-id)
                log_dir=/home/logs/compute
                mkdir -p ${!log_dir}
                echo "Reporting instance as unhealthy and dumping logs to ${!log_dir}/${!instance_id}.tar.gz"
                tar -czf ${!log_dir}/${!instance_id}.tar.gz /var/log
                aws --region ${!region} autoscaling set-instance-health --instance-id ${!instance_id} --health-status Unhealthy
                cfn-signal --exit-code=1 --reason="$1" --stack=${AWS::StackName} --role=${IamRoleName} --resource=ComputeFleet --region=${!region}
                exit 1
              }
              function vendor_cookbook
              {
                mkdir /tmp/cookbooks
                cd /tmp/cookbooks
                tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz
                HOME_BAK="${!HOME}"
                export HOME="/tmp"
                for d in `ls /tmp/cookbooks`; do
                  cd /tmp/cookbooks/$d
                  LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'
                done;
                export HOME="${!HOME_BAK}"
              }
              function bootstrap_instance
              {
                which yum 2>/dev/null; yum=$?
                which apt-get 2>/dev/null; apt=$?
                if [ "${!yum}" == "0" ]; then
                  yum -y groupinstall development && yum -y install curl wget jq awscli
                fi
                if [ "${!apt}" == "0" ]; then
                  apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli
                fi
                [[ ${!_region} =~ ^cn- ]] && s3_url="cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"
                which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${!s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
                mkdir -p /etc/chef && chown -R root:root /etc/chef
                curl --retry 3 -L https://${!_region}-aws-parallelcluster.s3.${!_region}.amazonaws.com$([ "${!_region}" != "${!_region#cn-*}" ] && echo ".cn")/archives/chef/chef-install.sh | bash -s -- -v ${!chef_version}
                /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${!ridley_version} berkshelf:${!berkshelf_version} ffi-libarchive
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${!cookbook_url}
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${!cookbook_url}.date
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${!cookbook_url}.md5
                vendor_cookbook
                mkdir /opt/parallelcluster
              }
              [ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh
              custom_cookbook=${CustomChefCookbook}
              export _region=${AWS::Region}
              s3_url=${AWSDomain}
              if [ "${!custom_cookbook}" != "NONE" ]; then
                if [[ "${!custom_cookbook}" =~ ^s3:// ]]; then
                  cookbook_url=$(aws s3 presign "${!custom_cookbook}" --region "${!_region}")
                else
                  cookbook_url=${!custom_cookbook}
                fi
              else
                cookbook_url=https://s3.${!_region}.${!s3_url}/${!_region}-aws-parallelcluster/cookbooks/${CookbookVersion}.tgz
              fi
              export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
              export parallelcluster_version=aws-parallelcluster-${ParallelClusterVersion}
              export cookbook_version=${CookbookVersion}
              export chef_version=${ChefVersion}
              export ridley_version=${RidleyVersion}
              export berkshelf_version=${BerkshelfVersion}
              if [ -f /opt/parallelcluster/.bootstrapped ]; then
                installed_version=$(cat /opt/parallelcluster/.bootstrapped)
                if [ "${!parallelcluster_version}" != "${!installed_version}" ]; then
                  bootstrap_instance
                fi
              else
                bootstrap_instance
              fi
              if [ "${!custom_cookbook}" != "NONE" ]; then
                curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z "$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)" ${!cookbook_url}
                vendor_cookbook
              fi
              cd /tmp

              while [ "${!masterServerStatus}" != "CREATE_COMPLETE" ] && [ "${!masterServerStatus}" != "UPDATE_COMPLETE" ]
              do
              sleep 3
              masterServerStatus=$(aws cloudformation describe-stack-resource --stack-name ${MainStackName} --logical-resource-id MasterServerWaitCondition --region ${AWS::Region} --query StackResourceDetail.ResourceStatus --output text 2>/dev/null)
              done

              # Call CloudFormation
              cfn-init -s ${AWS::StackName} --role=${IamRoleName} -v -c default -r ComputeServerLaunchTemplate --region ${AWS::Region} || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
              cfn-signal --exit-code=0 --reason="ComputeServer setup complete" --stack=${AWS::StackName} --role=${IamRoleName} --resource=ComputeFleet --region=${AWS::Region}
              # End of file
              --==BOUNDARY==
            - YumProxy: !If
                - UseProxy
                - !Ref 'ProxyServer'
                - _none_
              AptProxy: !If
                - UseProxy
                - !Ref 'ProxyServer'
                - 'false'
              SchedulerSlots: !If
                - DisableComputeHyperthreading
                - !Ref 'ComputeCoreCount'
                - ''
    Metadata:
      Comment: AWS ParallelCluster Compute server
      AWS::CloudFormation::Init:
        configSets:
          default:
            - deployConfigFiles
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - chefFinalize
        deployConfigFiles:
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json
                -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json
                || ( echo "jq not installed"; cp /tmp/dna.json /etc/chef/dna.json
                )
        chefPrepEnv:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes
                /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes
                /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -postinstall
        chefFinalize:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes
                /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize
              cwd: /etc/chef
            bootstrap:
              command: '[ ! -f /opt/parallelcluster/.bootstrapped ] && echo ${parallelcluster_version}
                | tee /opt/parallelcluster/.bootstrapped || exit 0'
Outputs:
  ASGName:
    Value: !Ref 'ComputeFleet'

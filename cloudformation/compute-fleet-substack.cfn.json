{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ComputeInstanceType": {
      "Type": "String"
    },
    "ComputeSubnetId": {
      "Type": "String"
    },
    "ComputeCoreCount": {
      "Type": "Number"
    },
    "SNSTopic": {
      "Type": "String"
    },
    "RootDevice": {
      "Type": "String"
    },
    "RootVolumeSize": {
      "Type": "Number"
    },
    "KeyName": {
      "Type": "String"
    },
    "MainStackName": {
      "Type": "String"
    },
    "AttributesTagValue": {
      "Type": "String"
    },
    "NetworkingTagValue": {
      "Type": "String"
    },
    "FilesystemTagValue": {
      "Type": "String"
    },
    "ImageId": {
      "Type": "AWS::EC2::Image::Id"
    },
    "IamInstanceProfile": {
      "Type": "String"
    },
    "IamRoleName": {
      "Type": "String"
    },
    "PlacementGroup": {
      "Type": "String"
    },
    "EFA": {
      "Type": "String"
    },
    "OSUser": {
      "Type": "String"
    },
    "PreInstallScript": {
      "Type": "String"
    },
    "PreInstallArgs": {
      "Type": "String"
    },
    "PostInstallScript": {
      "Type": "String"
    },
    "PostInstallArgs": {
      "Type": "String"
    },
    "RAIDOptions": {
      "Type": "String"
    },
    "EFSId": {
      "Type": "String"
    },
    "EFSOptions": {
      "Type": "String"
    },
    "FSXId": {
      "Type": "String"
    },
    "FSXOptions": {
      "Type": "String"
    },
    "Scheduler": {
      "Type": "String"
    },
    "EncryptedEphemeral": {
      "Type": "String"
    },
    "EphemeralDir": {
      "Type": "String"
    },
    "SharedDir": {
      "Type": "String"
    },
    "ProxyServer": {
      "Type": "String"
    },
    "MaxSize": {
      "Type": "Number"
    },
    "MinSize": {
      "Type": "Number"
    },
    "DesiredSize": {
      "Type": "Number"
    },
    "SQSQueue": {
      "Type": "String"
    },
    "IntelHPCPlatform": {
      "Type": "String"
    },
    "CWLoggingEnabled": {
      "Type": "String"
    },
    "ExtraJson": {
      "Type": "String"
    },
    "CustomChefCookbook": {
      "Type": "String"
    },
    "AWSDomain": {
      "Type": "String"
    },
    "ParallelClusterVersion": {
      "Type": "String"
    },
    "CookbookVersion": {
      "Type": "String"
    },
    "ChefVersion": {
      "Type": "String"
    },
    "RidleyVersion": {
      "Type": "String"
    },
    "BerkshelfVersion": {
      "Type": "String"
    },
    "ComputeSecurityGroups": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "AssociatePublicIpAddress": {
      "Type": "String"
    },
    "ClusterType": {
      "Type": "String"
    },
    "SpotPrice": {
      "Type": "String"
    },
    "ScaleDownIdleTime": {
      "Type": "String"
    },
    "MasterPrivateDnsName": {
      "Type": "String"
    }
  },
  "Conditions": {
    "EnableEFA": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EFA"
            },
            "NONE"
          ]
        }
      ]
    },
    "DisableComputeHyperthreading": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeCoreCount"
            },
            "-1"
          ]
        }
      ]
    },
    "UseSpotInstances": {
      "Fn::Equals": [
        {
          "Ref": "ClusterType"
        },
        "spot"
      ]
    },
    "UseProxy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ProxyServer"
            },
            "NONE"
          ]
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    }
  },
  "Resources": {
    "ComputeFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "ComputeSubnetId"
          }
        ],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "ComputeServerLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "ComputeServerLaunchTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredSize"
        },
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "SNSTopic"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_TERMINATE"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute",
            "PropagateAtLaunch": true
          },
          {
            "Key": "ClusterName",
            "Value": {
              "Fn::Select": [
                "1",
                {
                  "Fn::Split": [
                    "parallelcluster-",
                    {
                      "Ref": "MainStackName"
                    }
                  ]
                }
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "MainStackName"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-attributes",
            "Value": {
              "Ref": "AttributesTagValue"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-networking",
            "Value": {
              "Ref": "NetworkingTagValue"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-filesystem",
            "Value": {
              "Ref": "FilesystemTagValue"
            },
            "PropagateAtLaunch": true
          }
        ],
        "PlacementGroup": {
          "Fn::If": [
            "UsePlacementGroup",
            {
              "Ref": "PlacementGroup"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M",
          "Count": {
            "Ref": "DesiredSize"
          }
        }
      }
    },
    "ComputeServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "DeviceIndex": 0,
              "InterfaceType": {
                "Fn::If": [
                  "EnableEFA",
                  "efa",
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "Groups": {
                "Ref": "ComputeSecurityGroups"
              },
              "AssociatePublicIpAddress": {
                "Ref": "AssociatePublicIpAddress"
              }
            }
          ],
          "InstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "IamInstanceProfile"
            }
          },
          "InstanceMarketOptions": {
            "Fn::If": [
              "UseSpotInstances",
              {
                "SpotOptions": {
                  "SpotInstanceType": "one-time",
                  "InstanceInterruptionBehavior": "terminate",
                  "MaxPrice": {
                    "Ref": "SpotPrice"
                  }
                },
                "MarketType": "spot"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ImageId": {
            "Ref": "ImageId"
          },
          "CpuOptions": {
            "CoreCount": {
              "Fn::If": [
                "DisableComputeHyperthreading",
                {
                  "Ref": "ComputeCoreCount"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ThreadsPerCore": {
              "Fn::If": [
                "DisableComputeHyperthreading",
                1,
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Monitoring": {
            "Enabled": false
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdba",
              "VirtualName": "ephemeral0"
            },
            {
              "DeviceName": "/dev/xvdbb",
              "VirtualName": "ephemeral1"
            },
            {
              "DeviceName": "/dev/xvdbc",
              "VirtualName": "ephemeral2"
            },
            {
              "DeviceName": "/dev/xvdbd",
              "VirtualName": "ephemeral3"
            },
            {
              "DeviceName": "/dev/xvdbe",
              "VirtualName": "ephemeral4"
            },
            {
              "DeviceName": "/dev/xvdbf",
              "VirtualName": "ephemeral5"
            },
            {
              "DeviceName": "/dev/xvdbg",
              "VirtualName": "ephemeral6"
            },
            {
              "DeviceName": "/dev/xvdbh",
              "VirtualName": "ephemeral7"
            },
            {
              "DeviceName": "/dev/xvdbi",
              "VirtualName": "ephemeral8"
            },
            {
              "DeviceName": "/dev/xvdbj",
              "VirtualName": "ephemeral9"
            },
            {
              "DeviceName": "/dev/xvdbk",
              "VirtualName": "ephemeral10"
            },
            {
              "DeviceName": "/dev/xvdbl",
              "VirtualName": "ephemeral11"
            },
            {
              "DeviceName": "/dev/xvdbm",
              "VirtualName": "ephemeral12"
            },
            {
              "DeviceName": "/dev/xvdbn",
              "VirtualName": "ephemeral13"
            },
            {
              "DeviceName": "/dev/xvdbo",
              "VirtualName": "ephemeral14"
            },
            {
              "DeviceName": "/dev/xvdbp",
              "VirtualName": "ephemeral15"
            },
            {
              "DeviceName": "/dev/xvdbq",
              "VirtualName": "ephemeral16"
            },
            {
              "DeviceName": "/dev/xvdbr",
              "VirtualName": "ephemeral17"
            },
            {
              "DeviceName": "/dev/xvdbs",
              "VirtualName": "ephemeral18"
            },
            {
              "DeviceName": "/dev/xvdbt",
              "VirtualName": "ephemeral19"
            },
            {
              "DeviceName": "/dev/xvdbu",
              "VirtualName": "ephemeral20"
            },
            {
              "DeviceName": "/dev/xvdbv",
              "VirtualName": "ephemeral21"
            },
            {
              "DeviceName": "/dev/xvdbw",
              "VirtualName": "ephemeral22"
            },
            {
              "DeviceName": "/dev/xvdbx",
              "VirtualName": "ephemeral23"
            },
            {
              "DeviceName": {
                "Ref": "RootDevice"
              },
              "Ebs": {
                "VolumeSize": {
                  "Ref": "RootVolumeSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                  "MIME-Version: 1.0\n\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/cloud-boothook; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "which yum && echo \"proxy=",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "_none_"
                    ]
                  },
                  "\" >> /etc/yum.conf || echo \"Not yum system\"\n\n",
                  "which apt-get && echo \"Acquire::http::Proxy \\\"",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "false"
                    ]
                  },
                  "\\\";\" >> /etc/apt/apt.conf || echo \"Not apt system\"\n\n",
                  "proxy=",
                  {
                    "Ref": "ProxyServer"
                  },
                  "\n",
                  "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                  "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                  "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                  "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                  "  cat >> /etc/profile.d/proxy.sh <<PROXY\n",
                  "export http_proxy=\"${proxy}\"\n",
                  "export https_proxy=\"${proxy}\"\n",
                  "export no_proxy=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "export HTTP_PROXY=\"${proxy}\"\n",
                  "export HTTPS_PROXY=\"${proxy}\"\n",
                  "export NO_PROXY=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "PROXY\n",
                  "fi\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "function error_exit\n",
                  "{\n",
                  "  region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "  log_dir=/home/logs/compute\n",
                  "  mkdir -p ${log_dir}\n",
                  "  echo \"Reporting instance as unhealthy and dumping logs to ${log_dir}/${instance_id}.tar.gz\"\n",
                  "  tar -czf ${log_dir}/${instance_id}.tar.gz /var/log\n",
                  "  aws --region ${region} autoscaling set-instance-health --instance-id ${instance_id} --health-status Unhealthy\n",
                  "  cfn-signal --exit-code=1 --reason=\"$1\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --role=",
                  {
                    "Ref": "IamRoleName"
                  },
                  " --resource=ComputeFleet --region=${region}\n",
                  "  exit 1\n",
                  "}\n",
                  "function vendor_cookbook\n",
                  "{\n",
                  "  mkdir /tmp/cookbooks\n",
                  "  cd /tmp/cookbooks\n",
                  "  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                  "  HOME_BAK=\"${HOME}\"\n",
                  "  export HOME=\"/tmp\"\n",
                  "  for d in `ls /tmp/cookbooks`; do\n",
                  "    cd /tmp/cookbooks/$d\n",
                  "    LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'\n",
                  "  done;\n",
                  "  export HOME=\"${HOME_BAK}\"\n",
                  "}\n",
                  "function bootstrap_instance\n",
                  "{\n",
                  "  which yum 2>/dev/null; yum=$?\n",
                  "  which apt-get 2>/dev/null; apt=$?\n",
                  "  if [ \"${yum}\" == \"0\" ]; then\n",
                  "    yum -y groupinstall development && yum -y install curl wget jq awscli\n",
                  "  fi\n",
                  "  if [ \"${apt}\" == \"0\" ]; then\n",
                  "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli\n",
                  "  fi\n",
                  "  [[ ${_region} =~ ^cn- ]] && s3_url=\"cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster\"\n",
                  "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                  "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                  "  curl --retry 3 -L https://${_region}-aws-parallelcluster.s3.${_region}.amazonaws.com$([ \"${_region}\" != \"${_region#cn-*}\" ] && echo \".cn\")/archives/chef/chef-install.sh | bash -s -- -v ${chef_version}\n",
                  "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version} ffi-libarchive\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                  "  vendor_cookbook\n",
                  "  mkdir /opt/parallelcluster\n",
                  "}\n",
                  "[ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh\n",
                  "custom_cookbook=",
                  {
                    "Ref": "CustomChefCookbook"
                  },
                  "\n",
                  "export _region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "s3_url=",
                  {
                    "Ref": "AWSDomain"
                  },
                  "\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  if [[ \"${custom_cookbook}\" =~ ^s3:// ]]; then\n",
                  "    cookbook_url=$(aws s3 presign \"${custom_cookbook}\" --region \"${_region}\")\n ",
                  "  else\n",
                  "    cookbook_url=${custom_cookbook}\n",
                  "  fi\n",
                  "else\n",
                  "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                  {
                    "Ref": "CookbookVersion"
                  },
                  ".tgz\n",
                  "fi\n",
                  "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                  "export parallelcluster_version=aws-parallelcluster-",
                  {
                    "Ref": "ParallelClusterVersion"
                  },
                  "\n",
                  "export cookbook_version=",
                  {
                    "Ref": "CookbookVersion"
                  },
                  "\n",
                  "export chef_version=",
                  {
                    "Ref": "ChefVersion"
                  },
                  "\n",
                  "export ridley_version=",
                  {
                    "Ref": "RidleyVersion"
                  },
                  "\n",
                  "export berkshelf_version=",
                  {
                    "Ref": "BerkshelfVersion"
                  },
                  "\n",
                  "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                  "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                  "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                  "    bootstrap_instance\n",
                  "  fi\n",
                  "else\n",
                  "  bootstrap_instance\n",
                  "fi\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                  "  vendor_cookbook\n",
                  "fi\n",
                  "cd /tmp\n",
                  "\n",
                  "while [ \"${masterServerStatus}\" != \"CREATE_COMPLETE\" ] && [ \"${masterServerStatus}\" != \"UPDATE_COMPLETE\" ]\n",
                  "do\n",
                  "sleep 3\n",
                  "masterServerStatus=$(aws cloudformation describe-stack-resource --stack-name ",
                  {
                    "Ref": "MainStackName"
                  },
                  " --logical-resource-id MasterServerWaitCondition --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " --query StackResourceDetail.ResourceStatus --output text 2>/dev/null)\n",
                  "done\n",
                  "\n",
                  "# Call CloudFormation\n",
                  "cfn-init -s ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --role=",
                  {
                    "Ref": "IamRoleName"
                  },
                  " -v -c default -r ComputeServerLaunchTemplate --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                  "cfn-signal --exit-code=0 --reason=\"ComputeServer setup complete\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --role=",
                  {
                    "Ref": "IamRoleName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# End of file\n",
                  "--==BOUNDARY==\n"
                ]
              ]
            }
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "chefFinalize"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "MainStackName"
                    },
                    "enable_efa": {
                      "Ref": "EFA"
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Ref": "EFSId"
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_fsx_fs_id": {
                      "Ref": "FSXId"
                    },
                    "cfn_fsx_options": {
                      "Ref": "FSXOptions"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scheduler_slots": {
                      "Fn::If": [
                        "DisableComputeHyperthreading",
                        {
                          "Ref": "ComputeCoreCount"
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQSQueue"
                    },
                    "cfn_master": {
                      "Ref": "MasterPrivateDnsName"
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Ref": "OSUser"
                    },
                    "enable_intel_hpc_platform": {
                      "Ref": "IntelHPCPlatform"
                    },
                    "cfn_cluster_cw_logging_enabled": {
                      "Ref": "CWLoggingEnabled"
                    }
                  },
                  "run_list": {
                    "Fn::Sub": "recipe[aws-parallelcluster::${Scheduler}_config]"
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "chefFinalize": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize",
                "cwd": "/etc/chef"
              },
              "bootstrap": {
                "command": "[ ! -f /opt/parallelcluster/.bootstrapped ] && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped || exit 0"
              }
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "ASGName": {
      "Value": {
        "Ref": "ComputeFleet"
      }
    }
  }
}

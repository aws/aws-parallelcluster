AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template is provided as part of a tutorial on how to enable Slurm Accounting using Parallel Cluster.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database Cluster Configuration"
        Parameters:
          - ClusterAdmin
          - AdminPasswordSecretString
          - MinCapacity
          - MaxCapacity
      - Label:
          default: "Network Configuration"
        Parameters:
          - Vpc
          - DatabaseClusterSubnetOne
          - DatabaseClusterSubnetTwo
          - VpcCidrBlock
          - Subnet1CidrBlock
          - Subnet2CidrBlock
    ParameterLabels:
      Vpc:
        default: "The VPC to use for the database cluster."
      ClusterAdmin:
        default: "The database administrator user name."
      AdminPasswordSecretString:
        default: "The administrator password."
      MinCapacity:
        default: "The minimum scaling capacity of the database cluster."
      MaxCapacity:
        default: "The maximum scaling capacity of the database cluster."
      DatabaseClusterSubnetOne:
        default: "The first subnet to use for the database cluster."
      DatabaseClusterSubnetTwo:
        default: "The second subnet to use for the database cluster."
      VpcCidrBlock:
        default: "The CIDR block to be used for the VPC if its creation is requested."
      Subnet1CidrBlock:
        default: "The CIDR block to be used for the first Subnet if its creation is requested."
      Subnet2CidrBlock:
        default: "The CIDR block to be used for the second Subnet if its creation is requested."
Parameters:
  AdminPasswordSecretString:
    Description: >-
      Password must be at least 8 characters long and contain at least 1 upper case, 1 lower case, 1 digit, and 1
      non-alphanumeric character. It must not contain any of the following: # (hash), / (slash), ' (single quote), " (double quote)
      or @ (at sign).
    Type: String
    NoEcho: true
    MinLength: 8
    # Only allow 'Medium' or better strength passwords according to https://dev.mysql.com/doc/refman/8.0/en/validate-password.html
    AllowedPattern: (?=^.{8,}$)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\w\s])(?!.*[@/'"#])^.*
    ConstraintDescription: >-
      Password must be at least 8 characters with at least one uppercase letter, one lower case letter, one numeric
      digit, and one special (non-alphanumeric) character. It can not contain any of the following: # (hash), / (slash), ' (single quote), " (double quote) and @ (at sign).
  ClusterAdmin:
    Description: Administrator user name.
    Type: String
    Default: clusteradmin
    MinLength: 3
    MaxLength: 64
  Vpc:
    Description: VPC ID (leave BLANK to create a new VPC).
    Type: String
    # Type: AWS::EC2::VPC::Id
    Default: ''
  DatabaseClusterSubnetOne:
    Description: First Subnet ID (leave BLANK to create a new subnet).
    Type: String
    # Type: AWS::EC2::Subnet::Id
    Default: ''
  DatabaseClusterSubnetTwo:
    Description: Second subnet ID (leave BLANK to create a new subnet). This subnet must be in different availability zone from the first subnet.
    Type: String
    # Type: AWS::EC2::Subnet::Id
    Default: ''
  VpcCidrBlock:
    Description: CIDR block for the VPC (used only if creation is requested - IN THIS CASE THE DEFAULT VALUE MUST BE CHANGED).
    Type: String
    Default: '0.0.0.0/16'
    AllowedPattern: >-
      ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8])))$
    ConstraintDescription: >-
      The CIDR block must be formatted as W.X.Y.Z/prefix , where prefix must be between 16 and 28.
  Subnet1CidrBlock:
    Description: CIDR block for first Subnet (used only if creation is requested - IN THIS CASE THE DEFAULT VALUE MUST BE CHANGED).
    Type: String
    Default: '0.0.0.0/24'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      The CIDR block must be formatted as W.X.Y.Z/prefix , where prefix must be between 16 and 28.
  Subnet2CidrBlock:
    Description: CIDR block for the second Subnet (used only if creation is requested - IN THIS CASE THE DEFAULT VALUE MUST BE CHANGED).
    Type: String
    Default: '0.0.0.0/24'
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: >-
      The CIDR block must be formatted as W.X.Y.Z/prefix , where prefix must be between 16 and 28.
  MinCapacity:
    Description: Must be less than or equal to the maximum capacity.
    Type: Number
    Default: 1
    AllowedValues:
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
  MaxCapacity:
    Description: Must be greater than or equal to the minimum capacity.
    Type: Number
    Default: 4
    AllowedValues:
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
Transform: AWS::Serverless-2016-10-31
Conditions:
  CreateVPC: !Equals [!Ref Vpc, '']
  CreateSubnets: !Or [!Condition CreateVPC, !Equals [!Ref DatabaseClusterSubnetOne, ''], !Equals [!Ref DatabaseClusterSubnetTwo, '']]
Rules:
  EmptyVpcAssertions:
    RuleCondition: !Equals
      - !Ref Vpc
      - ''
    Assertions:
      - Assert: !Equals
          - !Ref DatabaseClusterSubnetOne
          - ''
        AssertDescription: DatabaseClusterSubnetOne must be empty if VPC is not provided.
      - Assert: !Equals
          - !Ref DatabaseClusterSubnetTwo
          - ''
        AssertDescription: DatabaseClusterSubnetTwo must be empty if VPC is not provided.
  BadVpcCidrAssertion:
    RuleCondition: !Equals
      - !Ref Vpc
      - ''
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref VpcCidrBlock
            - '0.0.0.0/16'
        AssertDescription: The default CIDR block for the VPC must be changed if the VPC creation is requested.
  BadSubnetsCidrsAssertion:
    RuleCondition: !Or
      - !Equals
        - !Ref Vpc
        - ''
      - !Equals
        - !Ref DatabaseClusterSubnetOne
        - ''
      - !Equals
        - !Ref DatabaseClusterSubnetTwo
        - ''
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref Subnet1CidrBlock
            - '0.0.0.0/24'
        AssertDescription: The default CIDR block for the first subnet must be changed if the subnet creation is requested.
      - Assert: !Not
          - !Equals
            - !Ref Subnet2CidrBlock
            - '0.0.0.0/24'
        AssertDescription: The default CIDR block for the second subnet must be changed if the subnet creation is requested.
Resources:
  #
  # Optional Networking
  #
  ServerlessDatabaseClusterVpc:
    Type: 'AWS::EC2::VPC'
    Condition: CreateVPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ServerlessDatabaseClusterVPC
        - Key: 'parallelcluster:usecase'
          Value: 'infrastructure'
  ServerlessDatabaseClusterSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: !Ref Subnet1CidrBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ServerlessDatabaseClusterSubnet1
        - Key: 'parallelcluster:infrastructure'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSubnet1RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
      Tags:
        - Key: Name
          Value: ServerlessDatabaseClusterSubnet1
        - Key: 'parallelcluster:infrastructure'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnets
    Properties:
      RouteTableId: !Ref ServerlessDatabaseClusterSubnet1RouteTable
      SubnetId: !Ref ServerlessDatabaseClusterSubnet1
  ServerlessDatabaseClusterSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock:  !Ref Subnet2CidrBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ServerlessDatabaseClusterSubnet2
        - Key: 'parallelcluster:infrastructure'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSubnet2RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: CreateSubnets
    Properties:
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
      Tags:
        - Key: Name
          Value: ServerlessDatabaseClusterSubnet2
        - Key: 'parallelcluster:infrastructure'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: CreateSubnets
    Properties:
      RouteTableId: !Ref ServerlessDatabaseClusterSubnet2RouteTable
      SubnetId: !Ref ServerlessDatabaseClusterSubnet2

  #
  # Database Cluster
  #
  ServerlessDatabaseClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: Cluster parameter group for aurora-mysql5.7
      Family: aurora-mysql5.7
      Parameters:
        require_secure_transport: 'ON'
        innodb_lock_wait_timeout: '900'
      Tags:
        - Key: 'parallelcluster:usecase'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub 'Subnets for ServerlessDatabaseCluster-${AWS::Region} database'
      SubnetIds:
        - !If [CreateSubnets, !Ref ServerlessDatabaseClusterSubnet1, !Ref DatabaseClusterSubnetOne]
        - !If [CreateSubnets, !Ref ServerlessDatabaseClusterSubnet2, !Ref DatabaseClusterSubnetTwo]
      Tags:
        - Key: 'parallelcluster:usecase'
          Value: 'slurm accounting'
  ServerlessDatabaseClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      Tags:
        - Key: 'parallelcluster:usecase'
          Value: 'slurm accounting'
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
  ServerlessDatabaseClusterSecurityGroupInboundRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Allow incoming connections from client security group
      FromPort: !GetAtt
        - ServerlessDatabaseCluster
        - Endpoint.Port
      GroupId: !GetAtt
        - ServerlessDatabaseClusterSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - ServerlessClusterDatabaseClientSecurityGroup
        - GroupId
      ToPort: !GetAtt
        - ServerlessDatabaseCluster
        - Endpoint.Port
  ServerlessDatabaseClusterAdminSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: 'Serverless Database Cluster Administrator Password'
      SecretString: !Ref AdminPasswordSecretString
      Tags:
        - Key: 'parallelcluster:usecase'
          Value: 'slurm accounting'
  ServerlessDatabaseCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora-mysql
      CopyTagsToSnapshot: true
      DBClusterParameterGroupName: !Ref ServerlessDatabaseClusterParameterGroup
      DBSubnetGroupName: !Ref ServerlessDatabaseClusterSubnetGroup
      EnableHttpEndpoint: false
      EngineMode: serverless
      MasterUsername: !Ref ClusterAdmin
      MasterUserPassword: !Ref AdminPasswordSecretString
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: !Ref MaxCapacity
        MinCapacity: !Ref MinCapacity
        SecondsUntilAutoPause: 600
      StorageEncrypted: true
      Tags:
        - Key: 'parallelcluster:usecase'
          Value: 'slurm accounting'
      VpcSecurityGroupIds:
        - !GetAtt
          - ServerlessDatabaseClusterSecurityGroup
          - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ServerlessClusterDatabaseClientSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group to allow connection to Serverless DB Cluster
      Tags:
        - Key: 'parallel-cluster:usecase'
          Value: 'slurm accounting'
      VpcId: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
  ServerlessClusterDatabaseClientSecurityGroupOutboundRule:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt
        - ServerlessClusterDatabaseClientSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Allow incoming connections from PCluster
      DestinationSecurityGroupId: !GetAtt
        - ServerlessDatabaseClusterSecurityGroup
        - GroupId
      FromPort: !GetAtt
        - ServerlessDatabaseCluster
        - Endpoint.Port
      ToPort: !GetAtt
        - ServerlessDatabaseCluster
        - Endpoint.Port
Outputs:
  DatabaseHost:
    Value: !GetAtt
      - ServerlessDatabaseCluster
      - Endpoint.Address
  DatabasePort:
    Value: !GetAtt
      - ServerlessDatabaseCluster
      - Endpoint.Port
  DatabaseAdminUser:
    Value: !Ref ClusterAdmin
  DatabaseSecretArn:
    Value: !Ref ServerlessDatabaseClusterAdminSecret
  DatabaseVpcId:
    Value: !If [CreateVPC, !Ref ServerlessDatabaseClusterVpc, !Ref Vpc]
  DatabaseClusterSecurityGroup:
    Value: !GetAtt
      - ServerlessDatabaseClusterSecurityGroup
      - GroupId
  DatabaseClusterSubnet1:
    Value: !If [CreateSubnets, !Ref ServerlessDatabaseClusterSubnet1, !Ref DatabaseClusterSubnetOne]
  DatabaseClusterSubnet2:
    Value: !If [CreateSubnets, !Ref ServerlessDatabaseClusterSubnet2, !Ref DatabaseClusterSubnetTwo]
  DatabaseClientSecurityGroup:
    Value: !GetAtt
      - ServerlessClusterDatabaseClientSecurityGroup
      - GroupId

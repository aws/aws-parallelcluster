name: PCluster
description: Bake PCluster AMI
schemaVersion: 1.0

phases:
  - name: build
    steps:
      # Exit code for failures
      - name: Fail
        action: ExecuteBash
        inputs:
          commands:
            - echo 1

      # Get AWS Region
      - name: AWSRegion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              echo ${AWS::Region}

      # Get Chef Version
      - name: ChefVersion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              echo "15.11.8"

      # Get Berkshelf Version
      - name: BerkshelfVersion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              echo "7.0.10"

      # Get Cookbook name
      - name: PClusterCookbookVersionName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              echo "aws-parallelcluster-cookbook-${CfnParamCookbookVersion}"

      # Get AWS domain
      - name: AWSDomain
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              DOMAIN=".amazonaws.com"
              [[ ${AWS::Region} =~ ^cn- ]] && DOMAIN=".amazonaws.com.cn"
              echo ${!DOMAIN}

      # Get Cookbook Url
      - name: CookbookUrl
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              COOKBOOK_URL=https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}{{ build.AWSDomain.outputs.stdout }}/cookbooks/{{ build.PClusterCookbookVersionName.outputs.stdout }}.tgz
              [ -n "${CfnParamChefCookbook}" ] && COOKBOOK_URL=${CfnParamChefCookbook}
              echo "${!COOKBOOK_URL}"

      # Get Cinc Url
      - name: CincUrl
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              CINC_URL=https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}{{ build.AWSDomain.outputs.stdout }}/archives/cinc/cinc-install.sh
              [ -n "${CfnParamCincInstaller}" ] && CINC_URL=${CfnParamCincInstaller}
              echo "${!CINC_URL}"

      # Check input base AMI OS and get OS information, the output should be like centos.7 | centos.8 | amzn.2 | ubuntu.18.04
      - name: OperatingSystemRelease
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              FILE=/etc/os-release
              if [ -e ${!FILE} ]; then
                . ${!FILE}
                echo "${!ID}${!VERSION_ID:+.${!VERSION_ID}}"
              else
                echo "The file '${!FILE}' does not exist. Failing build."
                exit {{ build.Fail.outputs.stdout }}
              fi

      # Get uniformed OS name
      - name: OperatingSystemName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'

              if [ `echo "${!RELEASE}" | grep -w '^amzn\.2'` ]; then
                OS='alinux2'
              elif [ `echo "${!RELEASE}" | grep '^centos\.7'` ]; then
                OS='centos7'
              elif [ `echo "${!RELEASE}" | grep '^centos\.8'` ]; then
                OS='centos8'
              elif [ `echo "${!RELEASE}" | grep '^ubuntu\.18'` ]; then
                OS='ubuntu1804'
              else
                echo "Operating System '${!RELEASE}' is not supported. Failing build."
                exit {{ build.Fail.outputs.stdout }}
              fi

              echo ${!OS}

      # Get platform name
      - name: PlatformName
        action: ExecuteBash
        inputs:
          commands:
            - |
               set -v
               OS='{{ build.OperatingSystemName.outputs.stdout }}'

               if [ `echo "${!OS}" | grep -E '^(alinux|centos)'` ]; then
                 PLATFORM='RHEL'
               elif [ `echo "${!OS}" | grep -E '^ubuntu'` ]; then
                 PLATFORM='DEBIAN'
               fi

               echo ${!PLATFORM}

      # Get Cfn Bootstrap Url
      - name: CfnBootstrapUrl
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              BUCKET="s3.amazonaws.com"
              [[ ${AWS::Region} =~ ^cn- ]] && BUCKET="s3.cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"

              OS='{{ build.OperatingSystemName.outputs.stdout }}'

              if [[ ${!OS} =~ ^(centos8)$ ]]; then
                echo "https://${!BUCKET}/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz"
              else
                echo "https://${!BUCKET}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
              fi

      # Get input base AMI Architecture
      - name: OperatingSystemArchitecture
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              ARCH=$(uname -m)
              case ${!ARCH} in
                'x86_64')
                  echo 'x86_64'
                  ;;
                'aarch64')
                  echo 'arm64'
                  ;;
                *)
                  echo "The '${!ARCH}' architecture is not supported. Failing build."
                  exit {{ build.Fail.outputs.stdout }}
                  ;;
              esac

      # Install prerequisite OS packages
      - name: InstallPrerequisite
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'

              if [[ ${!OS} =~ ^centos[7-8]$ ]]; then
                  if [[ ${!OS} == centos7 ]]; then
                    yum -y install epel-release
                  else
                    dnf -y install epel-release
                  fi
                  /bin/sed -r -i -e 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
                  /bin/sed -r -i -e 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 rd.driver.blacklist=nouveau nouveau.modeset=0"/' /etc/default/grub
                  grub2-mkconfig -o /boot/grub2/grub.cfg
              elif [[ ${!OS} =~ ^ubuntu1804$ ]]; then
                  apt-cache search build-essential
                  apt-get clean
                  apt-get update
              fi

              if [[ ${!PLATFORM} == RHEL ]]; then
                if [[ ${!OS} == centos8 ]]; then
                  dnf -y groupinstall development && sudo dnf -y install curl wget jq
                else
                  yum -y groupinstall development && sudo yum -y install curl wget jq
                fi
              elif [[ ${!PLATFORM} == DEBIAN ]]; then
                apt-get -y install build-essential curl wget jq
              fi

      # Install Cinc
      - name: InstallCinc
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              curl --retry 3 -L {{ build.CincUrl.outputs.stdout }} | bash -s -- -v {{ build.ChefVersion.outputs.stdout }}
              /opt/cinc/embedded/bin/gem install --no-document berkshelf:{{ build.BerkshelfVersion.outputs.stdout }}

      # Download and vendor Cookbook
      - name: DownloadCookbook
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              mkdir -p /etc/chef && sudo chown -R root:root /etc/chef
              curl --retry 3 -L -o /etc/chef/aws-parallelcluster-cookbook.tgz {{ build.CookbookUrl.outputs.stdout }}
              curl --retry 3 -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date {{ build.CookbookUrl.outputs.stdout }}.date
              curl --retry 3 -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 {{ build.CookbookUrl.outputs.stdout }}.md5

              mkdir /tmp/cookbooks
              cd /tmp/cookbooks
              tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz

              export HOME="/tmp"
              for dir in $(ls /tmp/cookbooks); do
                cd /tmp/cookbooks/${!dir}
                LANG=en_US.UTF-8 sudo /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete || (echo 'Vendoring cookbook failed.' && exit {{ build.Fail.outputs.stdout }})
              done;

      - name: CreatingChefClientFile
        action: CreateFile
        inputs:
          - path: /etc/chef/client.rb
            content: |
              cookbook_path ['/etc/chef/cookbooks']
            overwrite: true

      - name: CreatingJsonFile
        action: CreateFile
        inputs:
          - path: /tmp/dna.json
            content: |
              ${CfnParamChefDnaJson}
            overwrite: true

      - name: InstallPClusterPackages
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              echo "Calling chef-client with /tmp/dna.json"
              cat /tmp/dna.json
              chef-client --local-mode --config /etc/chef/client.rb --log_level info --logfile /var/log/chef-client.log --force-formatter --no-color --chef-zero-port 8889 --json-attributes /tmp/dna.json --override-runlist aws-parallelcluster::default

      - name: InstallCfnBootstrap
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              OS='{{ build.OperatingSystemName.outputs.stdout }}'

              if [[ ${!OS} =~ ^(centos[7-8]|ubuntu1804)$ ]]; then
                curl --retry 3 -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz {{ build.CfnBootstrapUrl.outputs.stdout }}
                if [[ ${!OS} == centos8 ]]; then
                  dnf install -y python3-pip
                  pip3 install /tmp/aws-cfn-bootstrap-latest.tar.gz
                elif [[ ${!OS} == centos7 ]]; then
                  which pip2
                  if [ $? -eq 0 ]; then
                    pip2 install /tmp/aws-cfn-bootstrap-latest.tar.gz
                  else
                    pip install /tmp/aws-cfn-bootstrap-latest.tar.gz
                  fi
                elif [[ ${!OS} =~ ^ubuntu1804$ ]]; then
                  pip install /tmp/aws-cfn-bootstrap-latest.tar.gz
                fi
              fi

      - name: CreateBootstrapFile
        action: CreateFile
        inputs:
          - path: /opt/parallelcluster/.bootstrapped
            content: |
              {{ build.PClusterCookbookVersionName.outputs.stdout }}
            overwrite: true

      - name: KeepSSM
        action: DeleteFile
        inputs:
          - path: /tmp/imagebuilder_service/ssm_installed

      - name: AmiCleanup
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -v
              /usr/local/sbin/ami_cleanup.sh

  - name: validate
    steps:
      - name: PClusterValidate
        action: ExecuteBash
        inputs:
          commands:
            - |
              echo "Check ParallelCluster software stack has been installed"
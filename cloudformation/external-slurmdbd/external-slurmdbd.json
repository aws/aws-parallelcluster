{
 "Parameters": {
  "VPCId": {
   "Type": "String",
   "Description": "The VPC to be used for the Slurmdbd stack."
  },
  "SubnetId": {
   "Type": "AWS::EC2::Subnet::Id",
   "Description": "The Subnet to be used for the Slurmdbd stack."
  },
  "DBMSUri": {
   "Type": "String",
   "Description": "DBMS URI for Slurmdbd."
  },
  "DBMSUsername": {
   "Type": "String",
   "Description": "DBMS Username for Slurmdbd."
  },
  "DBMSPasswordSecretArn": {
   "Type": "String",
   "Description": "Secret ARN for DBMS password."
  },
  "DBMSDatabaseName": {
   "Type": "String",
   "Description": "DBMS Database Name for Slurmdbd."
  },
  "MungeKeySecretArn": {
   "Type": "String",
   "Description": "Secret ARN for Munge key."
  },
  "CustomCookbookUrl": {
   "Type": "String",
   "Default": "",
   "Description": "URL of the custom Chef Cookbook."
  },
  "SlurmdbdPort": {
   "Type": "Number",
   "Default": 6819,
   "Description": "The port the slurmdbd service listens to."
  },
  "AmiId": {
   "Type": "AWS::EC2::Image::Id",
   "Description": "The AMI id for the EC2 instance."
  },
  "InstanceType": {
   "Type": "String",
   "Description": "The instance type for the EC2 instance"
  },
  "KeyName": {
   "Type": "AWS::EC2::KeyPair::KeyName",
   "Description": "The SSH key name to access the instance (for management purposes only)"
  },
  "PrivateIp": {
   "Type": "String",
   "Description": "Static private IP address + prefix to assign to the slurmdbd instance"
  },
  "PrivatePrefix": {
   "Type": "String",
   "Description": "Subnet prefix to assign with the private IP to the slurmdbd instance"
  },
  "DBMSClientSG": {
   "Type": "AWS::EC2::SecurityGroup::Id",
   "Description": "DBMS Client Security Group Id"
  }
 },
 "Resources": {
  "SSHServerSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow SSH access to slurmdbd instance (server)",
    "VpcId": {
     "Ref": "VPCId"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SSHServerSecurityGroup"
   }
  },
  "SSHClientSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow SSH access to slurmdbd instance (client)",
    "VpcId": {
     "Ref": "VPCId"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SSHClientSecurityGroup"
   }
  },
  "AllowSSHaccessfromclientSG": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "FromPort": 22,
    "GroupId": {
     "Ref": "SSHServerSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "SSHClientSecurityGroup"
    },
    "ToPort": 22
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/Allow SSH access from client SG"
   }
  },
  "SlurmdbdServerSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow Slurm accounting traffic to the slurmdbd instance (server)",
    "VpcId": {
     "Ref": "VPCId"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SlurmdbdServerSecurityGroup"
   }
  },
  "SlurmdbdClientSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow Slurm accounting traffic from the cluster head node (client)",
    "VpcId": {
     "Ref": "VPCId"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SlurmdbdClientSecurityGroup"
   }
  },
  "AllowSlurmaccountingtrafficfromtheclusterheadnode": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "FromPort": {
     "Ref": "SlurmdbdPort"
    },
    "GroupId": {
     "Ref": "SlurmdbdServerSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "SlurmdbdClientSecurityGroup"
    },
    "ToPort": {
     "Ref": "SlurmdbdPort"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/Allow Slurm accounting traffic from the cluster head node"
   }
  },
  "Allowtrafficcomingfromslurmdbdinstance": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "FromPort": 6820,
    "GroupId": {
     "Ref": "SlurmdbdClientSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "SlurmdbdServerSecurityGroup"
    },
    "ToPort": 6829
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/Allow traffic coming from slurmdbd instance"
   }
  },
  "SlurmdbdLogGroup7510BC34": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "-",
      [
       "/aws/parallelcluster/external-slurmdbd/ExternalSlurmdbdStack",
       {
        "Fn::Select": [
         4,
         {
          "Fn::Split": [
           "-",
           {
            "Fn::Select": [
             2,
             {
              "Fn::Split": [
               "/",
               {
                "Ref": "AWS::StackId"
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SlurmdbdLogGroup/Resource"
   }
  },
  "ExternalSlurmdbdS3Bucket": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "externalslurmdbdstack-430789882085f1c9",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/ExternalSlurmdbdS3Bucket"
   }
  },
  "SlurmdbdInstanceRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": {
         "Fn::Join": [
          "",
          [
           "ec2.",
           {
            "Ref": "AWS::URLSuffix"
           }
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role for Slurmdbd EC2 instance to access necessary AWS resources"
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/SlurmdbdInstanceRole"
   }
  },
  "ExternalSlurmdbdPolicies": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "secretsmanager:GetSecretValue",
       "Effect": "Allow",
       "Resource": [
        {
         "Ref": "DBMSPasswordSecretArn"
        },
        {
         "Ref": "MungeKeySecretArn"
        }
       ],
       "Sid": "SecretsManagerPolicy"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SlurmdbdLogGroup7510BC34",
         "Arn"
        ]
       },
       "Sid": "CloudWatchLogsPolicy"
      },
      {
       "Action": [
        "ec2:AssignPrivateIpAddresses",
        "ec2:DescribeInstances",
        "ec2:DescribeNetworkInterfaces"
       ],
       "Effect": "Allow",
       "Resource": "*",
       "Sid": "IPAssignmentPolicy"
      },
      {
       "Action": "s3:ListBucket",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ExternalSlurmdbdS3Bucket",
         "Arn"
        ]
       },
       "Sid": "S3BucketPolicy"
      },
      {
       "Action": [
        "s3:AbortMultipartUpload",
        "s3:DeleteObject",
        "s3:GetObject",
        "s3:PutObject"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "ExternalSlurmdbdS3Bucket",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       },
       "Sid": "S3BucketObjectsPolicy"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ExternalSlurmdbdPolicies",
    "Roles": [
     {
      "Ref": "SlurmdbdInstanceRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/ExternalSlurmdbdPolicies"
   }
  },
  "ExternalSlurmdbdInstanceProfile": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "SlurmdbdInstanceRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/ExternalSlurmdbdInstanceProfile"
   }
  },
  "LaunchTemplate": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Name": {
       "Ref": "ExternalSlurmdbdInstanceProfile"
      }
     },
     "ImageId": {
      "Ref": "AmiId"
     },
     "InstanceType": {
      "Ref": "InstanceType"
     },
     "KeyName": {
      "Ref": "KeyName"
     },
     "MetadataOptions": {
      "HttpTokens": "required"
     },
     "NetworkInterfaces": [
      {
       "DeviceIndex": 0,
       "Groups": [
        {
         "Ref": "SSHServerSecurityGroup"
        },
        {
         "Ref": "SlurmdbdServerSecurityGroup"
        },
        {
         "Ref": "DBMSClientSG"
        }
       ],
       "SubnetId": {
        "Ref": "SubnetId"
       }
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Sub": [
        "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\nMIME-Version: 1.0\n\n--==BOUNDARY==\nContent-Type: text/cloud-config; charset=us-ascii\nMIME-Version: 1.0\n\npackage_update: false\npackage_upgrade: false\nrepo_upgrade: none\ndatasource_list: [ Ec2, None ]\n\n--==BOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\n#!/bin/bash -x\n\nfunction vendor_cookbook\n{\n  mkdir /tmp/cookbooks\n  cd /tmp/cookbooks\n  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n  HOME_BAK=\"${!HOME}\"\n  export HOME=\"/tmp\"\n  for d in /tmp/cookbooks/*; do\n    cd \"$d\" || continue\n    LANG=en_US.UTF-8 /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete\n  done;\n  export HOME=\"${!HOME_BAK}\"\n}\n\nfunction wait_for_private_ip_assignment\n{\n  rc=1\n  retries=10\n  retry=1\n  sleeptime=1\n  while [ \\( $rc -eq 1 \\) -a \\( $retry -le $retries \\) ]; do\n    aws ec2 describe-network-interfaces --network-interface-ids \"${!ENI_ID}\" --region \"${AWS::Region}\" | jq .NetworkInterfaces[0].PrivateIpAddresses | grep -q '\"PrivateIpAddress\": \"${PrivateIp}\"'\n    rc=$?\n    retry=$((retry+1))\n    sleep $sleeptime\n  done\n  return $rc\n}\n\nTOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\nINSTANCE_ID=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -v http://169.254.169.254/latest/meta-data/instance-id)\nENI_ID=$(aws ec2 describe-instances --instance-ids ${!INSTANCE_ID} --region \"${AWS::Region}\" | jq .Reservations[0].Instances[0].NetworkInterfaces[0].NetworkInterfaceId | tr -d '\"')\n\naws ec2 assign-private-ip-addresses --region \"${AWS::Region}\" --network-interface-id \"${!ENI_ID}\" --private-ip-addresses ${PrivateIp} --allow-reassignment\n\nwait_for_private_ip_assignment || echo \"Assignment of private IP ${PrivateIp} was not successful.\"\n\nip addr add ${PrivateIp}/${SubnetPrefix} dev eth0\n\nif [ \"${CustomCookbookUrl}\" != \"NONE\" ]; then\n  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${CustomCookbookUrl}\n  vendor_cookbook\nfi\n\n# This is necessary to find the cfn-init application\nexport PATH=/opt/aws/bin:${!PATH}\n[ -f /etc/profile.d/pcluster.sh ] && . /etc/profile.d/pcluster.sh\n\ncfn-init -s ${AWS::StackName} -v -c default -r LaunchTemplate --region \"${AWS::Region}\"\n",
        {
         "CustomCookbookUrl": {
          "Ref": "CustomCookbookUrl"
         },
         "StackName": "ExternalSlurmdbdStack",
         "Region": {
          "Ref": "AWS::Region"
         },
         "PrivateIp": {
          "Ref": "PrivateIp"
         },
         "SubnetPrefix": {
          "Ref": "PrivatePrefix"
         }
        }
       ]
      }
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/LaunchTemplate",
    "AWS::CloudFormation::Init": {
     "configSets": {
      "default": [
       "setup",
       "configure"
      ]
     },
     "setup": {
      "files": {
       "/etc/chef/dna.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\"slurmdbd_ip\": \"",
           {
            "Ref": "PrivateIp"
           },
           "\", \"slurmdbd_port\": ",
           {
            "Ref": "SlurmdbdPort"
           },
           ", \"dbms_uri\": \"",
           {
            "Ref": "DBMSUri"
           },
           "\", \"dbms_username\": \"",
           {
            "Ref": "DBMSUsername"
           },
           "\", \"dbms_database_name\": \"",
           {
            "Ref": "DBMSDatabaseName"
           },
           "\", \"dbms_password_secret_arn\": \"",
           {
            "Ref": "DBMSPasswordSecretArn"
           },
           "\", \"munge_key_secret_arn\": \"",
           {
            "Ref": "MungeKeySecretArn"
           },
           "\", \"region\": \"",
           {
            "Ref": "AWS::Region"
           },
           "\", \"log_group_name\": \"",
           {
            "Ref": "SlurmdbdLogGroup7510BC34"
           },
           "\", \"stack_name\": \"ExternalSlurmdbdStack\", \"is_external_slurmdbd\": true, \"slurmdbd_conf_bucket\": \"externalslurmdbdstack-430789882085f1c9\"}"
          ]
         ]
        },
        "mode": "000644",
        "owner": "root",
        "group": "root"
       }
      },
      "commands": {
       "chef": {
        "command": "cinc-client --local-mode --config /etc/chef/client.rb --log_level info --logfile /var/log/chef-client.log --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster-entrypoints::external_slurmdbd_config",
        "cwd": "/etc/chef"
       }
      }
     },
     "configure": {
      "files": {
       "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
        "content": {
         "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.LaunchTemplate.Metadata.AWS::CloudFormation::Init\naction=/usr/bin/echo 'I was triggered by a change in AWS::CloudFormation::Init metadata!' > /tmp/cfn_init_metadata_update.log\nrunas=root\n"
        },
        "mode": "000400",
        "owner": "root",
        "group": "root"
       },
       "/etc/cfn/cfn-hup.conf": {
        "content": {
         "Fn::Sub": [
          "[main]\nstack=${StackId}\nregion=${Region}\ninterval=2\n",
          {
           "StackId": {
            "Ref": "AWS::StackId"
           },
           "Region": {
            "Ref": "AWS::Region"
           }
          }
         ]
        },
        "mode": "000400",
        "owner": "root",
        "group": "root"
       }
      }
     }
    }
   }
  },
  "ExternalSlurmdbdASG": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "DesiredCapacity": "1",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "LaunchTemplate"
     },
     "Version": {
      "Fn::GetAtt": [
       "LaunchTemplate",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "1",
    "MinSize": "1",
    "VPCZoneIdentifier": [
     {
      "Ref": "SubnetId"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ExternalSlurmdbdStack/External-Slurmdbd-ASG"
   }
  }
 },
 "Outputs": {
  "SlurmdbdPrivateIp": {
   "Description": "Secondary Private IP Address of the slurmdbd instance",
   "Value": {
    "Ref": "PrivateIp"
   }
  },
  "SlurmdbdPort": {
   "Description": "Port used to connect to slurmdbd service",
   "Value": {
    "Ref": "SlurmdbdPort"
   }
  },
  "AccountingClientSg": {
   "Description": "Security Group ID that allows traffic from the slurmctld to slurmdbd",
   "Value": {
    "Ref": "SlurmdbdClientSecurityGroup"
   }
  },
  "SshClientSg": {
   "Description": "Security Group ID that allows SSH traffic from the HeadNode to slurmdbd instance",
   "Value": {
    "Ref": "SSHClientSecurityGroup"
   }
  },
  "SlurmdbdConfigS3BucketName": {
   "Description": "S3 Bucket where a copy of the slurmdbd configuration files can be stored and re-used when re-provisioning the slurmdbd instance",
   "Value": "externalslurmdbdstack-430789882085f1c9"
  }
 }
}
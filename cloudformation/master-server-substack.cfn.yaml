AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  MasterInstanceType:
    Type: String
  ComputeInstanceType:
    Type: String
  MasterCoreCount:
    Type: CommaDelimitedList
  ComputeCoreCount:
    Type: String
  RootDevice:
    Type: String
  RootVolumeSize:
    Type: Number
  KeyName:
    Type: String
  MainStackName:
    Type: String
  AttributesTagValue:
    Type: String
  NetworkingTagValue:
    Type: String
  FilesystemTagValue:
    Type: String
  MasterENI:
    Type: String
  MasterPublicIp:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  IamInstanceProfile:
    Type: String
  IamRoleName:
    Type: String
  PlacementGroup:
    Type: String
  EFA:
    Type: String
  OS:
    Type: String
  OSUser:
    Type: String
  PreInstallScript:
    Type: String
  PreInstallArgs:
    Type: String
  PostInstallScript:
    Type: String
  PostInstallArgs:
    Type: String
  EBSVolIds:
    Type: String
  RAIDVolIds:
    Type: String
  RAIDOptions:
    Type: String
  EFSId:
    Type: String
  EFSOptions:
    Type: String
  FSXId:
    Type: String
  FSXOptions:
    Type: String
  Scheduler:
    Type: String
  EncryptedEphemeral:
    Type: String
  EphemeralDir:
    Type: String
  SharedDir:
    Type: String
  ProxyServer:
    Type: String
  ClusterDNSDomain:
    Type: String
  ClusterHostedZone:
    Type: String
  MaxSize:
    Type: Number
  DynamoDBTable:
    Type: String
  SQSQueueName:
    Type: String
  DCVEnabled:
    Type: String
  DCVPort:
    Type: String
  IntelHPCPlatform:
    Type: String
  CWLoggingEnabled:
    Type: String
  ExtraJson:
    Type: String
  CustomChefCookbook:
    Type: String
  AWSDomain:
    Type: String
  ParallelClusterVersion:
    Type: String
  CookbookVersion:
    Type: String
  ChefVersion:
    Type: String
  BerkshelfVersion:
    Type: String
  ResourcesS3Bucket:
    Type: String
  DependsOnCustomResources:
    Type: String
    Description: This is needed to set a conditional dependency on the TerminateComputeFleetCustomResource
      used with HIT
  HITConfigVersion:
    Type: String
    Description: Version of the config used to generate the HIT substack. Used to
      trigger cfn-hup with metadata changes.
  UpdateWaiterFunctionArn:
    Type: String
Conditions:
  DisableMasterHyperthreading: !Not
    - !Or
      - !Equals
        - !Select
          - '0'
          - !Ref 'MasterCoreCount'
        - '-1'
      - !Equals
        - !Select
          - '0'
          - !Ref 'MasterCoreCount'
        - NONE
  DisableComputeHyperthreading: !Not
    - !Or
      - !Equals
        - !Ref 'ComputeCoreCount'
        - '-1'
      - !Equals
        - !Ref 'ComputeCoreCount'
        - NONE
  DisableMasterHyperthreadingViaCpuOptions: !And
    - !Condition 'DisableMasterHyperthreading'
    - !Equals
      - !Select
        - '1'
        - !Ref 'MasterCoreCount'
      - 'true'
  DisableMasterHyperthreadingManually: !And
    - !Condition 'DisableMasterHyperthreading'
    - !Not
      - !Condition 'DisableMasterHyperthreadingViaCpuOptions'
  IsMasterInstanceEbsOpt: !Not
    - !Or
      - !Or
        - !Equals
          - cc2.8xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - cr1.8xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - g2.8xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - m3.medium
          - !Ref 'MasterInstanceType'
        - !Equals
          - m3.large
          - !Ref 'MasterInstanceType'
        - !Equals
          - c3.8xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - c3.large
          - !Ref 'MasterInstanceType'
        - !Equals
          - r3.8xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - r3.large
          - !Ref 'MasterInstanceType'
        - !Equals
          - i2.8xlarge
          - !Ref 'MasterInstanceType'
      - !Or
        - !Equals
          - i2.large
          - !Ref 'MasterInstanceType'
        - !Equals
          - cg1.4xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.nano
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.micro
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.small
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.medium
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.large
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.xlarge
          - !Ref 'MasterInstanceType'
        - !Equals
          - t2.2xlarge
          - !Ref 'MasterInstanceType'
  UseProxy: !Not
    - !Equals
      - !Ref 'ProxyServer'
      - NONE
  UsePlacementGroup: !Not
    - !Equals
      - !Ref 'PlacementGroup'
      - NONE
  HasUpdateWaiterFunction: !Not
    - !Equals
      - !Ref 'UpdateWaiterFunctionArn'
      - NONE
  MasterPublicIp: !Equals
    - !Ref 'MasterPublicIp'
    - 'true'
Resources:
  MasterServer:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref 'MasterServerLaunchTemplate'
        Version: !GetAtt 'MasterServerLaunchTemplate.LatestVersionNumber'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
  MasterServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref 'MasterInstanceType'
        CpuOptions:
          CoreCount: !If
            - DisableMasterHyperthreadingViaCpuOptions
            - !Select
              - '0'
              - !Ref 'MasterCoreCount'
            - !Ref 'AWS::NoValue'
          ThreadsPerCore: !If
            - DisableMasterHyperthreadingViaCpuOptions
            - 1
            - !Ref 'AWS::NoValue'
        BlockDeviceMappings:
          - DeviceName: /dev/xvdba
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdbb
            VirtualName: ephemeral1
          - DeviceName: /dev/xvdbc
            VirtualName: ephemeral2
          - DeviceName: /dev/xvdbd
            VirtualName: ephemeral3
          - DeviceName: /dev/xvdbe
            VirtualName: ephemeral4
          - DeviceName: /dev/xvdbf
            VirtualName: ephemeral5
          - DeviceName: /dev/xvdbg
            VirtualName: ephemeral6
          - DeviceName: /dev/xvdbh
            VirtualName: ephemeral7
          - DeviceName: /dev/xvdbi
            VirtualName: ephemeral8
          - DeviceName: /dev/xvdbj
            VirtualName: ephemeral9
          - DeviceName: /dev/xvdbk
            VirtualName: ephemeral10
          - DeviceName: /dev/xvdbl
            VirtualName: ephemeral11
          - DeviceName: /dev/xvdbm
            VirtualName: ephemeral12
          - DeviceName: /dev/xvdbn
            VirtualName: ephemeral13
          - DeviceName: /dev/xvdbo
            VirtualName: ephemeral14
          - DeviceName: /dev/xvdbp
            VirtualName: ephemeral15
          - DeviceName: /dev/xvdbq
            VirtualName: ephemeral16
          - DeviceName: /dev/xvdbr
            VirtualName: ephemeral17
          - DeviceName: /dev/xvdbs
            VirtualName: ephemeral18
          - DeviceName: /dev/xvdbt
            VirtualName: ephemeral19
          - DeviceName: /dev/xvdbu
            VirtualName: ephemeral20
          - DeviceName: /dev/xvdbv
            VirtualName: ephemeral21
          - DeviceName: /dev/xvdbw
            VirtualName: ephemeral22
          - DeviceName: /dev/xvdbx
            VirtualName: ephemeral23
          - DeviceName: !Ref 'RootDevice'
            Ebs:
              VolumeSize: !Ref 'RootVolumeSize'
              VolumeType: gp2
        KeyName: !Ref 'KeyName'
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Application
                Value: !Ref 'MainStackName'
              - Key: Name
                Value: Master
              - Key: aws-parallelcluster-node-type
                Value: Master
              - Key: ClusterName
                Value: !Select
                  - '1'
                  - !Split
                    - parallelcluster-
                    - !Ref 'MainStackName'
              - Key: aws-parallelcluster-attributes
                Value: !Ref 'AttributesTagValue'
              - Key: aws-parallelcluster-networking
                Value: !Ref 'NetworkingTagValue'
              - Key: aws-parallelcluster-filesystem
                Value: !Ref 'FilesystemTagValue'
        NetworkInterfaces:
          - NetworkInterfaceId: !Ref 'MasterENI'
            DeviceIndex: 0
        ImageId: !Ref 'ImageId'
        EbsOptimized: !If
          - IsMasterInstanceEbsOpt
          - true
          - false
        IamInstanceProfile:
          Name: !Ref 'IamInstanceProfile'
        Placement:
          GroupName: !If
            - UsePlacementGroup
            - !Ref 'PlacementGroup'
            - !Ref 'AWS::NoValue'
        UserData: !Base64
          Fn::Sub:
            - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0

              --==BOUNDARY==
              Content-Type: text/cloud-boothook; charset="us-ascii"
              MIME-Version: 1.0

              #!/bin/bash -x

              which yum && echo "proxy=${YumProxy}" >> /etc/yum.conf || echo "Not yum system"

              which apt-get && echo "Acquire::http::Proxy \"${AptProxy}\";" >> /etc/apt/apt.conf || echo "Not apt system"

              proxy=${ProxyServer}
              if [ "${!proxy}" != "NONE" ]; then
                proxy_host=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f1)
                proxy_port=$(echo "${!proxy}" | awk -F/ '{print $3}' | cut -d: -f2)
                echo -e "[Boto]\nproxy = ${!proxy_host}\nproxy_port = ${!proxy_port}\n" >/etc/boto.cfg
                cat >> /etc/profile.d/proxy.sh <<PROXY
              export http_proxy="${!proxy}"
              export https_proxy="${!proxy}"
              export no_proxy="localhost,127.0.0.1,169.254.169.254"
              export HTTP_PROXY="${!proxy}"
              export HTTPS_PROXY="${!proxy}"
              export NO_PROXY="localhost,127.0.0.1,169.254.169.254"
              PROXY
              fi
              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0

              #!/bin/bash -x

              function error_exit
              {
                # wait logs flush before signaling the failure
                sleep 10
                cfn-signal --exit-code=1 --reason="$1" --stack=${AWS::StackName} --role=${IamRoleName} --resource=MasterServer --region=${AWS::Region}
                exit 1
              }
              function vendor_cookbook
              {
                mkdir /tmp/cookbooks
                cd /tmp/cookbooks
                tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz
                HOME_BAK="${!HOME}"
                export HOME="/tmp"
                for d in `ls /tmp/cookbooks`; do
                  cd /tmp/cookbooks/$d
                  LANG=en_US.UTF-8 /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'
                done;
                export HOME="${!HOME_BAK}"
              }
              function bootstrap_instance
              {
                which yum 2>/dev/null; yum=$?
                which apt-get 2>/dev/null; apt=$?
                if [ "${!yum}" == "0" ]; then
                  yum -y groupinstall development && yum -y install curl wget jq awscli
                fi
                if [ "${!apt}" == "0" ]; then
                  apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli
                fi
                [[ ${!_region} =~ ^cn- ]] && s3_url="cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"
                which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${!s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
                mkdir -p /etc/chef && chown -R root:root /etc/chef
                curl --retry 3 -L https://${!_region}-aws-parallelcluster.s3.${!_region}.amazonaws.com$([ "${!_region}" != "${!_region#cn-*}" ] && echo ".cn" || exit 0)/archives/cinc/cinc-install.sh | bash -s -- -v ${!chef_version}
                /opt/cinc/embedded/bin/gem install --no-document berkshelf:${!berkshelf_version}
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${!cookbook_url}
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${!cookbook_url}.date
                curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${!cookbook_url}.md5
                vendor_cookbook
                mkdir /opt/parallelcluster
              }
              [ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh
              custom_cookbook=${CustomChefCookbook}
              export _region=${AWS::Region}
              s3_url=${AWSDomain}
              if [ "${!custom_cookbook}" != "NONE" ]; then
                if [[ "${!custom_cookbook}" =~ ^s3:// ]]; then
                  cookbook_url=$(aws s3 presign "${!custom_cookbook}" --region "${!_region}")
                else
                  cookbook_url=${!custom_cookbook}
                fi
              else
                cookbook_url=https://s3.${!_region}.${!s3_url}/${!_region}-aws-parallelcluster/cookbooks/${CookbookVersion}.tgz
              fi
              export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
              export parallelcluster_version=aws-parallelcluster-${ParallelClusterVersion}
              export cookbook_version=${CookbookVersion}
              export chef_version=${ChefVersion}
              export berkshelf_version=${BerkshelfVersion}
              if [ -f /opt/parallelcluster/.bootstrapped ]; then
                installed_version=$(cat /opt/parallelcluster/.bootstrapped)
                if [ "${!parallelcluster_version}" != "${!installed_version}" ]; then
                  bootstrap_instance
                fi
              else
                bootstrap_instance
              fi
              if [ "${!custom_cookbook}" != "NONE" ]; then
                curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z "$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)" ${!cookbook_url}
                vendor_cookbook
              fi
              cd /tmp
              # Call CloudFormation
              cfn-init -s ${AWS::StackName} --role=${IamRoleName} -v -c default -r MasterServerLaunchTemplate --region ${AWS::Region} || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
              cfn-signal --exit-code=0 --reason="MasterServer setup complete" --stack=${AWS::StackName} --role=${IamRoleName} --resource=MasterServer --region=${AWS::Region}
              # End of file
              --==BOUNDARY==
            - YumProxy: !If
                - UseProxy
                - !Ref 'ProxyServer'
                - _none_
              AptProxy: !If
                - UseProxy
                - !Ref 'ProxyServer'
                - 'false'
    Metadata:
      Comment: AWS ParallelCluster Master server
      AWS::CloudFormation::Init:
        configSets:
          default:
            - deployConfigFiles
            - cfnHupConfig
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - chefFinalize
          update:
            - deployConfigFiles
            - chefUpdate
        deployConfigFiles:
          files:
            /tmp/dna.json:
              mode: '000644'
              owner: root
              group: root
              content:
                cfncluster:
                  stack_name: !Ref 'MainStackName'
                  enable_efa: !Ref 'EFA'
                  cfn_raid_vol_ids: !Ref 'RAIDVolIds'
                  cfn_raid_parameters: !Ref 'RAIDOptions'
                  cfn_scheduler_slots: !If
                    - DisableComputeHyperthreading
                    - !Ref 'ComputeCoreCount'
                    - !Ref 'AWS::NoValue'
                  cfn_disable_hyperthreading_manually: !If
                    - DisableMasterHyperthreadingManually
                    - 'true'
                    - 'false'
                  cfn_base_os: !Ref 'OS'
                  cfn_preinstall: !Ref 'PreInstallScript'
                  cfn_preinstall_args: !Ref 'PreInstallArgs'
                  cfn_postinstall: !Ref 'PostInstallScript'
                  cfn_postinstall_args: !Ref 'PostInstallArgs'
                  cfn_region: !Ref 'AWS::Region'
                  cfn_efs: !Ref 'EFSId'
                  cfn_efs_shared_dir: !Ref 'EFSOptions'
                  cfn_fsx_fs_id: !Ref 'FSXId'
                  cfn_fsx_options: !Ref 'FSXOptions'
                  cfn_volume: !Ref 'EBSVolIds'
                  cfn_scheduler: !Ref 'Scheduler'
                  cfn_encrypted_ephemeral: !Ref 'EncryptedEphemeral'
                  cfn_ephemeral_dir: !Ref 'EphemeralDir'
                  cfn_shared_dir: !Ref 'SharedDir'
                  cfn_proxy: !Ref 'ProxyServer'
                  cfn_dns_domain: !Ref 'ClusterDNSDomain'
                  cfn_hosted_zone: !Ref 'ClusterHostedZone'
                  cfn_max_queue_size: !Ref 'MaxSize'
                  compute_instance_type: !Ref 'ComputeInstanceType'
                  cfn_node_type: MasterServer
                  cfn_cluster_user: !Ref 'OSUser'
                  cfn_ddb_table: !Ref 'DynamoDBTable'
                  cfn_sqs_queue: !Ref 'SQSQueueName'
                  dcv_enabled: !Ref 'DCVEnabled'
                  dcv_port: !Ref 'DCVPort'
                  enable_intel_hpc_platform: !Ref 'IntelHPCPlatform'
                  cfn_cluster_cw_logging_enabled: !Ref 'CWLoggingEnabled'
                  cluster_s3_bucket: !Ref 'ResourcesS3Bucket'
                  cluster_config_s3_key: configs/cluster-config.json
                  cluster_config_version: !Ref 'HITConfigVersion'
                run_list: !Sub 'recipe[aws-parallelcluster::${Scheduler}_config]'
            /etc/chef/client.rb:
              mode: '000644'
              owner: root
              group: root
              content: cookbook_path ['/etc/chef/cookbooks']
            /tmp/extra.json:
              mode: '000644'
              owner: root
              group: root
              content: !Ref 'ExtraJson'
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json
                -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json
                || ( echo "jq not installed"; cp /tmp/dna.json /etc/chef/dna.json
                )
        cfnHupConfig:
          files:
            /etc/cfn/hooks.d/parallelcluster-update.conf:
              content: !Sub |
                [parallelcluster-update]
                triggers=post.update
                path=Resources.MasterServerLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=PATH=/usr/local/bin:/bin:/usr/bin:/opt/aws/bin; cfn-init -v --stack ${AWS::StackName} --role=${IamRoleName} --resource MasterServerLaunchTemplate --configsets update --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                role=${IamRoleName}
                interval=2
              mode: '000400'
              owner: root
              group: root
        chefPrepEnv:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                info --logfile /var/log/chef-client.log --force-formatter --no-color
                --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                info --logfile /var/log/chef-client.log --force-formatter --no-color
                --chef-zero-port 8889 --json-attributes /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -postinstall
        chefFinalize:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                info --logfile /var/log/chef-client.log --force-formatter --no-color
                --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::finalize
              cwd: /etc/chef
            bootstrap:
              command: '[ ! -f /opt/parallelcluster/.bootstrapped ] && echo ${parallelcluster_version}
                | tee /opt/parallelcluster/.bootstrapped || exit 0'
        chefUpdate:
          commands:
            chef:
              command: chef-client --local-mode --config /etc/chef/client.rb --log_level
                info --logfile /var/log/chef-client.log --force-formatter --no-color
                --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::update_master
              cwd: /etc/chef
  UpdateWaiterCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ConfigVersion: !Ref 'HITConfigVersion'
      DynamoDBTable: !Ref 'DynamoDBTable'
      ServiceToken: !Ref 'UpdateWaiterFunctionArn'
    Condition: HasUpdateWaiterFunction
Outputs:
  MasterPrivateIP:
    Description: Private IP Address of the Master host
    Value: !GetAtt 'MasterServer.PrivateIp'
  MasterPublicIP:
    Description: Public IP Address of the Master host
    Value: !GetAtt 'MasterServer.PublicIp'
    Condition: MasterPublicIp
  MasterPrivateDnsName:
    Description: Private DNS name of the Master host
    Value: !GetAtt 'MasterServer.PrivateDnsName'
Metadata:
  DependsOnCustomResources: !Ref 'DependsOnCustomResources'

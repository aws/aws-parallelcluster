{#- Assign the two dictionaries to variables #}
{%- set cfn_params = config.cfn_params %}
{%- set json_params = config.json_params %}

{#- Variable to define graph/header section position, updated with macros #}
{%- set coord = {'x': 0, 'y': 0} %}

{%- set graph_width = 6 %}
{%- set graph_height = 6 -%}
{%- set logs_width = 24 %}
{%- set logs_height = 6 -%}

{%- set empty_section = {'bool': True} %}

{#- Macro to calculate coordinates for the new graph #}
{#- It updates both x and y values if the graph doesn't fit in the given line #}
{%- macro update_coord(dx, dy) %}
  {%- if coord.update({'x': (coord.x+dx)}) %} {%- endif %}
  {%- if coord.x+dx > 24 %} {#- the longest width allowed is 24 #}
    {%- if coord.update({'x': 0, 'y': coord.y+dy}) %} {%- endif %}
  {%- endif %}
{%- endmacro %}

{#- Macro to calculate section header coordinates #}
{%- macro update_coord_after_section(dy) %}
  {%- if coord.update({'x': 0, 'y': coord.y+dy}) %} {%- endif %}
{%- endmacro %}

{#- Macro to reset coordinates #}
{%- macro reset_coord() %}
  {%- if coord.update({'x': 0, 'y': 0}) %} {%- endif %}
{%- endmacro %}

{#- Macro to check if a section will be empty #}
{%- macro is_logs_section_empty(section_widgets) %}
  {%- if empty_section.update({'bool': True}) %} {%- endif %}
  {%- for log_params in section_widgets.widgets %}
    {%- for cond_dict in log_params.conditions %}
      {%- if cond_dict.param in cond_dict.allowed_values %}
        {%- if empty_section.update({'bool': False}) %} {% endif %}
      {%- endif %}
    {%- endfor %}
  {%- endfor %}
{%- endmacro -%}

Parameters:
  {#- Cluster parameters #}
  PclusterStackName:
    Description: Name of the cluster to which this dashboard belongs
    Type: String
  CWLogGroupName:
    Description: Name of the CloudWatch Log Group created
    Type: String
  {#- Head Node parameters #}
  MasterInstanceId:
    Description: ID of the Master instance
    Type: AWS::EC2::Instance::Id
  MasterPrivateIP:
    Description: Private IP of the Master instance
    Type: String
  {#- EBS parameters #}
  EBSVolumesIds:
    Description: IDs of the EBS volumes used
    Type: CommaDelimitedList
  {#- RAID parameters #}
  RAIDVolumesIds:
    Description: Volume IDs of the resulted RAID EBS volumes
    Type: CommaDelimitedList
  {#- EFS parameters #}
  EFSFileSystemId:
    Description: ID of the EFS volume used
    Type: String
  {#- FSx parameters #}
  FSXFileSystemId:
    Description: ID of the FSx volume used
    Type: String
Conditions:
  {#- Enable or disable the creation of the dashboard. Default: Enable #}
  CreateDashboard: !Equals
    - 'true'
    - {% if not json_params.cluster.dashboard or json_params.cluster.dashboard.enable %}'true'{% else %}'false'{% endif %}
Resources:
  HeadNodeDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref 'PclusterStackName'
      DashboardBody: !Join
        - ''
        - - '{"widgets":['
          {# Head Node EC2 metrics -#}

          - '{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n#
            Head Node EC2 Metrics\n"}}'
          {{- update_coord_after_section(1) }}
          {#- Head Node Instance Metrics #}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            Head Node Instance Metrics\n"}}'
          {%- set ec2_metrics = [{'metrics': ["CPUUtilization"], 'extra_params': ['"title":"CPU Utilization"']},
                                 {'metrics': ["NetworkPacketsIn", "NetworkPacketsOut"], 'extra_params': ['"title":"Network Packets In/Out"']},
                                 {'metrics': ["NetworkIn", "NetworkOut"], 'extra_params': ['"title":"Network In and Out"']},
                                 {'metrics': ["DiskReadBytes", "DiskWriteBytes"], 'extra_params': ['"title":"Disk Read/Write Bytes"']},
                                 {'metrics': ["DiskReadOps", "DiskWriteOps"], 'extra_params': ['"title":"Disk Read/Write Ops"']}]
          %}
          {{- update_coord_after_section(1) }}
          {%- for metrics_param in ec2_metrics %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metrics_param.extra_params|join(',') }}{% if metrics_param.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
            {%- for metric in metrics_param.metrics %}
          - !Sub '{{ '[' if loop.first else ',' }}["AWS/EC2","{{ metric }}","InstanceId","${MasterInstanceId}"]{{ ']}}' if loop.last else '' }}'
            {%- endfor -%}
            {{- update_coord(graph_width, graph_height) }}
          {%- endfor -%}
          {{- update_coord_after_section(graph_height) }}

          {#- EBS metrics graphs #}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            EBS Metrics\n"}}'
          {{- update_coord_after_section(1) }}

          {#- Unconditional EBS metrics #}
          {%- set ebs_metrics = [{'metrics': ["VolumeReadOps", "VolumeWriteOps"], 'extra_params': ['"title":"Read/Write Ops"']},
                                 {'metrics': ["VolumeReadBytes", "VolumeWriteBytes"], 'extra_params': ['"title":"Read/Write Bytes"']},
                                 {'metrics': ["VolumeTotalReadTime", "VolumeTotalWriteTime"], 'extra_params': ['"title":"Total Read/Write Time"']},
                                 {'metrics': ["VolumeQueueLength"], 'extra_params': ['"title":"Queue Length"']},
                                 {'metrics': ["VolumeIdleTime"], 'extra_params': ['"title":"Idle Time"']}]
          -%}
          {%- set number_of_ebs_volumes = cfn_params.NumberOfEBSVol|int -%}
          {%- set ebs_volume_types = cfn_params.VolumeType.split(',') %}

          {%- for metrics_param in ebs_metrics %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metrics_param.extra_params|join(',') }}{% if metrics_param.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
            {%- for i in range(number_of_ebs_volumes) %}
              {%- set volume_loop = loop %}
              {%- for metric in metrics_param.metrics %}
          - !Sub
            - '{% if volume_loop.first and loop.first %}[{% else %},{% endif %}["AWS/EBS","{{ metric }}","VolumeId","${EBS_Volume{{ i|int +1 }}}"]{% if volume_loop.last and loop.last %}]}}{% endif %}'
            - EBS_Volume{{ i|int +1 }}: !Select
                - '{{ i|int }}'
                - !Ref 'EBSVolumesIds'
              {%- endfor %}
            {%- endfor %}
          {{- update_coord(graph_width, graph_height) -}}
          {%- endfor %}

          {#- Conditional EBS metrics #}
          {%- set ebs_metrics_conditions = [{'metric': 'VolumeConsumedReadWriteOps', 'supported_vol_types': ["io1"], 'extra_params': ['"title":"Consumed Read/Write Ops"']},
                                            {'metric': 'VolumeThroughputPercentage', 'supported_vol_types': ["io1"], 'extra_params': ['"title":"Throughput Percentage"']},
                                            {'metric': 'BurstBalance', 'supported_vol_types': ["gp2", "st1", "sc1"], 'extra_params': ['"title":"Burst Balance"']}]
          %}
          {%- for metric_condition_params in ebs_metrics_conditions %}
            {%- set is_supported_vol_present = {'bool': False} %}
            {%- for i in range(number_of_ebs_volumes) if not is_supported_vol_present.bool %}
              {%- if ebs_volume_types[i] in metric_condition_params.supported_vol_types %} {#- TODO we should break, needs Loop Controls extension #}
                {%- if is_supported_vol_present.update({'bool': True}) %} {% endif %}
              {%- endif %}
            {%- endfor %}
            {%- if is_supported_vol_present.bool %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metric_condition_params.extra_params|join(',') }}{% if metric_condition_params.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
              {%- set first_metric = {'bool': True} %}
              {%- for i in range(number_of_ebs_volumes) %}
                {%- if ebs_volume_types[i] in metric_condition_params.supported_vol_types %}
          - !Sub
            - '{% if first_metric.bool %}{{ first_metric.update({'bool': False}) or "" }}[{% else %},{% endif %}["AWS/EBS","{{ metric_condition_params.metric }}","VolumeId","${EBS_Volume{{ i|int +1 }}}"]'
            - EBS_Volume{{ i|int +1 }}: !Select
                - '{{ i|int }}'
                - !Ref 'EBSVolumesIds'
                {%- endif %}
              {%- endfor -%}
              {{- update_coord(graph_width, graph_height) }}
          - ']}}'
            {%- endif %} {#- if is_supported_vol_present.bool #}
          {%- endfor -%}
          {{ update_coord_after_section(graph_height) }}

          {#- RAID metrics graphs #}
          {%- set number_of_raid_volumes = cfn_params.RAIDOptions.split(',')[2]|int -%} {#- if NONE, converts to 0! #}
          {%- if number_of_raid_volumes > 0 %}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            RAID Metrics\n"}}'
              {{- update_coord_after_section(1) }}

              {#- Unconditional RAID metrics #}
              {%- set raid_metrics = [{'metrics': ["VolumeReadOps", "VolumeWriteOps"], 'extra_params': ['"title":"Read/Write Ops"']},
                                     {'metrics': ["VolumeReadBytes", "VolumeWriteBytes"], 'extra_params': ['"title":"Read/Write Bytes"']},
                                     {'metrics': ["VolumeTotalReadTime", "VolumeTotalWriteTime"], 'extra_params': ['"title":"Total Read/Write Time"']},
                                     {'metrics': ["VolumeQueueLength"], 'extra_params': ['"title":"Queue Length"']},
                                     {'metrics': ["VolumeIdleTime"], 'extra_params': ['"title":"Idle Time"']}]
              %}
              {%- set raid_volume_type = cfn_params.RAIDOptions.split(',')[3] %}

              {%- for metrics_param in raid_metrics %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metrics_param.extra_params|join(',') }}{% if metrics_param.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
                {%- for i in range(number_of_raid_volumes) %}
                  {%- set volume_loop = loop %}
                  {%- for metric in metrics_param.metrics %}
          - !Sub
            - '{% if volume_loop.first and loop.first %}[{% else %},{% endif %}["AWS/EBS","{{ metric }}","VolumeId","${RAID_Volume{{ i|int +1 }}}"]{% if volume_loop.last and loop.last %}]}}{% endif %}'
            - RAID_Volume{{ i|int +1 }}: !Select
                - '{{ i|int }}'
                - !Ref 'RAIDVolumesIds'
                  {%- endfor %}
                {%- endfor %}
                {{- update_coord(graph_width, graph_height) -}}
              {%- endfor %}

              {#- Conditional RAID metrics #}
              {%- set raid_metrics_conditions_params = [{'metric': 'VolumeConsumedReadWriteOps', 'supported_vol_types': ["io1"], 'extra_params': ['"title":"Consumed Read/Write Ops"']},
                                                {'metric': 'VolumeThroughputPercentage', 'supported_vol_types': ["io1"], 'extra_params': ['"title":"Throughput Percentage"']},
                                                {'metric': 'BurstBalance', 'supported_vol_types': ["gp2", "st1", "sc1"], 'extra_params': ['"title":"Burst Balance"']}]
              %}
              {%- for metric_condition_params in raid_metrics_conditions_params %}
                {%- if raid_volume_type in metric_condition_params.supported_vol_types %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metric_condition_params.extra_params|join(',') }}{% if metric_condition_params.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
                  {%- for i in range(number_of_raid_volumes) %}
          - !Sub
            - '{{ '[' if loop.first else ',' }}["AWS/EBS","{{ metric_condition_params.metric }}","VolumeId","${RAID_Volume{{ i|int +1 }}}"]{{ ']}}' if loop.last else '' }}'
            - RAID_Volume{{ i|int +1 }}: !Select
                - '{{ i|int }}'
                - !Ref 'RAIDVolumesIds'
                  {%- endfor %}
                  {{- update_coord(graph_width, graph_height) -}}
                {%- endif %} {#- if raid_volume_type in metric_condition_params.supported_vol_types #}
              {%- endfor -%}
          {%- endif %} {#- if number_of_raid_volumes > 0 #}

          {#- EFS metrics graphs #}
          {%- set efs_shared_dir = cfn_params.EFSOptions.split(',')[0] %}
          {%- if efs_shared_dir not in ["NONE", "/NONE"] %}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            EFS Metrics\n"}}'

            {#- Unconditional EFS metrics #}
            {%- set efs_metrics = [{'metrics': ["BurstCreditBalance"], 'extra_params': ['"title":"Burst Credit Balance"']},
                                   {'metrics': ["ClientConnections"], 'extra_params': ['"title":"Client Connections"']},
                                   {'metrics': ["TotalIOBytes"], 'extra_params': ['"title":"Total IO Bytes"']},
                                   {'metrics': ["PermittedThroughput"], 'extra_params': ['"title":"Permitted Throughput"']},
                                   {'metrics': ["DataReadIOBytes", "DataWriteIOBytes"], 'extra_params': ['"title":"Data Read/Write IO Bytes"']}]
            -%}
            {{ update_coord_after_section(1) }}
            {%- for metrics_param in efs_metrics %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metrics_param.extra_params|join(',') }}{% if metrics_param.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
              {%- for metric in metrics_param.metrics %}
          - !Sub '{% if not loop.first %},{% else %}[{% endif %}["AWS/EFS","{{ metric }}","FileSystemId","${EFSFileSystemId}"]{{ ']}}' if loop.last else '' }}'
              {%- endfor -%}
              {{ update_coord(graph_width, graph_height) }}
            {%- endfor %}

            {#- Conditional EFS metrics #}
            {%- set efs_metrics_conditions_params = [{'metric': 'PercentIOLimit', 'supported_vol_types': ["generalPurpose"], 'extra_params': ['"title":"Percent IO Limit"']}] %}
            {%- set efs_volume_type = cfn_params.EFSOptions.split(',')[2] %}
            {%- for metric_condition_params in efs_metrics_conditions_params %}
              {%- if efs_volume_type in metric_condition_params.supported_vol_types %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metric_condition_params.extra_params|join(',') }}{% if metric_condition_params.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
          - !Sub '[["AWS/EFS","{{ metric_condition_params.metric }}","FileSystemId","${EFSFileSystemId}"]]}}'
              {%- endif %}
            {%- endfor -%}
            {{ update_coord(graph_width, graph_height) }}

          {%- endif -%} {#- if efs_shared_dir not in ["NONE", "/NONE"] -#}
          {{ update_coord_after_section(graph_height) }}

          {#- FSx metrics graphs #}
          {%- set fsx_shared_dir = cfn_params.FSXOptions.split(',')[0] %}
          {%- if fsx_shared_dir not in ["NONE", "/NONE"] %}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            FSx Metrics\n"}}'
            {%- set fsx_metrics = [{'metrics': ["DataReadOperations","DataWriteOperations"], 'extra_params': ['"title":"Data Read/Write Ops"','"period":300']},
                                   {'metrics': ["DataReadBytes","DataWriteBytes"], 'extra_params': ['"title":"Data Read/Write Bytes"','"period":300']},
                                   {'metrics': ["FreeDataStorageCapacity"], 'extra_params': ['"title":"Free Data Storage Capacity"']}]
            -%}
            {{ update_coord_after_section(1) }}
            {%- for metrics_param in fsx_metrics %}
          - !Sub ',{"type":"metric","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ graph_width }},"height":{{ graph_height }},"properties":{"view":"timeSeries","stacked":false,
            {{ metrics_param.extra_params|join(',') }}{% if metrics_param.extra_params|length > 0 %},{% endif %}"region":"${AWS::Region}","metrics":'
              {%- for metric in metrics_param.metrics %}
          - !Sub '{{ '[' if loop.first else ',' }}["AWS/FSx","{{ metric }}","FileSystemId","${FSXFileSystemId}"]{{ ']}}' if loop.last else '' }}'
              {%- endfor -%}
              {{- update_coord(graph_width, graph_height) }}
            {%- endfor %}
          {%- endif %}
          {{- update_coord_after_section(graph_height) }}

          {#- Head Node Logs #}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n#
            Head Node Logs\n"}}'
          {{- update_coord_after_section(1) }}
          {%- set dcv_enabled = (cfn_params.DCVOptions.split(',')[0]=='master') %}
          {%- set sections_widgets =
            [
              {
                'section_title': "ParallelCluster''s logs",
                'widgets': [
                  {
                    'title': "jobwatcher",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["sge","torque"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*jobwatcher"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "sqswatcher",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["sge","torque"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*sqswatcher"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "clustermgtd",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["slurm"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters':
                      [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*clustermgtd"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "slurm_resume",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["slurm"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*slurm_resume"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "slurm_suspend",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["slurm"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*slurm_suspend"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  }
                ]
              },
              {
                'section_title': "Scheduler''s logs",
                'widgets': [
                  {
                    'title': "slurmctld",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["slurm"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*slurmctld"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "sge-qmaster",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["sge"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*sge-qmaster"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "torque-server",
                    'conditions': [
                      {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]},
                      {'param': cfn_params.Scheduler, 'allowed_values': ["torque"]}
                    ],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*torque-server"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  }
                ]
              },
              {
                'section_title': "NICE DCV integration logs",
                'widgets': [
                  {
                    'title': "dcv-ext-authenticator",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-ext-authenticator"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "dcv-authenticator",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-authenticator"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "dcv-agent",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-agent"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "dcv-xsession",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-xsession"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "dcv-server",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-server"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "dcv-session-launcher",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*dcv-session-launcher"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "Xdcv",
                    'conditions': [{'param': dcv_enabled, 'allowed_values': [True]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*Xdcv"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  }
                ]
              },
              {
                'section_title': "System''s logs",
                'widgets': [
                  {
                    'title': "system-messages",
                    'conditions': {'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7"]},
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*system-messages"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "syslog",
                    'conditions': [{'param': cfn_params.BaseOS, 'allowed_values': ["ubuntu1604","ubuntu1804"]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*syslog"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "cfn-init",
                    'conditions': [{'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*cfn-init"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "chef-client",
                    'conditions': [{'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*chef-client"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "cloud-init",
                    'conditions': [{'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*cloud-init$"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  },
                  {
                    'title': "supervisord",
                    'conditions': [{'param': cfn_params.BaseOS, 'allowed_values': ["alinux","alinux2","centos6","centos7","ubuntu1604","ubuntu1804"]}],
                    'fields': ["@timestamp", "@message"],
                    'filters': [{'param': "@logStream", 'pattern': "${MasterPrivateIP}.*supervisord"}],
                    'sort': "@timestamp desc",
                    'limit': 100
                  }
                ]
              }
            ]
          -%}
          {%- for section_widgets in sections_widgets %}
            {{- is_logs_section_empty(section_widgets) }}
            {%- if not empty_section.bool %}
          - ',{"type":"text","x":{{ coord.x }},"y":{{ coord.y }},"width":24,"height":1,"properties":{"markdown":"\n##
            {{ section_widgets.section_title }}\n"}}'
            {{- update_coord_after_section(1) }}
              {%- for log_params in section_widgets.widgets %}
                {%- set passed_condition = {'bool': True} %}
                {%- for cond_dict in log_params.conditions %}
                  {%- if cond_dict.param not in cond_dict.allowed_values %}
                    {%- if passed_condition.update({'bool': False}) %} {% endif %}
                  {%- endif %}
                {%- endfor %}
                {%- if passed_condition.bool %}
          - ',{"type":"log","x":{{ coord.x }},"y":{{ coord.y }},"width":{{ logs_width }},"height":{{ logs_height }},"properties":{"view":"table","stacked":false,'
          - !Sub '"region":"${AWS::Region}","title":"{{ log_params.title }}",'
          - !Sub '"query":"SOURCE ''${CWLogGroupName}'''
          - '| fields {{ log_params.fields|join(', ') }}'
                  {%- for filter in log_params.filters %}
          - !Sub '| filter {{ filter.param }} like /{{ filter.pattern }}/'
                  {%- endfor %}
          - '| sort {{ log_params.sort }}'
          - '| limit {{ log_params.limit }}"}}'
                  {{- update_coord(logs_width, logs_height) }}
                {%- endif %}
              {%- endfor %}
            {%- endif %}
          {%- endfor %}
          - ']}'
    Condition: CreateDashboard


{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS ParallelCluster Template. Version: aws-parallelcluster-2.10.3",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances using the default cluster user.",
      "Type": "String",
      "Default": "NONE"
    },
    "MasterInstanceType": {
      "Description": "Head node EC2 instance type",
      "Type": "String",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "ComputeInstanceType": {
      "Description": "ComputeFleet EC2 instance type",
      "Type": "String",
      "Default": "NONE",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "MinSize": {
      "Description": "Initial number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "DesiredSize": {
      "Description": "Desired number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "MaxSize": {
      "Description": "Maximum number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "ComputeSubnetId": {
      "Description": "ID of the Subnet you want to provision the Compute Servers into",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^subnet-[0-9a-z]{8}$|^subnet-[0-9a-z]{17}$)"
    },
    "SpotPrice": {
      "Description": "Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType = \"spot\". When awsbatch is the scheduler, this is spot bid percentage.",
      "Type": "Number",
      "Default": "0"
    },
    "ClusterType": {
      "Description": "Type of cluster to launch. Can either be \"ondemand\" or \"spot\". Choosing \"spot\" will cause the ComputeFleet AutoScaling group to launch EC2 Spot instances. Default value is \"ondemand\".",
      "Type": "String",
      "Default": "ondemand",
      "ConstraintDescription": "Must be a supported cluster type: ondemand, spot",
      "AllowedValues": [
        "ondemand",
        "spot"
      ]
    },
    "ProxyServer": {
      "Description": "hostname and port of HTTP proxy server for cfn-init, boto and yum i.e. proxy.example.com:8080",
      "Type": "String",
      "Default": "NONE"
    },
    "VolumeSize": {
      "Description": "Comma delimited list of size of EBS volume in GB, if creating a new one",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "VolumeType": {
      "Description": "Comma delimited list of type of volume to create either new or from snapshot",
      "Type": "String",
      "Default": "gp2,gp2,gp2,gp2,gp2",
      "ConstraintDescription": "must be a supported volume type: standard, io1, io2, gp2, gp3, st1, sc1",
      "AllowedPattern": "^(NONE|standard|io1|io2|gp2|gp3|st1|sc1)((,|, )(NONE|standard|io1|io2|gp2|gp3|st1|sc1)){4}$"
    },
    "MasterSubnetId": {
      "Description": "ID of the Subnet you want to provision the head node into",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AvailabilityZone": {
      "Description": "Availability Zone the cluster will launch into. THIS IS REQUIRED",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "EBSSnapshotId": {
      "Description": "Comma delimited list of Id of EBS snapshot if using snapshot as source for volume",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})((,|, )(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})){4}$"
    },
    "CustomAMI": {
      "Description": "ID of a Custom AMI, to use instead of published AMI's",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)"
    },
    "VPCId": {
      "Description": "ID of the VPC you want to provision cluster into. Only used with UseVPCBase=false",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AccessFrom": {
      "Description": "Lockdown SSH/HTTP access (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ComputeSubnetCidr": {
      "Description": "CIDR(s) for new backend subnet(s) i.e. 10.0.100.0/24. This is a comma-delimited list and can support multiple CIDR ranges for a multi-AZ cluster. The order and length of this list MUST match the AvailabilityZones parameter.",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "AllowedPattern": "(NONE|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "Default": "NONE"
    },
    "UsePublicIps": {
      "Description": "Boolean flag to use public IP's for instances. If false, the VPC must be correctly setup to use NAT for all traffic.",
      "Type": "String",
      "Default": "true",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeIOPS": {
      "Description": "Comma delimited list of number of IOPS for volume type io1, io2 and gp3. Not used for other volume types.",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "VolumeThroughput": {
      "Description": "Comma delimited list of number of Throughtput for volume type gp3. Not used for other volume types.",
      "Type": "String",
      "Default": "125,125,125,125,125"
    },
    "PreInstallScript": {
      "Description": "Preinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallScript": {
      "Description": "Postinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadResource": {
      "Description": "S3 resource with read access from AWS ParallelCluster nodes",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadWriteResource": {
      "Description": "Addtional policy document to be added to EC2 IAM role created and assigned to all nodes.",
      "Type": "String",
      "Default": "NONE"
    },
    "Placement": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "compute",
      "AllowedValues": [
        "cluster",
        "compute"
      ]
    },
    "PlacementGroup": {
      "Description": "The name of an existing placement group",
      "Type": "String",
      "Default": "NONE"
    },
    "EncryptedEphemeral": {
      "Description": "Boolean flag to encrypt local ephemeral drives. The keys are in-memory and non-recoverable.",
      "Type": "String",
      "Default": "false",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "PreInstallArgs": {
      "Description": "Preinstall script args passed to the preinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallArgs": {
      "Description": "Postinstall script args passed to the postinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "EBSEncryption": {
      "Description": "Comma delimited list of boolean flag to use EBS encryption for /shared volume. (Not to be used for snapshots)",
      "Type": "String",
      "Default": "false,false,false,false,false",
      "ConstraintDescription": "true/false",
      "AllowedPattern": "^(NONE|true|false)((,|, )(NONE|true|false)){4}$"
    },
    "EphemeralDir": {
      "Description": "The path/mountpoint for the ephemeral drive",
      "Type": "String",
      "Default": "/scratch"
    },
    "BaseOS": {
      "Description": "Base OS type for cluster AMI",
      "Type": "String",
      "Default": "alinux2",
      "ConstraintDescription": "must be a supported base OS",
      "AllowedValues": [
        "centos7",
        "centos8",
        "alinux",
        "alinux2",
        "ubuntu1604",
        "ubuntu1804"
      ]
    },
    "Architecture": {
      "Description": "Architecture to use when selecting default AMIs",
      "Type": "String",
      "Default": "x86_64",
      "ConstraintDescription": "Must be either x86_64 or arm64",
      "AllowedValues": [
        "x86_64",
        "arm64"
      ]
    },
    "ScaleDownIdleTime": {
      "Description": "Period in minutes without jobs after which compute node will terminate ",
      "Type": "String",
      "Default": "10"
    },
    "Scheduler": {
      "Description": "Cluster scheduler",
      "Type": "String",
      "Default": "slurm",
      "ConstraintDescription": "must be a supported scheduler",
      "AllowedValues": [
        "sge",
        "torque",
        "slurm",
        "awsbatch"
      ]
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String",
      "Default": "/shared"
    },
    "ClusterConfigMetadata": {
      "Description": "Cluster configuration metadata.",
      "Type": "String",
      "Default": "{}"
    },
    "AdditionalSG": {
      "Description": "Additional VPC security group to be added to instances. Defaults to NONE",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "CustomChefCookbook": {
      "Description": "URL of custom cookbook that will override the default. This will be unpacked and then dependencies resolved with Berkshelf.",
      "Type": "String",
      "Default": "NONE"
    },
    "ExtraJson": {
      "Description": "Extra json to be added to Chef dna.json",
      "Type": "String",
      "Default": "{}"
    },
    "EBSKMSKeyId": {
      "Description": "Comma delimited list of KMS ARN for customer created master key, will be used for EBS encryption",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "MasterRootVolumeSize": {
      "Description": "Size of head node EBS root volume in GB",
      "Type": "Number",
      "Default": "35",
      "MinValue": "35"
    },
    "ComputeRootVolumeSize": {
      "Description": "Size of ComputeFleet EBS root volume in GB",
      "Type": "Number",
      "Default": "35",
      "MinValue": "35"
    },
    "EC2IAMRoleName": {
      "Description": "Existing EC2 IAM role name",
      "Type": "String",
      "Default": "NONE"
    },
    "EC2IAMPolicies": {
      "Description": "Attach additional IAM Policies to the created Root Role",
      "Type": "CommaDelimitedList",
      "Default": "NONE"
    },
    "IAMLambdaRoleName": {
      "Description": "Existing IAM role name for Lambda functions",
      "Type": "String",
      "Default": "NONE"
    },
    "VPCSecurityGroupId": {
      "Description": "Existing VPC security group Id",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "EBSVolumeId": {
      "Description": "Comma delimited list of existing EBS volume Id",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})((,|, )(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})){4}$"
    },
    "AdditionalCfnTemplate": {
      "Description": "A second CloudFormation template to launch with the cluster",
      "Type": "String",
      "Default": "NONE"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 bucket where resources needed by the stack are located. The bucket gets deleted on stack deletion if it is not user-provided.",
      "Type": "String"
    },
    "ArtifactS3RootDirectory": {
      "Description": "Root directory in S3 bucket where cluster artifacts are stored, i.e. cluster artifacts would be under {ResourcesS3Bucket}/{ArtifactS3RootDirectory}.",
      "Type": "String"
    },
    "RemoveBucketOnDeletion": {
      "Description": "Parameter to control if bucket is removed on cluster deletion. pcluster created buckets are alway removed, user provided buckets are kept.",
      "Type": "String"
    },
    "RAIDOptions": {
      "Description": "Comma Separated List of RAID related options, 9 parameters in total, [shared_dir,raid_type,num_of_raid_volumes,volume_type,volume_size,volume_iops,encrypted,ebs_kms_key_id,volume_throughput]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|.+)(,|, )(NONE|\\d)(,|, )(NONE|\\d)(,|, )(NONE|standard|io1|io2|gp2|gp3|st1|sc1)(,|, )(NONE|\\d+)(,|, )(NONE|\\d+)(,|, )(NONE|true|false)(,|, )(NONE|.+)(,|, )(NONE|\\d+)$"
    },
    "NumberOfEBSVol": {
      "Description": "Number of EBS Volumes the user requested, up to 5",
      "Type": "Number",
      "Default": "1"
    },
    "FSXOptions": {
      "Description": "Comma separated list of FSx related options, 17 parameters in total, [shared_dir,fsx_fs_id,storage_capacity,fsx_kms_key_id,imported_file_chunk_size,export_path,import_path,weekly_maintenance_start_time,deployment_type,per_unit_storage_throughput,daily_automatic_backup_start_time,automatic_backup_retention_days,copy_tags_to_backups,fsx_backup_id,auto_import_policy,storage_type,drive_cache_type]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "EFSOptions": {
      "Description": "Comma separated list of EFS related options, 9 parameters in total, [shared_dir,efs_fs_id,performance_mode,efs_kms_key_id,provisioned_throughput,encrypted,throughput_mode,exists_valid_head_node_mt,exists_valid_compute_mt]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "Cores": {
      "Description": "Comma seperated string of [head node cores], [compute cores], [head node instance type supports disabling hyperthreading via CPU options], [compute instance type supports disabling hyperthreading via CPU options].",
      "Type": "CommaDelimitedList",
      "Default": "NONE,NONE,NONE,NONE"
    },
    "EFA": {
      "Description": "Enable EFA on the compute nodes, enable_efa = compute",
      "Type": "String",
      "Default": "NONE"
    },
    "EFAGDR": {
      "Description": "Enable EFA GPUDirect Support on the compute nodes, enable_efa_gdr = compute",
      "Type": "String",
      "Default": "NONE"
    },
    "DCVOptions": {
      "Description": "Comma separated list of NICE DCV related options, 3 parameters in total, [enabled,port,access_from]",
      "Type": "String",
      "Default": "NONE,NONE,NONE"
    },
    "IntelHPCPlatform": {
      "Description": "Enable Intel HPC Platform packages.",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "CWLogOptions": {
      "Description": "Comma separated list of CloudWatch logging, 2 parameters in total, [enabled, retention_days]",
      "Type": "String",
      "Default": "true,14"
    },
    "NetworkInterfacesCount": {
      "Description": "Comma separated string of [head node network interfaces], [compute network interfaces].",
      "Type": "CommaDelimitedList",
      "Default": "1,1"
    },
    "InstanceTypesData": {
      "Description": "Json string with information about instance types, as returned from EC2 describe-instance-types",
      "Type": "String",
      "Default": "{}"
    }
  },
  "Conditions": {
    "CreateEFSSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "EFSOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateRAIDSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "NONE",
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "RAIDOptions"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "CreateFSXSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "FSXOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseSpotPrice": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0"
          ]
        }
      ]
    },
    "CreateComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::Or": [
        {
          "Fn::And": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetId"
                },
                "NONE"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            {
              "Ref": "MasterSubnetId"
            }
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAMI"
            },
            "NONE"
          ]
        }
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIps"
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "UsePublicIps"
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "Placement"
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadWriteResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSG"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EC2IAMRoleName"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMPolicies": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "EC2IAMPolicies"
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateEC2IAMRole": {
      "Fn::Equals": [
        {
          "Ref": "EC2IAMRoleName"
        },
        "NONE"
      ]
    },
    "CreateIAMLambdaRole": {
      "Fn::Equals": [
        {
          "Ref": "IAMLambdaRoleName"
        },
        "NONE"
      ]
    },
    "AddHITIamPolicies": {
      "Fn::And": [
        {
          "Condition": "CreateEC2IAMRole"
        },
        {
          "Condition": "CreateHITSubstack"
        }
      ]
    },
    "UseExistingSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCSecurityGroupId"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateSecurityGroups": {
      "Fn::Equals": [
        {
          "Ref": "VPCSecurityGroupId"
        },
        "NONE"
      ]
    },
    "CreateSubStack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalCfnTemplate"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreatePlacementGroup": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "DYNAMIC"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        },
        {
          "Fn::Not": [
            {
              "Condition": "CreateHITSubstack"
            }
          ]
        }
      ]
    },
    "CreateComputeFleet": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "Scheduler"
                },
                "awsbatch"
              ]
            },
            {
              "Condition": "CreateHITSubstack"
            }
          ]
        }
      ]
    },
    "CreateHITSubstack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "slurm"
      ]
    },
    "CreateAWSBatchStack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "awsbatch"
      ]
    },
    "EnableDCV": {
      "Fn::Equals": [
        {
          "Fn::Select": [
            "0",
            {
              "Fn::Split": [
                ",",
                {
                  "Ref": "DCVOptions"
                }
              ]
            }
          ]
        },
        "master"
      ]
    },
    "UseArmAMIs": {
      "Fn::Equals": [
        {
          "Ref": "Architecture"
        },
        "arm64"
      ]
    },
    "UseProvidedResourcesS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "RemoveBucketOnDeletion"
        },
        "False"
      ]
    }
  },
  "Mappings": {
    "AWSRegionOS2AMIarm64": {
      "af-south-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0d5a0718d4bde9204",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0b6f8433d9812f741",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-02a6fe139b9c47317"
      },
      "ap-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0509e94fb4a868096",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0b71b68d648be0c55",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-02a22e2e73c9f82e9"
      },
      "ap-northeast-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-036788696c41e00ae",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-03f557b6e039c15b9",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-00a24e3ac885eb6fa"
      },
      "ap-northeast-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-097a713291e182ada",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-001716816737711f4",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-09c2efe6f021d5ee0"
      },
      "ap-northeast-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0ce18c955245c5107",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-02b9b305eec5a6a44",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0a4cc8d4f88992d84"
      },
      "ap-southeast-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0711184f7561b0f0c",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-02a14598c30d73bf3",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0ada9586a505ae8f8"
      },
      "ap-southeast-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0f78a7186f43782b2",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-00807445c7af7ae50",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-05975e43e21b885e3"
      },
      "ca-central-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0989f40c9720d5f79",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0f1db2a1d9142ec30",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-04cd2794a90056a52"
      },
      "cn-north-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "cn-northwest-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "eu-central-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-05871f59558fd68ba",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0ba2cebb1fd03ca78",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-094fbf8f819c8b5a7"
      },
      "eu-north-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-07c8f0404e5fc666c",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-098d0ff986c99ca2c",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-02aefdb5465732e77"
      },
      "eu-south-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-023b8baeee0828c58",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0b27144ca87c35ef7",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0156625cc9366e0c0"
      },
      "eu-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0a0d031064f3a782c",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0ccbc5e6c6e82b118",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-009c0375fb8961a65"
      },
      "eu-west-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-001c8a8053c093dbf",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-00abc80522c37c1e6",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0e2a79786bb15c82d"
      },
      "eu-west-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0f8942d44dc3b7c8b",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0b6b11eddd6022828",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-09d6b7fc74f4fd0fd"
      },
      "me-south-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-048cc6406e13e71a7",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-04236b3210f8a987b",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0f734b78fd079ef13"
      },
      "sa-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0a18569e6c6a7bc92",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-01c40147f05d582e4",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-05ba813e0ca1dec77"
      },
      "us-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0a9586df9907e474f",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-0fcf28c67db2d3aa7",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0d14c1b492597646b"
      },
      "us-east-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-04893a60e364b0ea2",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-05ccfca6cf071e7d6",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0601e2652ad62893d"
      },
      "us-gov-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "us-gov-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "us-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-048680107f02a7eee",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-08b3d84a971c5ffe5",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-01c86367970319721"
      },
      "us-west-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0f65d7b1a5c313b8e",
        "centos7": "UNSUPPORTED",
        "centos8": "ami-046403304c4c79a26",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-08550709977d4179b"
      }
    },
    "AWSRegionOS2AMIx86": {
      "af-south-1": {
        "alinux": "ami-0a749bdfea04e4d53",
        "alinux2": "ami-04ffb9afd7882217a",
        "centos7": "ami-0a6e03548dd11ce51",
        "centos8": "ami-0a252f9223e7b3edd",
        "ubuntu1604": "ami-0dd20863bb7ae7cfb",
        "ubuntu1804": "ami-0bddc9a957305520b"
      },
      "ap-east-1": {
        "alinux": "ami-0774dc3f6c2a44152",
        "alinux2": "ami-05219e730efabd6b2",
        "centos7": "ami-09d6d38281d7042f5",
        "centos8": "ami-0f9140fad56dacbc6",
        "ubuntu1604": "ami-0caa617c6089f7a41",
        "ubuntu1804": "ami-0090565769cb51e3c"
      },
      "ap-northeast-1": {
        "alinux": "ami-09aa658eecb219231",
        "alinux2": "ami-0903ee40c044d10c3",
        "centos7": "ami-042c11e89e57a555f",
        "centos8": "ami-0a61db05771262afa",
        "ubuntu1604": "ami-055f691567ded247d",
        "ubuntu1804": "ami-02a29cc2f1f46ed1b"
      },
      "ap-northeast-2": {
        "alinux": "ami-03bf02b08fc4ad47a",
        "alinux2": "ami-0e0118ff490dd438d",
        "centos7": "ami-09941cb8329552a8f",
        "centos8": "ami-0ce9caff52adef05a",
        "ubuntu1604": "ami-0b64441091365684c",
        "ubuntu1804": "ami-0ff389f363fa93160"
      },
      "ap-northeast-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux": "ami-0b879606d4a16ad9b",
        "alinux2": "ami-0aa2988e101ab796b",
        "centos7": "ami-0f6cea27826dbfc63",
        "centos8": "ami-09b411b3d6ce463c0",
        "ubuntu1604": "ami-034f372c1de1ed4f8",
        "ubuntu1804": "ami-0ead684d91ce63db6"
      },
      "ap-southeast-1": {
        "alinux": "ami-08da4aa82ac881b2d",
        "alinux2": "ami-0cf37853878eb84ac",
        "centos7": "ami-0cccf0b01362b11ad",
        "centos8": "ami-01a8f2e839110cb3c",
        "ubuntu1604": "ami-0bcdc7030c5eb3cf0",
        "ubuntu1804": "ami-04b04f95ed799e785"
      },
      "ap-southeast-2": {
        "alinux": "ami-09ab804cd8490b52a",
        "alinux2": "ami-0f155e8231aa5b518",
        "centos7": "ami-05df69884ce6b1f3b",
        "centos8": "ami-0cb94cba73447be2c",
        "ubuntu1604": "ami-00e730811bb02cc85",
        "ubuntu1804": "ami-0b6f09422ce3ee8dd"
      },
      "ca-central-1": {
        "alinux": "ami-068c43291c51858b6",
        "alinux2": "ami-0e4886188f1d3314a",
        "centos7": "ami-05033ceffd12502cb",
        "centos8": "ami-0d39241801b1aff73",
        "ubuntu1604": "ami-0a2737469e696600f",
        "ubuntu1804": "ami-0bf9dc3c59bbbc95a"
      },
      "cn-north-1": {
        "alinux": "ami-083f3a247a10ec319",
        "alinux2": "ami-00774413e694dabcd",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "ami-0e8098a7a0d18f42b",
        "ubuntu1804": "ami-0acb61f57647747d7"
      },
      "cn-northwest-1": {
        "alinux": "ami-0792329781459feca",
        "alinux2": "ami-0513d8a4f149ae686",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "ami-0081464ca3c59fb85",
        "ubuntu1804": "ami-056767ba8cb5ef508"
      },
      "eu-central-1": {
        "alinux": "ami-0963e81409fd8dfef",
        "alinux2": "ami-01a96f245b80068ed",
        "centos7": "ami-0a4f4abd12a29bf03",
        "centos8": "ami-0fef800b7cde99ac1",
        "ubuntu1604": "ami-0ca06c32fc8f96621",
        "ubuntu1804": "ami-0ccbd2637f48177d4"
      },
      "eu-north-1": {
        "alinux": "ami-02be3b70caef8680c",
        "alinux2": "ami-0447aa0a23ee70f66",
        "centos7": "ami-0290912a4bbec9109",
        "centos8": "ami-09f24b70a5ce5fe7c",
        "ubuntu1604": "ami-07fe7424eb52078ff",
        "ubuntu1804": "ami-0bc4fc4fa5dcea0c6"
      },
      "eu-south-1": {
        "alinux": "ami-00fb73c42cdcb23d2",
        "alinux2": "ami-0ac32322d28fb3047",
        "centos7": "ami-07b94df4f6400f62e",
        "centos8": "ami-079e8a89a32e5beeb",
        "ubuntu1604": "ami-0cff0a9dc4db90a3a",
        "ubuntu1804": "ami-0e278a04b2e53edc6"
      },
      "eu-west-1": {
        "alinux": "ami-0f59be8459bf59a3d",
        "alinux2": "ami-0be379e7258e80a56",
        "centos7": "ami-0f328030d323cee4f",
        "centos8": "ami-0409377561edd4825",
        "ubuntu1604": "ami-04b6927f9bb28b9b3",
        "ubuntu1804": "ami-0db3b0c3329f3bbb1"
      },
      "eu-west-2": {
        "alinux": "ami-0dce98bfa69ff5a43",
        "alinux2": "ami-01f85e0de78cbe4ff",
        "centos7": "ami-0bb5386b2bc111da6",
        "centos8": "ami-03b4a99b97d2973cf",
        "ubuntu1604": "ami-02ac1425c99a83662",
        "ubuntu1804": "ami-0398209daac2e67df"
      },
      "eu-west-3": {
        "alinux": "ami-0a2a1ba05d115b545",
        "alinux2": "ami-0799d9f4ee52bee2a",
        "centos7": "ami-0766391274953c00d",
        "centos8": "ami-00cbbf66d1fd8049c",
        "ubuntu1604": "ami-09e2d2862818b5d0b",
        "ubuntu1804": "ami-0f80640123872d017"
      },
      "me-south-1": {
        "alinux": "ami-0e5ec072693567c53",
        "alinux2": "ami-0fa41b30844c5356f",
        "centos7": "ami-0f535328d6931bf75",
        "centos8": "ami-06294cac8c33f624c",
        "ubuntu1604": "ami-068f496431918e0db",
        "ubuntu1804": "ami-06f6e1a8b368aa977"
      },
      "sa-east-1": {
        "alinux": "ami-00b12c02a6cd3db6b",
        "alinux2": "ami-0c2306a689e24b8fa",
        "centos7": "ami-0fe8dd163739db29d",
        "centos8": "ami-00f0307ca28f60ba9",
        "ubuntu1604": "ami-0fa932d59bde859eb",
        "ubuntu1804": "ami-0eb2eb42ce9dd21db"
      },
      "us-east-1": {
        "alinux": "ami-05536fd35472fac22",
        "alinux2": "ami-06035ba46038e8d48",
        "centos7": "ami-0889ac4444e06442c",
        "centos8": "ami-01bb186f56fab4291",
        "ubuntu1604": "ami-0d3405790fefd1a26",
        "ubuntu1804": "ami-0a2123502906f5d08"
      },
      "us-east-2": {
        "alinux": "ami-005c25beddbccd13f",
        "alinux2": "ami-016826d318e8ba3c8",
        "centos7": "ami-02fa8394bc2ce8c51",
        "centos8": "ami-0c816ddf1b7bc510b",
        "ubuntu1604": "ami-079f53df81d66a54e",
        "ubuntu1804": "ami-0acb89d94ec7f31be"
      },
      "us-gov-east-1": {
        "alinux": "ami-07b27b89906033021",
        "alinux2": "ami-034d17fd75650a061",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "ami-08d78566756d3fc5e",
        "ubuntu1804": "ami-039f3c16f7ef1fb2f"
      },
      "us-gov-west-1": {
        "alinux": "ami-0681e7e5c32c97300",
        "alinux2": "ami-00585938002286c95",
        "centos7": "UNSUPPORTED",
        "centos8": "UNSUPPORTED",
        "ubuntu1604": "ami-06303574735a7dd20",
        "ubuntu1804": "ami-03b5025b7cc0f2862"
      },
      "us-west-1": {
        "alinux": "ami-0b95313fdfa127638",
        "alinux2": "ami-0e17d1f6b265d3c44",
        "centos7": "ami-0b00057d77d87714e",
        "centos8": "ami-09969a44cb9eb1fab",
        "ubuntu1604": "ami-0f3e69b4236be94a0",
        "ubuntu1804": "ami-0956338fedc541036"
      },
      "us-west-2": {
        "alinux": "ami-0cf7e7700367a227e",
        "alinux2": "ami-0f547b80bce426cb9",
        "centos7": "ami-0533acfc8539cf97c",
        "centos8": "ami-032923c40e823f2a5",
        "ubuntu1604": "ami-035c680c6be4fb276",
        "ubuntu1804": "ami-0424c7e8bfa7664d7"
      }
    },
    "OSFeatures": {
      "centos7": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "centos8": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "alinux": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "alinux2": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "ubuntu1604": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      },
      "ubuntu1804": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      }
    },
    "PackagesVersions": {
      "default": {
        "parallelcluster": "2.10.3",
        "cookbook": "aws-parallelcluster-cookbook-2.10.3",
        "chef": "15.11.8",
        "berkshelf": "7.0.10",
        "ami": "dev"
      }
    },
    "Partition2Url": {
      "aws": {
        "url": "amazonaws.com"
      },
      "aws-us-gov": {
        "url": "amazonaws.com"
      },
      "aws-cn": {
        "url": "amazonaws.com.cn"
      }
    }
  },
  "Resources": {
    "EFSSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "MasterSubnetId": {
            "Ref": "MasterSubnetId"
          },
          "ComputeSubnetId": {
            "Ref": "ComputeSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/efs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateEFSSubstack"
    },
    "CloudWatchLogsSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "CWLogOptions": {
            "Ref": "CWLogOptions"
          },
          "CWLogGroupName": {
            "Fn::Sub": [
              "/aws/parallelcluster/${cluster_name}",
              {
                "cluster_name": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "CreateHITSubstack": {
            "Fn::If": [
              "CreateHITSubstack",
              "true",
              "false"
            ]
          },
          "CreateAWSBatchLogGroups": {
            "Fn::If": [
              "CreateAWSBatchStack",
              "true",
              "false"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/cw-logs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600,
        "QueueName": {
          "Ref": "AWS::StackName"
        }
      },
      "Condition": "CreateComputeFleet"
    },
    "FSXSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "ComputeSecurityGroupIngress": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroupIngress"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "SubnetId": {
            "Ref": "MasterSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/fsx-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateFSXSubstack"
    },
    "SQSPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SendMessage-From-AS-SNS-Topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNS"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "SQS"
          }
        ]
      },
      "Condition": "CreateComputeFleet"
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "Condition": "CreateComputeFleet"
    },
    "SNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "SQS",
            "Arn"
          ]
        },
        "Protocol": "sqs",
        "TopicArn": {
          "Ref": "SNS"
        }
      },
      "Condition": "CreateComputeFleet"
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Delete",
      "Properties": {
        "TableName": {
          "Ref": "AWS::StackName"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "instanceId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      },
      "Condition": "CreateComputeFleet"
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": {
          "Fn::If": [
            "UseEC2IAMPolicies",
            {
              "Ref": "EC2IAMPolicies"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": [
                      "ec2.${s3_url}",
                      {
                        "s3_url": {
                          "Fn::FindInMap": [
                            "Partition2Url",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "url"
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Condition": "CreateEC2IAMRole"
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          }
        ]
      }
    },
    "ParallelClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:DescribeVolumes",
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceTypes"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "SQSQueue",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}"
                }
              ]
            },
            {
              "Sid": "Autoscaling",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:DescribeTags",
                "autoscaling:SetInstanceHealth"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "Cloudformation",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/parallelcluster-*/*"
                }
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}"
                }
              ]
            },
            {
              "Sid": "S3GetObj",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${AWS::Region}-aws-parallelcluster/*"
                }
              ]
            },
            {
              "Sid": "S3PutObj",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/${ArtifactS3RootDirectory}/batch/*"
                }
              ]
            },
            {
              "Sid": "SQSList",
              "Action": [
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "FSx",
              "Action": [
                "fsx:DescribeFileSystems"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "BatchJobPassRole",
              "Action": [
                "iam:PassRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster-*"
                }
              ]
            },
            {
              "Sid": "DcvLicense",
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole"
    },
    "ParallelClusterHITPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster-hit",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2Terminate",
              "Effect": "Allow",
              "Action": [
                "ec2:TerminateInstances"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "ec2:ResourceTag/Application": {
                    "Ref": "AWS::StackName"
                  }
                }
              }
            },
            {
              "Sid": "EC2",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:RunInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:CreateTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ResourcesS3Bucket",
              "Effect": "Allow",
              "Action": {
                "Fn::If": [
                  "UseProvidedResourcesS3Bucket",
                  [
                    "s3:ListBucket",
                    "s3:ListBucketVersions",
                    "s3:GetObject*",
                    "s3:PutObject*"
                  ],
                  "s3:*"
                ]
              },
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}"
                },
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/${ArtifactS3RootDirectory}/*"
                }
              ]
            },
            {
              "Sid": "DynamoDBTableQuery",
              "Action": [
                "dynamodb:Query"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}"
                },
                {
                  "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}/index/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "AddHITIamPolicies"
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy"
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadWriteResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy"
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp"
    },
    "ComputeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "CidrBlock": {
          "Ref": "ComputeSubnetCidr"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ]
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "ComputeSubnet"
        },
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the head node",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "AccessFrom"
            }
          },
          {
            "Fn::If": [
              "EnableDCV",
              {
                "IpProtocol": "tcp",
                "FromPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "ToPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "CidrIp": {
                  "Fn::Select": [
                    "2",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": 0,
            "ToPort": 65535
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "DestinationSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupNormalEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "DependsOn": "ComputeSecurityGroupEgress",
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS ParallelCluster head node interface",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": false,
        "GroupSet": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      }
    },
    "AdditionalCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "AdditionalCfnTemplate"
        }
      },
      "Condition": "CreateSubStack"
    },
    "AWSBatchStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "CleanupResourcesS3BucketCustomResource",
        "CloudWatchLogsSubstack"
      ],
      "Properties": {
        "Parameters": {
          "AttributeTags": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "S3Url": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "FileSystemTags": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "EFSSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "EFSOptions"
                  }
                ]
              }
            ]
          },
          "EFSFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "MinvCpus": {
            "Ref": "MinSize"
          },
          "DesiredvCpus": {
            "Ref": "DesiredSize"
          },
          "MaxvCpus": {
            "Ref": "MaxSize"
          },
          "InstanceTypes": {
            "Ref": "ComputeInstanceType"
          },
          "Subnet": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "OS": {
            "Ref": "BaseOS"
          },
          "ClusterName": {
            "Ref": "AWS::StackName"
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SpotBidPercentage": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "Ref": "SpotPrice"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "RAIDSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "RAIDOptions"
                  }
                ]
              }
            ]
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "Architecture": {
            "Ref": "Architecture"
          },
          "MasterPrivateIP": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateIP"
            ]
          },
          "IAMLambdaRoleName": {
            "Ref": "IAMLambdaRoleName"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/batch-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateAWSBatchStack"
    },
    "AssociateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp"
    },
    "DynamicPlacementGroup": {
      "Type": "AWS::EC2::PlacementGroup",
      "Properties": {
        "Strategy": "cluster"
      },
      "Condition": "CreatePlacementGroup"
    },
    "CleanupResourcesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                  },
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": {
                    "Fn::If": [
                      "UseProvidedResourcesS3Bucket",
                      [
                        "s3:DeleteObject",
                        "s3:DeleteObjectVersion",
                        "s3:ListBucket",
                        "s3:ListBucketVersions"
                      ],
                      [
                        "s3:DeleteBucket",
                        "s3:DeleteObject",
                        "s3:DeleteObjectVersion",
                        "s3:ListBucket",
                        "s3:ListBucketVersions"
                      ]
                    ]
                  },
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/${ArtifactS3RootDirectory}/*"
                    }
                  ],
                  "Sid": "S3BucketPolicy"
                },
                {
                  "Fn::If": [
                    "CreateHITSubstack",
                    {
                      "Sid": "DescribeInstances",
                      "Effect": "Allow",
                      "Action": [
                        "ec2:DescribeInstances"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "CreateHITSubstack",
                    {
                      "Sid": "FleetTerminatePolicy",
                      "Effect": "Allow",
                      "Action": [
                        "ec2:TerminateInstances"
                      ],
                      "Resource": "*",
                      "Condition": {
                        "StringEquals": {
                          "ec2:ResourceTag/Application": {
                            "Ref": "AWS::StackName"
                          }
                        }
                      }
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      },
      "Condition": "CreateIAMLambdaRole"
    },
    "CleanupResourcesS3BucketCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ResourcesS3Bucket": {
          "Ref": "ResourcesS3Bucket"
        },
        "ArtifactS3RootDirectory": {
          "Ref": "ArtifactS3RootDirectory"
        },
        "RemoveBucketOnDeletion": {
          "Ref": "RemoveBucketOnDeletion"
        },
        "Action": "DELETE_S3_ARTIFACTS",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      }
    },
    "TerminateComputeFleetCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "StackName": {
          "Ref": "AWS::StackName"
        },
        "Action": "TERMINATE_EC2_INSTANCES",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CloudWatchLogsSubstack",
        "ComputeFleetHITSubstack"
      ],
      "Condition": "CreateHITSubstack"
    },
    "CleanupResourcesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": [
            "pcluster-CleanupResources-${StackId}",
            {
              "StackId": {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": {
            "Fn::Sub": "${ArtifactS3RootDirectory}/custom_resources_code/artifacts.zip"
          }
        },
        "Handler": "cleanup_resources.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::If": [
            "CreateIAMLambdaRole",
            {
              "Fn::GetAtt": [
                "CleanupResourcesFunctionExecutionRole",
                "Arn"
              ]
            },
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IAMLambdaRoleName}"
            }
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 900
      }
    },
    "RAIDSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/raid-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateRAIDSubstack"
    },
    "EBSCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          },
          "VolumeSize": {
            "Ref": "VolumeSize"
          },
          "VolumeType": {
            "Ref": "VolumeType"
          },
          "VolumeIOPS": {
            "Ref": "VolumeIOPS"
          },
          "VolumeThroughput": {
            "Ref": "VolumeThroughput"
          },
          "EBSEncryption": {
            "Ref": "EBSEncryption"
          },
          "EBSKMSKeyId": {
            "Ref": "EBSKMSKeyId"
          },
          "EBSVolumeId": {
            "Ref": "EBSVolumeId"
          },
          "EBSSnapshotId": {
            "Ref": "EBSSnapshotId"
          },
          "NumberOfEBSVol": {
            "Ref": "NumberOfEBSVol"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/ebs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "MasterServerSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "MasterInstanceType": {
            "Ref": "MasterInstanceType"
          },
          "MasterSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "MasterSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "ComputeInstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "MasterSubnetId": {
            "Ref": "MasterSubnetId"
          },
          "MasterCoreCount": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Ref": "Cores"
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    "2",
                    {
                      "Ref": "Cores"
                    }
                  ]
                }
              ]
            ]
          },
          "ComputeCoreCount": {
            "Fn::Select": [
              "1",
              {
                "Ref": "Cores"
              }
            ]
          },
          "RootDevice": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "RootDevice"
            ]
          },
          "RootVolumeSize": {
            "Ref": "MasterRootVolumeSize"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "AttributesTagValue": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "NetworkingTagValue": {
            "Fn::Sub": "EFA=${EFA}"
          },
          "FilesystemTagValue": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                },
                "fsx": {
                  "Fn::If": [
                    "CreateFSXSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "MasterENI": {
            "Ref": "MasterENI"
          },
          "UseMasterPublicIp": {
            "Fn::If": [
              "MasterPublicIp",
              true,
              false
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "IamInstanceProfile": {
            "Ref": "RootInstanceProfile"
          },
          "IamRoleName": {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          },
          "PlacementGroup": {
            "Fn::If": [
              "UseClusterPlacement",
              {
                "Fn::If": [
                  "CreatePlacementGroup",
                  {
                    "Ref": "DynamicPlacementGroup"
                  },
                  {
                    "Ref": "PlacementGroup"
                  }
                ]
              },
              "NONE"
            ]
          },
          "EFA": {
            "Ref": "EFA"
          },
          "BaseOS": {
            "Ref": "BaseOS"
          },
          "OSUser": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "User"
            ]
          },
          "PreInstallScript": {
            "Ref": "PreInstallScript"
          },
          "PreInstallArgs": {
            "Ref": "PreInstallArgs"
          },
          "PostInstallScript": {
            "Ref": "PostInstallScript"
          },
          "PostInstallArgs": {
            "Ref": "PostInstallArgs"
          },
          "RAIDVolIds": {
            "Fn::If": [
              "CreateRAIDSubstack",
              {
                "Fn::GetAtt": [
                  "RAIDSubstack",
                  "Outputs.Volumeids"
                ]
              },
              ""
            ]
          },
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "EFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "FSXId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "EBSVolIds": {
            "Fn::GetAtt": [
              "EBSCfnStack",
              "Outputs.Volumeids"
            ]
          },
          "Scheduler": {
            "Ref": "Scheduler"
          },
          "EncryptedEphemeral": {
            "Ref": "EncryptedEphemeral"
          },
          "EphemeralDir": {
            "Ref": "EphemeralDir"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "ProxyServer": {
            "Ref": "ProxyServer"
          },
          "ClusterDNSDomain": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ClusterDNSDomain"
                ]
              },
              ""
            ]
          },
          "ClusterHostedZone": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ClusterHostedZone"
                ]
              },
              ""
            ]
          },
          "MaxSize": {
            "Ref": "MaxSize"
          },
          "DynamoDBTable": {
            "Ref": "AWS::StackName"
          },
          "SQSQueueName": {
            "Ref": "AWS::StackName"
          },
          "DCVEnabled": {
            "Fn::If": [
              "EnableDCV",
              "master",
              "false"
            ]
          },
          "DCVPort": {
            "Fn::Select": [
              "1",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "DCVOptions"
                  }
                ]
              }
            ]
          },
          "IntelHPCPlatform": {
            "Ref": "IntelHPCPlatform"
          },
          "CWLoggingEnabled": {
            "Fn::GetAtt": [
              "CloudWatchLogsSubstack",
              "Outputs.Enabled"
            ]
          },
          "ExtraJson": {
            "Ref": "ExtraJson"
          },
          "CustomChefCookbook": {
            "Ref": "CustomChefCookbook"
          },
          "AWSDomain": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "ParallelClusterVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "parallelcluster"
            ]
          },
          "CookbookVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "cookbook"
            ]
          },
          "ChefVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "chef"
            ]
          },
          "BerkshelfVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "berkshelf"
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          },
          "DependsOnCustomResources": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::Sub": [
                  "DependsOn${fleetTermination}And${route53cleanup}",
                  {
                    "fleetTermination": {
                      "Ref": "TerminateComputeFleetCustomResource"
                    },
                    "route53cleanup": {
                      "Fn::GetAtt": [
                        "ComputeFleetHITSubstack",
                        "Outputs.CleanupRoute53CustomResource"
                      ]
                    }
                  }
                ]
              },
              ""
            ]
          },
          "HITConfigVersion": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ConfigVersion"
                ]
              },
              ""
            ]
          },
          "UpdateWaiterFunctionArn": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.UpdateWaiterFunctionArn"
                ]
              },
              "NONE"
            ]
          },
          "MasterNetworkInterfacesCount": {
            "Fn::Select": [
              "0",
              {
                "Ref": "NetworkInterfacesCount"
              }
            ]
          },
          "InstanceTypesData": {
            "Ref": "InstanceTypesData"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/master-server-substack-${version}.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "ComputeFleetSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ComputeInstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "ComputeSubnetId": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "ComputeCoreCount": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::Select": [
                    "1",
                    {
                      "Ref": "Cores"
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    "3",
                    {
                      "Ref": "Cores"
                    }
                  ]
                }
              ]
            ]
          },
          "SNSTopic": {
            "Ref": "SNS"
          },
          "RootDevice": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "RootDevice"
            ]
          },
          "RootVolumeSize": {
            "Ref": "ComputeRootVolumeSize"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "AttributesTagValue": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "NetworkingTagValue": {
            "Fn::Sub": "EFA=${EFA}"
          },
          "FilesystemTagValue": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                },
                "fsx": {
                  "Fn::If": [
                    "CreateFSXSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "IamInstanceProfile": {
            "Ref": "RootInstanceProfile"
          },
          "IamRoleName": {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          },
          "PlacementGroup": {
            "Fn::If": [
              "UsePlacementGroup",
              {
                "Fn::If": [
                  "CreatePlacementGroup",
                  {
                    "Ref": "DynamicPlacementGroup"
                  },
                  {
                    "Ref": "PlacementGroup"
                  }
                ]
              },
              "NONE"
            ]
          },
          "EFA": {
            "Ref": "EFA"
          },
          "EFAGDR": {
            "Ref": "EFAGDR"
          },
          "BaseOS": {
            "Ref": "BaseOS"
          },
          "OSUser": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "User"
            ]
          },
          "PreInstallScript": {
            "Ref": "PreInstallScript"
          },
          "PreInstallArgs": {
            "Ref": "PreInstallArgs"
          },
          "PostInstallScript": {
            "Ref": "PostInstallScript"
          },
          "PostInstallArgs": {
            "Ref": "PostInstallArgs"
          },
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "EFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "FSXId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "Scheduler": {
            "Ref": "Scheduler"
          },
          "EncryptedEphemeral": {
            "Ref": "EncryptedEphemeral"
          },
          "EphemeralDir": {
            "Ref": "EphemeralDir"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "ProxyServer": {
            "Ref": "ProxyServer"
          },
          "MaxSize": {
            "Ref": "MaxSize"
          },
          "MinSize": {
            "Ref": "MinSize"
          },
          "DesiredSize": {
            "Ref": "DesiredSize"
          },
          "SQSQueue": {
            "Ref": "SQS"
          },
          "IntelHPCPlatform": {
            "Ref": "IntelHPCPlatform"
          },
          "CWLoggingEnabled": {
            "Fn::GetAtt": [
              "CloudWatchLogsSubstack",
              "Outputs.Enabled"
            ]
          },
          "ExtraJson": {
            "Ref": "ExtraJson"
          },
          "CustomChefCookbook": {
            "Ref": "CustomChefCookbook"
          },
          "AWSDomain": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "ParallelClusterVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "parallelcluster"
            ]
          },
          "CookbookVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "cookbook"
            ]
          },
          "ChefVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "chef"
            ]
          },
          "BerkshelfVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "berkshelf"
            ]
          },
          "ComputeSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "AssociatePublicIpAddress": {
            "Fn::If": [
              "ComputePublicIps",
              true,
              false
            ]
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "SpotPrice": {
            "Ref": "SpotPrice"
          },
          "ScaleDownIdleTime": {
            "Ref": "ScaleDownIdleTime"
          },
          "MasterPrivateDnsName": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateDnsName"
            ]
          },
          "MasterPrivateIP": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateIP"
            ]
          },
          "ComputeNetworkInterfacesCount": {
            "Fn::Select": [
              "1",
              {
                "Ref": "NetworkInterfacesCount"
              }
            ]
          },
          "InstanceTypesData": {
            "Ref": "InstanceTypesData"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/compute-fleet-substack-${version}.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateComputeFleet"
    },
    "ComputeFleetHITSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ComputeSubnetId": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "RootDevice": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "RootDevice"
            ]
          },
          "RootVolumeSize": {
            "Ref": "ComputeRootVolumeSize"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "AttributesTagValue": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "NetworkingTagValue": {
            "Fn::Sub": "EFA=${EFA}"
          },
          "FilesystemTagValue": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                },
                "fsx": {
                  "Fn::If": [
                    "CreateFSXSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "IamInstanceProfile": {
            "Ref": "RootInstanceProfile"
          },
          "BaseOS": {
            "Ref": "BaseOS"
          },
          "OSUser": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "User"
            ]
          },
          "PreInstallScript": {
            "Ref": "PreInstallScript"
          },
          "PreInstallArgs": {
            "Ref": "PreInstallArgs"
          },
          "PostInstallScript": {
            "Ref": "PostInstallScript"
          },
          "PostInstallArgs": {
            "Ref": "PostInstallArgs"
          },
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "EFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "FSXId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "Scheduler": {
            "Ref": "Scheduler"
          },
          "EncryptedEphemeral": {
            "Ref": "EncryptedEphemeral"
          },
          "EphemeralDir": {
            "Ref": "EphemeralDir"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "ProxyServer": {
            "Ref": "ProxyServer"
          },
          "ClusterDNSDomain": {
            "Fn::Sub": [
              "${ClusterName}.pcluster",
              {
                "ClusterName": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "IntelHPCPlatform": {
            "Ref": "IntelHPCPlatform"
          },
          "CWLoggingEnabled": {
            "Fn::GetAtt": [
              "CloudWatchLogsSubstack",
              "Outputs.Enabled"
            ]
          },
          "ExtraJson": {
            "Ref": "ExtraJson"
          },
          "CustomChefCookbook": {
            "Ref": "CustomChefCookbook"
          },
          "AWSDomain": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "ParallelClusterVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "parallelcluster"
            ]
          },
          "CookbookVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "cookbook"
            ]
          },
          "ChefVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "chef"
            ]
          },
          "BerkshelfVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "berkshelf"
            ]
          },
          "ComputeSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "AssociatePublicIpAddress": {
            "Fn::If": [
              "ComputePublicIps",
              true,
              false
            ]
          },
          "VPCId": {
            "Ref": "VPCId"
          },
          "RootRole": {
            "Fn::If": [
              "UseEC2IAMRole",
              "NONE",
              {
                "Ref": "RootRole"
              }
            ]
          },
          "IAMLambdaRoleName": {
            "Ref": "IAMLambdaRoleName"
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${ResourcesS3Bucket}.s3.${AWS::Region}.${s3_url}/${ArtifactS3RootDirectory}/templates/compute-fleet-hit-substack.rendered.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateHITSubstack"
    },
    "CloudWatchDashboardSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "PclusterStackName": {
            "Ref": "AWS::StackName"
          },
          "CWLogGroupName": {
            "Fn::Sub": [
              "/aws/parallelcluster/${cluster_name}",
              {
                "cluster_name": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "MasterInstanceId": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterInstanceID"
            ]
          },
          "MasterPrivateIP": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateIP"
            ]
          },
          "EBSVolumesIds": {
            "Fn::GetAtt": [
              "EBSCfnStack",
              "Outputs.Volumeids"
            ]
          },
          "RAIDVolumesIds": {
            "Fn::If": [
              "CreateRAIDSubstack",
              {
                "Fn::GetAtt": [
                  "RAIDSubstack",
                  "Outputs.Volumeids"
                ]
              },
              "NONE"
            ]
          },
          "EFSFileSystemId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              "NONE"
            ]
          },
          "FSXFileSystemId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              "NONE"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${ResourcesS3Bucket}.s3.${AWS::Region}.${s3_url}/${ArtifactS3RootDirectory}/templates/cw-dashboard-substack.rendered.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterUser": {
      "Description": "Username to login to head node",
      "Value": {
        "Fn::FindInMap": [
          "OSFeatures",
          {
            "Ref": "BaseOS"
          },
          "User"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP Address of the head node",
      "Value": {
        "Fn::GetAtt": [
          "MasterServerSubstack",
          "Outputs.MasterPrivateIP"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the head node",
      "Value": {
        "Fn::GetAtt": [
          "MasterServerSubstack",
          "Outputs.MasterPublicIP"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServerSubstack",
                "Outputs.MasterPrivateIP"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServerSubstack",
                "Outputs.MasterPublicIP"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where AWS ParallelCluster resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      }
    },
    "ArtifactS3RootDirectory": {
      "Description": "Root directory in S3 bucket where cluster artifacts are stored",
      "Value": {
        "Ref": "ArtifactS3RootDirectory"
      }
    },
    "BatchComputeEnvironmentArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.ComputeEnvironmentArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobQueueArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionMnpArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.MNPJobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchUserRole": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.BatchUserRole"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "ASGName": {
      "Value": {
        "Fn::GetAtt": [
          "ComputeFleetSubstack",
          "Outputs.ASGName"
        ]
      },
      "Condition": "CreateComputeFleet"
    },
    "IsHITCluster": {
      "Value": "true",
      "Condition": "CreateHITSubstack"
    },
    "ClusterConfigMetadata": {
      "Value": {
        "Ref": "ClusterConfigMetadata"
      }
    }
  }
}

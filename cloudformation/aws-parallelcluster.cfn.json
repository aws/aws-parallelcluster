{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS ParallelCluster Template. Version: aws-parallelcluster-2.11.8",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances using the default cluster user.",
      "Type": "String",
      "Default": "NONE"
    },
    "MasterInstanceType": {
      "Description": "Head node EC2 instance type",
      "Type": "String",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "ComputeInstanceType": {
      "Description": "ComputeFleet EC2 instance type",
      "Type": "String",
      "Default": "NONE",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "MinSize": {
      "Description": "Initial number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "DesiredSize": {
      "Description": "Desired number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "MaxSize": {
      "Description": "Maximum number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number",
      "Default": 0
    },
    "ComputeSubnetId": {
      "Description": "ID of the Subnet you want to provision the Compute Servers into",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^subnet-[0-9a-z]{8}$|^subnet-[0-9a-z]{17}$)"
    },
    "SpotPrice": {
      "Description": "Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType = \"spot\". When awsbatch is the scheduler, this is spot bid percentage.",
      "Type": "Number",
      "Default": "0"
    },
    "ClusterType": {
      "Description": "Type of cluster to launch. Can either be \"ondemand\" or \"spot\". Choosing \"spot\" will cause the ComputeFleet AutoScaling group to launch EC2 Spot instances. Default value is \"ondemand\".",
      "Type": "String",
      "Default": "ondemand",
      "ConstraintDescription": "Must be a supported cluster type: ondemand, spot",
      "AllowedValues": [
        "ondemand",
        "spot"
      ]
    },
    "ProxyServer": {
      "Description": "hostname and port of HTTP proxy server for cfn-init, boto and yum i.e. proxy.example.com:8080",
      "Type": "String",
      "Default": "NONE"
    },
    "VolumeSize": {
      "Description": "Comma delimited list of size of EBS volume in GB, if creating a new one",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "VolumeType": {
      "Description": "Comma delimited list of type of volume to create either new or from snapshot",
      "Type": "String",
      "Default": "gp2,gp2,gp2,gp2,gp2",
      "ConstraintDescription": "must be a supported volume type: standard, io1, io2, gp2, gp3, st1, sc1",
      "AllowedPattern": "^(NONE|standard|io1|io2|gp2|gp3|st1|sc1)((,|, )(NONE|standard|io1|io2|gp2|gp3|st1|sc1)){4}$"
    },
    "MasterSubnetId": {
      "Description": "ID of the Subnet you want to provision the head node into",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AvailabilityZone": {
      "Description": "Availability Zone the cluster will launch into. THIS IS REQUIRED",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "EBSSnapshotId": {
      "Description": "Comma delimited list of Id of EBS snapshot if using snapshot as source for volume",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})((,|, )(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})){4}$"
    },
    "CustomAMI": {
      "Description": "ID of a Custom AMI, to use instead of published AMI's",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)"
    },
    "VPCId": {
      "Description": "ID of the VPC you want to provision cluster into. Only used with UseVPCBase=false",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AccessFrom": {
      "Description": "Lockdown SSH/HTTP access (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ComputeSubnetCidr": {
      "Description": "CIDR(s) for new backend subnet(s) i.e. 10.0.100.0/24. This is a comma-delimited list and can support multiple CIDR ranges for a multi-AZ cluster. The order and length of this list MUST match the AvailabilityZones parameter.",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "AllowedPattern": "(NONE|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "Default": "NONE"
    },
    "UsePublicIps": {
      "Description": "Boolean flag to use public IP's for instances. If false, the VPC must be correctly setup to use NAT for all traffic.",
      "Type": "String",
      "Default": "true",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeIOPS": {
      "Description": "Comma delimited list of number of IOPS for volume type io1, io2 and gp3. Not used for other volume types.",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "VolumeThroughput": {
      "Description": "Comma delimited list of number of Throughtput for volume type gp3. Not used for other volume types.",
      "Type": "String",
      "Default": "125,125,125,125,125"
    },
    "PreInstallScript": {
      "Description": "Preinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallScript": {
      "Description": "Postinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadResource": {
      "Description": "S3 resource with read access from AWS ParallelCluster nodes",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadWriteResource": {
      "Description": "Addtional policy document to be added to EC2 IAM role created and assigned to all nodes.",
      "Type": "String",
      "Default": "NONE"
    },
    "Placement": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "compute",
      "AllowedValues": [
        "cluster",
        "compute"
      ]
    },
    "PlacementGroup": {
      "Description": "The name of an existing placement group",
      "Type": "String",
      "Default": "NONE"
    },
    "EncryptedEphemeral": {
      "Description": "Boolean flag to encrypt local ephemeral drives. The keys are in-memory and non-recoverable.",
      "Type": "String",
      "Default": "false",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "PreInstallArgs": {
      "Description": "Preinstall script args passed to the preinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallArgs": {
      "Description": "Postinstall script args passed to the postinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "EBSEncryption": {
      "Description": "Comma delimited list of boolean flag to use EBS encryption for /shared volume. (Not to be used for snapshots)",
      "Type": "String",
      "Default": "false,false,false,false,false",
      "ConstraintDescription": "true/false",
      "AllowedPattern": "^(NONE|true|false)((,|, )(NONE|true|false)){4}$"
    },
    "EphemeralDir": {
      "Description": "The path/mountpoint for the ephemeral drive",
      "Type": "String",
      "Default": "/scratch"
    },
    "BaseOS": {
      "Description": "Base OS type for cluster AMI",
      "Type": "String",
      "Default": "alinux2",
      "ConstraintDescription": "must be a supported base OS",
      "AllowedValues": [
        "centos7",
        "alinux2",
        "ubuntu1804",
        "ubuntu2004"
      ]
    },
    "Architecture": {
      "Description": "Architecture to use when selecting default AMIs",
      "Type": "String",
      "Default": "x86_64",
      "ConstraintDescription": "Must be either x86_64 or arm64",
      "AllowedValues": [
        "x86_64",
        "arm64"
      ]
    },
    "Scheduler": {
      "Description": "Cluster scheduler",
      "Type": "String",
      "Default": "slurm",
      "ConstraintDescription": "must be a supported scheduler",
      "AllowedValues": [
        "slurm",
        "awsbatch"
      ]
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String",
      "Default": "/shared"
    },
    "ClusterConfigMetadata": {
      "Description": "Cluster configuration metadata.",
      "Type": "String",
      "Default": "{}"
    },
    "AdditionalSG": {
      "Description": "Additional VPC security group to be added to instances. Defaults to NONE",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "CustomChefCookbook": {
      "Description": "URL of custom cookbook that will override the default. This will be unpacked and then dependencies resolved with Berkshelf.",
      "Type": "String",
      "Default": "NONE"
    },
    "ExtraJson": {
      "Description": "Extra json to be added to Chef dna.json",
      "Type": "String",
      "Default": "{}"
    },
    "EBSKMSKeyId": {
      "Description": "Comma delimited list of KMS ARN for customer created master key, will be used for EBS encryption",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "MasterRootVolumeSize": {
      "Description": "Size of head node EBS root volume in GB",
      "Type": "Number",
      "Default": "35",
      "MinValue": "35"
    },
    "ComputeRootVolumeSize": {
      "Description": "Size of ComputeFleet EBS root volume in GB",
      "Type": "Number",
      "Default": "35",
      "MinValue": "35"
    },
    "EC2IAMRoleName": {
      "Description": "Existing EC2 IAM role name",
      "Type": "String",
      "Default": "NONE"
    },
    "EC2IAMPolicies": {
      "Description": "Attach additional IAM Policies to the created Root Role",
      "Type": "CommaDelimitedList",
      "Default": "NONE"
    },
    "IAMLambdaRoleName": {
      "Description": "Existing IAM role name for Lambda functions",
      "Type": "String",
      "Default": "NONE"
    },
    "VPCSecurityGroupId": {
      "Description": "Existing VPC security group Id",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "EBSVolumeId": {
      "Description": "Comma delimited list of existing EBS volume Id",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})((,|, )(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})){4}$"
    },
    "AdditionalCfnTemplate": {
      "Description": "A second CloudFormation template to launch with the cluster",
      "Type": "String",
      "Default": "NONE"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 bucket where resources needed by the stack are located. The bucket gets deleted on stack deletion if it is not user-provided.",
      "Type": "String"
    },
    "ArtifactS3RootDirectory": {
      "Description": "Root directory in S3 bucket where cluster artifacts are stored, i.e. cluster artifacts would be under {ResourcesS3Bucket}/{ArtifactS3RootDirectory}.",
      "Type": "String"
    },
    "RemoveBucketOnDeletion": {
      "Description": "Parameter to control if bucket is removed on cluster deletion. pcluster created buckets are alway removed, user provided buckets are kept.",
      "Type": "String"
    },
    "RAIDOptions": {
      "Description": "Comma Separated List of RAID related options, 9 parameters in total, [shared_dir,raid_type,num_of_raid_volumes,volume_type,volume_size,volume_iops,encrypted,ebs_kms_key_id,volume_throughput]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|.+)(,|, )(NONE|\\d)(,|, )(NONE|\\d)(,|, )(NONE|standard|io1|io2|gp2|gp3|st1|sc1)(,|, )(NONE|\\d+)(,|, )(NONE|\\d+)(,|, )(NONE|true|false)(,|, )(NONE|.+)(,|, )(NONE|\\d+)$"
    },
    "NumberOfEBSVol": {
      "Description": "Number of EBS Volumes the user requested, up to 5",
      "Type": "Number",
      "Default": "1"
    },
    "FSXOptions": {
      "Description": "Comma separated list of FSx related options, 20 parameters in total, [shared_dir,fsx_fs_id,storage_capacity,fsx_kms_key_id,imported_file_chunk_size,export_path,import_path,weekly_maintenance_start_time,deployment_type,per_unit_storage_throughput,daily_automatic_backup_start_time,automatic_backup_retention_days,copy_tags_to_backups,fsx_backup_id,auto_import_policy,storage_type,drive_cache_type,existing_mount_name,existing_dns_name,data_compression_type]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "EFSOptions": {
      "Description": "Comma separated list of EFS related options, 9 parameters in total, [shared_dir,efs_fs_id,performance_mode,efs_kms_key_id,provisioned_throughput,encrypted,throughput_mode,exists_valid_head_node_mt,exists_valid_compute_mt]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "Cores": {
      "Description": "Comma seperated string of [head node cores], [compute cores], [head node instance type supports disabling hyperthreading via CPU options], [compute instance type supports disabling hyperthreading via CPU options].",
      "Type": "CommaDelimitedList",
      "Default": "NONE,NONE,NONE,NONE"
    },
    "EFA": {
      "Description": "Enable EFA on the compute nodes, enable_efa = compute",
      "Type": "String",
      "Default": "NONE"
    },
    "DCVOptions": {
      "Description": "Comma separated list of NICE DCV related options, 3 parameters in total, [enabled,port,access_from]",
      "Type": "String",
      "Default": "NONE,NONE,NONE"
    },
    "IntelHPCPlatform": {
      "Description": "Enable Intel HPC Platform packages.",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "CWLogOptions": {
      "Description": "Comma separated list of CloudWatch logging, 2 parameters in total, [enabled, retention_days]",
      "Type": "String",
      "Default": "true,14"
    },
    "NetworkInterfacesCount": {
      "Description": "Comma separated string of [head node network interfaces], [compute network interfaces].",
      "Type": "CommaDelimitedList",
      "Default": "1,1"
    },
    "InstanceTypesData": {
      "Description": "Json string with information about instance types, as returned from EC2 describe-instance-types",
      "Type": "String",
      "Default": "{}"
    }
  },
  "Conditions": {
    "CreateEFSSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "EFSOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateRAIDSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "NONE",
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "RAIDOptions"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "CreateFSXSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "FSXOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseSpotPrice": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0"
          ]
        }
      ]
    },
    "CreateComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::Or": [
        {
          "Fn::And": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetId"
                },
                "NONE"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            {
              "Ref": "MasterSubnetId"
            }
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAMI"
            },
            "NONE"
          ]
        }
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIps"
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "UsePublicIps"
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "Placement"
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadWriteResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSG"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EC2IAMRoleName"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMPolicies": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "EC2IAMPolicies"
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateEC2IAMRole": {
      "Fn::Equals": [
        {
          "Ref": "EC2IAMRoleName"
        },
        "NONE"
      ]
    },
    "CreateIAMLambdaRole": {
      "Fn::Equals": [
        {
          "Ref": "IAMLambdaRoleName"
        },
        "NONE"
      ]
    },
    "UseExistingSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCSecurityGroupId"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateSecurityGroups": {
      "Fn::Equals": [
        {
          "Ref": "VPCSecurityGroupId"
        },
        "NONE"
      ]
    },
    "CreateSubStack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalCfnTemplate"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreatePlacementGroup": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "DYNAMIC"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        },
        {
          "Fn::Not": [
            {
              "Condition": "CreateHITSubstack"
            }
          ]
        }
      ]
    },
    "CreateHITSubstack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "slurm"
      ]
    },
    "CreateAWSBatchStack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "awsbatch"
      ]
    },
    "EnableDCV": {
      "Fn::Equals": [
        {
          "Fn::Select": [
            "0",
            {
              "Fn::Split": [
                ",",
                {
                  "Ref": "DCVOptions"
                }
              ]
            }
          ]
        },
        "master"
      ]
    },
    "UseArmAMIs": {
      "Fn::Equals": [
        {
          "Ref": "Architecture"
        },
        "arm64"
      ]
    },
    "UseProvidedResourcesS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "RemoveBucketOnDeletion"
        },
        "False"
      ]
    }
  },
  "Mappings": {
    "AWSRegionOS2AMIarm64": {
      "af-south-1": {
        "alinux2": "ami-0e1732486a055367c",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-057de8a76884a5460",
        "ubuntu2004": "ami-0d539e85a10e1dad6"
      },
      "ap-east-1": {
        "alinux2": "ami-0cb0da4f6f2684923",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0c6c85eba32a68592",
        "ubuntu2004": "ami-0349a40b38f579513"
      },
      "ap-northeast-1": {
        "alinux2": "ami-08fe6a4b7df2da29c",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-004746da8948e2244",
        "ubuntu2004": "ami-05ec952c256022bf1"
      },
      "ap-northeast-2": {
        "alinux2": "ami-0fe97a69392b67cce",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0946de536e49d0aee",
        "ubuntu2004": "ami-03cf15a1366271256"
      },
      "ap-northeast-3": {
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED",
        "ubuntu2004": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux2": "ami-072d7e0abe0d45fc5",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0c4cc39bb0b4ba4c4",
        "ubuntu2004": "ami-0e05b15d6d02b386a"
      },
      "ap-southeast-1": {
        "alinux2": "ami-0d4f32544d4c60a17",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0e5f2bb58fcd00cea",
        "ubuntu2004": "ami-003090c2fa6bbd131"
      },
      "ap-southeast-2": {
        "alinux2": "ami-08ac0154339a3011d",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0388537de643d10a3",
        "ubuntu2004": "ami-089303b3a178f6c0d"
      },
      "ca-central-1": {
        "alinux2": "ami-038057da8131253fb",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0092520ff9fe18321",
        "ubuntu2004": "ami-0a3cdb8babd71a8a6"
      },
      "cn-north-1": {
        "alinux2": "ami-045327af1211f706d",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0d85be78b92b1d0e7",
        "ubuntu2004": "ami-00f4bedaba7b7df64"
      },
      "cn-northwest-1": {
        "alinux2": "ami-0b9fdb802fea2b72f",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-09bcaa02ab511a00b",
        "ubuntu2004": "ami-04c70992e9f836eae"
      },
      "eu-central-1": {
        "alinux2": "ami-00b75d41545128afb",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-015164e9e809ba274",
        "ubuntu2004": "ami-0cb21210531f33fca"
      },
      "eu-north-1": {
        "alinux2": "ami-028510c5f2d1c5666",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-037dd293065b8be29",
        "ubuntu2004": "ami-0d9092b9954ca5d05"
      },
      "eu-south-1": {
        "alinux2": "ami-0cffeee3332bce326",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-07065a6cc212f5bc0",
        "ubuntu2004": "ami-0dcee5435499d6490"
      },
      "eu-west-1": {
        "alinux2": "ami-0f7afd86f9d4150a2",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-06104fac9df81080c",
        "ubuntu2004": "ami-054245c674ec561ae"
      },
      "eu-west-2": {
        "alinux2": "ami-09742a79c6e9b0a3b",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0398fa6308cde1faa",
        "ubuntu2004": "ami-00bc7d9bf3b482d89"
      },
      "eu-west-3": {
        "alinux2": "ami-0892e6fca5dc70e81",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0225f3dd9906738f1",
        "ubuntu2004": "ami-01f8d4b5cafe6e816"
      },
      "me-south-1": {
        "alinux2": "ami-0b544bacb34fde137",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0b209acb2d82048d9",
        "ubuntu2004": "ami-09f82ed045a477d13"
      },
      "sa-east-1": {
        "alinux2": "ami-0704c589d03879f2c",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-018b67e207010cf31",
        "ubuntu2004": "ami-0eb4bc208ae5f7563"
      },
      "us-east-1": {
        "alinux2": "ami-06fca9052756a8d4f",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0dee947669aa0bfaa",
        "ubuntu2004": "ami-0a0eb2c39d67494a5"
      },
      "us-east-2": {
        "alinux2": "ami-0b5bb46aa1cbb4fe5",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-08efaa4fc2ff8de07",
        "ubuntu2004": "ami-09f956bc7ff7949e5"
      },
      "us-gov-east-1": {
        "alinux2": "ami-0f682a897f428296a",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0337822dcce91f4aa",
        "ubuntu2004": "ami-02be616ebcafdd0dd"
      },
      "us-gov-west-1": {
        "alinux2": "ami-08b73b25951d64293",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0b2cf2802d1b78f30",
        "ubuntu2004": "ami-0a1fff9fde3e17efc"
      },
      "us-west-1": {
        "alinux2": "ami-00bd5cdbf45b25891",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0baf6864071bc1a36",
        "ubuntu2004": "ami-0a181ee2be5c8e63b"
      },
      "us-west-2": {
        "alinux2": "ami-037413b7c36d867ae",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-05b4dd2b02664a544",
        "ubuntu2004": "ami-003ecf9bbebc818c8"
      }
    },
    "AWSRegionOS2AMIx86": {
      "af-south-1": {
        "alinux2": "ami-09723f9246b83cbd4",
        "centos7": "ami-0974748ef51878e66",
        "ubuntu1804": "ami-08325c8a9f371045f",
        "ubuntu2004": "ami-07f755b7f86ccff9a"
      },
      "ap-east-1": {
        "alinux2": "ami-0b6d8f7bea20df884",
        "centos7": "ami-0527b3c010b072fa0",
        "ubuntu1804": "ami-0aaacd118ea2eba1b",
        "ubuntu2004": "ami-02aa72f33498de412"
      },
      "ap-northeast-1": {
        "alinux2": "ami-03cc9f34d086944e8",
        "centos7": "ami-084a3a017a393f317",
        "ubuntu1804": "ami-00b21acbc46f68cf1",
        "ubuntu2004": "ami-0d3188de18578ba9a"
      },
      "ap-northeast-2": {
        "alinux2": "ami-0bc40b626929eb6c4",
        "centos7": "ami-0678a15f734b1a5c2",
        "ubuntu1804": "ami-042da98b9da8bf8e3",
        "ubuntu2004": "ami-0174fc82e7aeb93fe"
      },
      "ap-northeast-3": {
        "alinux2": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED",
        "ubuntu2004": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux2": "ami-01bbac10fd20905ea",
        "centos7": "ami-00f9531465ec8a112",
        "ubuntu1804": "ami-0015cd86053d1956a",
        "ubuntu2004": "ami-007210cfb0f2ac832"
      },
      "ap-southeast-1": {
        "alinux2": "ami-08214dcea431f2880",
        "centos7": "ami-006fada10c492cdb1",
        "ubuntu1804": "ami-07745260e0519d488",
        "ubuntu2004": "ami-06359701d48fcca4e"
      },
      "ap-southeast-2": {
        "alinux2": "ami-0b6c9cce51a38331b",
        "centos7": "ami-0d0d870ecbfda7d7a",
        "ubuntu1804": "ami-081c524916459af12",
        "ubuntu2004": "ami-0a2101db6c4aa6785"
      },
      "ca-central-1": {
        "alinux2": "ami-0ce86638a3db0b02f",
        "centos7": "ami-0992e9e27c4c60bf1",
        "ubuntu1804": "ami-0bbd8ec233bd5def5",
        "ubuntu2004": "ami-0dc454aef29f1a6dc"
      },
      "cn-north-1": {
        "alinux2": "ami-004872e5929e6713f",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0f3ce487606fb8283",
        "ubuntu2004": "ami-0050c9bb976aef862"
      },
      "cn-northwest-1": {
        "alinux2": "ami-007bbed296a44627b",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0b696e4f5d4ee9820",
        "ubuntu2004": "ami-031bd96985f1696c5"
      },
      "eu-central-1": {
        "alinux2": "ami-098eda3d212bd8859",
        "centos7": "ami-0fc04650c254b8aa5",
        "ubuntu1804": "ami-0e6299f16fc40d694",
        "ubuntu2004": "ami-08f6a9b906694eaee"
      },
      "eu-north-1": {
        "alinux2": "ami-02d75886c4f341afa",
        "centos7": "ami-0ca7c73260c1a73eb",
        "ubuntu1804": "ami-00c4be663eaf3031d",
        "ubuntu2004": "ami-0e38e5577f7296be7"
      },
      "eu-south-1": {
        "alinux2": "ami-05de8d0b874252b30",
        "centos7": "ami-0c8cf93deb4135699",
        "ubuntu1804": "ami-062cb508942efc18e",
        "ubuntu2004": "ami-01724d3afaf5423f5"
      },
      "eu-west-1": {
        "alinux2": "ami-08e65ca779cdef1ed",
        "centos7": "ami-089afcd4b3c523c42",
        "ubuntu1804": "ami-069edc03534cd40e5",
        "ubuntu2004": "ami-0021dbee6532b6b28"
      },
      "eu-west-2": {
        "alinux2": "ami-0de57d1e2a075381f",
        "centos7": "ami-0aba35f17c343b1bb",
        "ubuntu1804": "ami-0173487cfc49fe57a",
        "ubuntu2004": "ami-0cf35b7532071f698"
      },
      "eu-west-3": {
        "alinux2": "ami-0ee000b268b55b592",
        "centos7": "ami-0cd78eed39863ebcc",
        "ubuntu1804": "ami-0d24dc6e73192c8af",
        "ubuntu2004": "ami-0f37e523233f4fff2"
      },
      "me-south-1": {
        "alinux2": "ami-06124a3a524a8a03a",
        "centos7": "ami-0a445b92c5db55ddc",
        "ubuntu1804": "ami-0f5e29954e9573724",
        "ubuntu2004": "ami-0326aeebde57ab225"
      },
      "sa-east-1": {
        "alinux2": "ami-084bb499bd6603bfe",
        "centos7": "ami-0822c6351308daf7a",
        "ubuntu1804": "ami-0dd43a463e11a5124",
        "ubuntu2004": "ami-03c2a6e86aaccb55a"
      },
      "us-east-1": {
        "alinux2": "ami-04fdccb8febb61334",
        "centos7": "ami-0b6d3c7603a807bbe",
        "ubuntu1804": "ami-0d8972e7ca8787f56",
        "ubuntu2004": "ami-01d9a3a5e233388c5"
      },
      "us-east-2": {
        "alinux2": "ami-014789009ae67e5b9",
        "centos7": "ami-06e00c6de38f71096",
        "ubuntu1804": "ami-03a2861629f0e7a6f",
        "ubuntu2004": "ami-01448aa1fedd90bbe"
      },
      "us-gov-east-1": {
        "alinux2": "ami-064d1bb1925930896",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-0e8b6cfd39059457f",
        "ubuntu2004": "ami-00a106286754de119"
      },
      "us-gov-west-1": {
        "alinux2": "ami-0f2526fd6107f6110",
        "centos7": "UNSUPPORTED",
        "ubuntu1804": "ami-079ccd2d7493e1523",
        "ubuntu2004": "ami-09f2a99ae7732ce23"
      },
      "us-west-1": {
        "alinux2": "ami-0c57956c4072e02d0",
        "centos7": "ami-03aeb034f5bc0694f",
        "ubuntu1804": "ami-01dd3a8cd7a09c97f",
        "ubuntu2004": "ami-095a20cccb382c6a9"
      },
      "us-west-2": {
        "alinux2": "ami-09ad8a472f1da0247",
        "centos7": "ami-08a504f78ca0e88c6",
        "ubuntu1804": "ami-093a30dd310773a58",
        "ubuntu2004": "ami-0c9486c7712b3756e"
      }
    },
    "OSFeatures": {
      "centos7": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "alinux2": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "ubuntu1804": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      },
      "ubuntu2004": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      }
    },
    "PackagesVersions": {
      "default": {
        "parallelcluster": "2.11.8",
        "cookbook": "aws-parallelcluster-cookbook-2.11.8",
        "chef": "17.2.29",
        "berkshelf": "7.0.10",
        "ami": "dev"
      }
    },
    "Partition2Url": {
      "aws": {
        "url": "amazonaws.com"
      },
      "aws-us-gov": {
        "url": "amazonaws.com"
      },
      "aws-cn": {
        "url": "amazonaws.com.cn"
      }
    }
  },
  "Resources": {
    "EFSSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "MasterSubnetId": {
            "Ref": "MasterSubnetId"
          },
          "ComputeSubnetId": {
            "Ref": "ComputeSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/efs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateEFSSubstack"
    },
    "CloudWatchLogsSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "CWLogOptions": {
            "Ref": "CWLogOptions"
          },
          "CWLogGroupName": {
            "Fn::Sub": [
              "/aws/parallelcluster/${cluster_name}",
              {
                "cluster_name": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "CreateHITSubstack": {
            "Fn::If": [
              "CreateHITSubstack",
              "true",
              "false"
            ]
          },
          "CreateAWSBatchLogGroups": {
            "Fn::If": [
              "CreateAWSBatchStack",
              "true",
              "false"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/cw-logs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "FSXSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "ComputeSecurityGroupIngress": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroupIngress"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "SubnetId": {
            "Ref": "MasterSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/fsx-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateFSXSubstack"
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": {
          "Fn::If": [
            "UseEC2IAMPolicies",
            {
              "Ref": "EC2IAMPolicies"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": [
                      "ec2.${s3_url}",
                      {
                        "s3_url": {
                          "Fn::FindInMap": [
                            "Partition2Url",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "url"
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Condition": "CreateEC2IAMRole"
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          }
        ]
      }
    },
    "ParallelClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:DescribeVolumes",
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceTypes"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "Cloudformation",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/parallelcluster-*/*"
                }
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}"
                }
              ]
            },
            {
              "Sid": "S3GetObj",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${AWS::Region}-aws-parallelcluster/*"
                }
              ]
            },
            {
              "Sid": "S3PutObj",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/${ArtifactS3RootDirectory}/batch/*"
                }
              ]
            },
            {
              "Sid": "FSx",
              "Action": [
                "fsx:DescribeFileSystems"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "BatchJobPassRole",
              "Action": [
                "iam:PassRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster-*"
                }
              ]
            },
            {
              "Sid": "DcvLicense",
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole"
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy"
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadWriteResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy"
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp"
    },
    "ComputeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "CidrBlock": {
          "Ref": "ComputeSubnetCidr"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ]
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "ComputeSubnet"
        },
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the head node",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "AccessFrom"
            }
          },
          {
            "Fn::If": [
              "EnableDCV",
              {
                "IpProtocol": "tcp",
                "FromPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "ToPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "CidrIp": {
                  "Fn::Select": [
                    "2",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": 0,
            "ToPort": 65535
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "DestinationSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupNormalEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "DependsOn": "ComputeSecurityGroupEgress",
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS ParallelCluster head node interface",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": false,
        "GroupSet": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      }
    },
    "AdditionalCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "AdditionalCfnTemplate"
        }
      },
      "Condition": "CreateSubStack"
    },
    "AWSBatchStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "CleanupResourcesS3BucketCustomResource",
        "CloudWatchLogsSubstack"
      ],
      "Properties": {
        "Parameters": {
          "AttributeTags": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "S3Url": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "FileSystemTags": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "EFSSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "EFSOptions"
                  }
                ]
              }
            ]
          },
          "EFSFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "MinvCpus": {
            "Ref": "MinSize"
          },
          "DesiredvCpus": {
            "Ref": "DesiredSize"
          },
          "MaxvCpus": {
            "Ref": "MaxSize"
          },
          "InstanceTypes": {
            "Ref": "ComputeInstanceType"
          },
          "Subnet": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "OS": {
            "Ref": "BaseOS"
          },
          "ClusterName": {
            "Ref": "AWS::StackName"
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SpotBidPercentage": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "Ref": "SpotPrice"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "RAIDSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "RAIDOptions"
                  }
                ]
              }
            ]
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "Architecture": {
            "Ref": "Architecture"
          },
          "MasterPrivateIP": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateIP"
            ]
          },
          "IAMLambdaRoleName": {
            "Ref": "IAMLambdaRoleName"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/batch-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateAWSBatchStack"
    },
    "AssociateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp"
    },
    "DynamicPlacementGroup": {
      "Type": "AWS::EC2::PlacementGroup",
      "Properties": {
        "Strategy": "cluster"
      },
      "Condition": "CreatePlacementGroup"
    },
    "CleanupResourcesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                  },
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": {
                    "Fn::If": [
                      "UseProvidedResourcesS3Bucket",
                      [
                        "s3:DeleteObject",
                        "s3:DeleteObjectVersion",
                        "s3:ListBucket",
                        "s3:ListBucketVersions"
                      ],
                      [
                        "s3:DeleteBucket",
                        "s3:DeleteObject",
                        "s3:DeleteObjectVersion",
                        "s3:ListBucket",
                        "s3:ListBucketVersions"
                      ]
                    ]
                  },
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/${ArtifactS3RootDirectory}/*"
                    }
                  ],
                  "Sid": "S3BucketPolicy"
                },
                {
                  "Fn::If": [
                    "CreateHITSubstack",
                    {
                      "Sid": "DescribeInstances",
                      "Effect": "Allow",
                      "Action": [
                        "ec2:DescribeInstances"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "CreateHITSubstack",
                    {
                      "Sid": "FleetTerminatePolicy",
                      "Effect": "Allow",
                      "Action": [
                        "ec2:TerminateInstances"
                      ],
                      "Resource": "*",
                      "Condition": {
                        "StringEquals": {
                          "ec2:ResourceTag/Application": {
                            "Ref": "AWS::StackName"
                          }
                        }
                      }
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      },
      "Condition": "CreateIAMLambdaRole"
    },
    "CleanupResourcesS3BucketCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ResourcesS3Bucket": {
          "Ref": "ResourcesS3Bucket"
        },
        "ArtifactS3RootDirectory": {
          "Ref": "ArtifactS3RootDirectory"
        },
        "RemoveBucketOnDeletion": {
          "Ref": "RemoveBucketOnDeletion"
        },
        "Action": "DELETE_S3_ARTIFACTS",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      }
    },
    "TerminateComputeFleetCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "StackName": {
          "Ref": "AWS::StackName"
        },
        "Action": "TERMINATE_EC2_INSTANCES",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CloudWatchLogsSubstack",
        "ComputeFleetHITSubstack"
      ],
      "Condition": "CreateHITSubstack"
    },
    "CleanupResourcesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": [
            "pcluster-CleanupResources-${StackId}",
            {
              "StackId": {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": {
            "Fn::Sub": "${ArtifactS3RootDirectory}/custom_resources_code/artifacts.zip"
          }
        },
        "Handler": "cleanup_resources.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::If": [
            "CreateIAMLambdaRole",
            {
              "Fn::GetAtt": [
                "CleanupResourcesFunctionExecutionRole",
                "Arn"
              ]
            },
            {
              "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IAMLambdaRoleName}"
            }
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 900
      }
    },
    "RAIDSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/raid-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateRAIDSubstack"
    },
    "EBSCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          },
          "VolumeSize": {
            "Ref": "VolumeSize"
          },
          "VolumeType": {
            "Ref": "VolumeType"
          },
          "VolumeIOPS": {
            "Ref": "VolumeIOPS"
          },
          "VolumeThroughput": {
            "Ref": "VolumeThroughput"
          },
          "EBSEncryption": {
            "Ref": "EBSEncryption"
          },
          "EBSKMSKeyId": {
            "Ref": "EBSKMSKeyId"
          },
          "EBSVolumeId": {
            "Ref": "EBSVolumeId"
          },
          "EBSSnapshotId": {
            "Ref": "EBSSnapshotId"
          },
          "NumberOfEBSVol": {
            "Ref": "NumberOfEBSVol"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/ebs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "MasterServerSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "MasterInstanceType": {
            "Ref": "MasterInstanceType"
          },
          "MasterSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "MasterSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "ComputeInstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "MasterSubnetId": {
            "Ref": "MasterSubnetId"
          },
          "MasterCoreCount": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Ref": "Cores"
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    "2",
                    {
                      "Ref": "Cores"
                    }
                  ]
                }
              ]
            ]
          },
          "ComputeCoreCount": {
            "Fn::Select": [
              "1",
              {
                "Ref": "Cores"
              }
            ]
          },
          "RootDevice": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "RootDevice"
            ]
          },
          "RootVolumeSize": {
            "Ref": "MasterRootVolumeSize"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "AttributesTagValue": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "NetworkingTagValue": {
            "Fn::Sub": "EFA=${EFA}"
          },
          "FilesystemTagValue": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                },
                "fsx": {
                  "Fn::If": [
                    "CreateFSXSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "MasterENI": {
            "Ref": "MasterENI"
          },
          "UseMasterPublicIp": {
            "Fn::If": [
              "MasterPublicIp",
              true,
              false
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "IamInstanceProfile": {
            "Ref": "RootInstanceProfile"
          },
          "IamRoleName": {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          },
          "PlacementGroup": {
            "Fn::If": [
              "UseClusterPlacement",
              {
                "Fn::If": [
                  "CreatePlacementGroup",
                  {
                    "Ref": "DynamicPlacementGroup"
                  },
                  {
                    "Ref": "PlacementGroup"
                  }
                ]
              },
              "NONE"
            ]
          },
          "EFA": {
            "Ref": "EFA"
          },
          "BaseOS": {
            "Ref": "BaseOS"
          },
          "OSUser": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "User"
            ]
          },
          "PreInstallScript": {
            "Ref": "PreInstallScript"
          },
          "PreInstallArgs": {
            "Ref": "PreInstallArgs"
          },
          "PostInstallScript": {
            "Ref": "PostInstallScript"
          },
          "PostInstallArgs": {
            "Ref": "PostInstallArgs"
          },
          "RAIDVolIds": {
            "Fn::If": [
              "CreateRAIDSubstack",
              {
                "Fn::GetAtt": [
                  "RAIDSubstack",
                  "Outputs.Volumeids"
                ]
              },
              ""
            ]
          },
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "EFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "FSXId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "FSXMountName": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.MountName"
                ]
              },
              ""
            ]
          },
          "FSXDNSName": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.DNSName"
                ]
              },
              ""
            ]
          },
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "EBSVolIds": {
            "Fn::GetAtt": [
              "EBSCfnStack",
              "Outputs.Volumeids"
            ]
          },
          "Scheduler": {
            "Ref": "Scheduler"
          },
          "EncryptedEphemeral": {
            "Ref": "EncryptedEphemeral"
          },
          "EphemeralDir": {
            "Ref": "EphemeralDir"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "ProxyServer": {
            "Ref": "ProxyServer"
          },
          "ClusterDNSDomain": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ClusterDNSDomain"
                ]
              },
              ""
            ]
          },
          "ClusterHostedZone": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ClusterHostedZone"
                ]
              },
              ""
            ]
          },
          "MaxSize": {
            "Ref": "MaxSize"
          },
          "DynamoDBTable": {
            "Ref": "AWS::StackName"
          },
          "DCVEnabled": {
            "Fn::If": [
              "EnableDCV",
              "master",
              "false"
            ]
          },
          "DCVPort": {
            "Fn::Select": [
              "1",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "DCVOptions"
                  }
                ]
              }
            ]
          },
          "IntelHPCPlatform": {
            "Ref": "IntelHPCPlatform"
          },
          "CWLoggingEnabled": {
            "Fn::GetAtt": [
              "CloudWatchLogsSubstack",
              "Outputs.Enabled"
            ]
          },
          "ExtraJson": {
            "Ref": "ExtraJson"
          },
          "CustomChefCookbook": {
            "Ref": "CustomChefCookbook"
          },
          "AWSDomain": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "ParallelClusterVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "parallelcluster"
            ]
          },
          "CookbookVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "cookbook"
            ]
          },
          "ChefVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "chef"
            ]
          },
          "BerkshelfVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "berkshelf"
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          },
          "DependsOnCustomResources": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::Sub": [
                  "DependsOn${fleetTermination}And${route53cleanup}",
                  {
                    "fleetTermination": {
                      "Ref": "TerminateComputeFleetCustomResource"
                    },
                    "route53cleanup": {
                      "Fn::GetAtt": [
                        "ComputeFleetHITSubstack",
                        "Outputs.CleanupRoute53CustomResource"
                      ]
                    }
                  }
                ]
              },
              ""
            ]
          },
          "HITConfigVersion": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.ConfigVersion"
                ]
              },
              ""
            ]
          },
          "UpdateWaiterFunctionArn": {
            "Fn::If": [
              "CreateHITSubstack",
              {
                "Fn::GetAtt": [
                  "ComputeFleetHITSubstack",
                  "Outputs.UpdateWaiterFunctionArn"
                ]
              },
              "NONE"
            ]
          },
          "MasterNetworkInterfacesCount": {
            "Fn::Select": [
              "0",
              {
                "Ref": "NetworkInterfacesCount"
              }
            ]
          },
          "InstanceTypesData": {
            "Ref": "InstanceTypesData"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/master-server-substack-${version}.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "ComputeFleetHITSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ComputeSubnetId": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "RootDevice": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "RootDevice"
            ]
          },
          "RootVolumeSize": {
            "Ref": "ComputeRootVolumeSize"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "AttributesTagValue": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "NetworkingTagValue": {
            "Fn::Sub": "EFA=${EFA}"
          },
          "FilesystemTagValue": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                },
                "fsx": {
                  "Fn::If": [
                    "CreateFSXSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "IamInstanceProfile": {
            "Ref": "RootInstanceProfile"
          },
          "BaseOS": {
            "Ref": "BaseOS"
          },
          "OSUser": {
            "Fn::FindInMap": [
              "OSFeatures",
              {
                "Ref": "BaseOS"
              },
              "User"
            ]
          },
          "PreInstallScript": {
            "Ref": "PreInstallScript"
          },
          "PreInstallArgs": {
            "Ref": "PreInstallArgs"
          },
          "PostInstallScript": {
            "Ref": "PostInstallScript"
          },
          "PostInstallArgs": {
            "Ref": "PostInstallArgs"
          },
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "EFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "FSXId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              ""
            ]
          },
          "FSXMountName": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.MountName"
                ]
              },
              ""
            ]
          },
          "FSXDNSName": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.DNSName"
                ]
              },
              ""
            ]
          },
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "Scheduler": {
            "Ref": "Scheduler"
          },
          "EncryptedEphemeral": {
            "Ref": "EncryptedEphemeral"
          },
          "EphemeralDir": {
            "Ref": "EphemeralDir"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "ProxyServer": {
            "Ref": "ProxyServer"
          },
          "ClusterDNSDomain": {
            "Fn::Sub": [
              "${ClusterName}.pcluster",
              {
                "ClusterName": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "IntelHPCPlatform": {
            "Ref": "IntelHPCPlatform"
          },
          "CWLoggingEnabled": {
            "Fn::GetAtt": [
              "CloudWatchLogsSubstack",
              "Outputs.Enabled"
            ]
          },
          "ExtraJson": {
            "Ref": "ExtraJson"
          },
          "CustomChefCookbook": {
            "Ref": "CustomChefCookbook"
          },
          "AWSDomain": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "ParallelClusterVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "parallelcluster"
            ]
          },
          "CookbookVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "cookbook"
            ]
          },
          "ChefVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "chef"
            ]
          },
          "BerkshelfVersion": {
            "Fn::FindInMap": [
              "PackagesVersions",
              "default",
              "berkshelf"
            ]
          },
          "ComputeSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "AssociatePublicIpAddress": {
            "Fn::If": [
              "ComputePublicIps",
              true,
              false
            ]
          },
          "VPCId": {
            "Ref": "VPCId"
          },
          "RootRole": {
            "Fn::If": [
              "UseEC2IAMRole",
              "NONE",
              {
                "Ref": "RootRole"
              }
            ]
          },
          "IAMLambdaRoleName": {
            "Ref": "IAMLambdaRoleName"
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "ArtifactS3RootDirectory": {
            "Ref": "ArtifactS3RootDirectory"
          },
          "UseProvidedResourcesS3Bucket": {
            "Fn::If": [
              "UseProvidedResourcesS3Bucket",
              "true",
              "false"
            ]
          },
          "CreateEC2IAMRole": {
            "Fn::If": [
              "CreateEC2IAMRole",
              "true",
              "false"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${ResourcesS3Bucket}.s3.${AWS::Region}.${s3_url}/${ArtifactS3RootDirectory}/templates/compute-fleet-hit-substack.rendered.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateHITSubstack"
    },
    "CloudWatchDashboardSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "PclusterStackName": {
            "Ref": "AWS::StackName"
          },
          "CWLogGroupName": {
            "Fn::Sub": [
              "/aws/parallelcluster/${cluster_name}",
              {
                "cluster_name": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "MasterInstanceId": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterInstanceID"
            ]
          },
          "MasterPrivateIP": {
            "Fn::GetAtt": [
              "MasterServerSubstack",
              "Outputs.MasterPrivateIP"
            ]
          },
          "EBSVolumesIds": {
            "Fn::GetAtt": [
              "EBSCfnStack",
              "Outputs.Volumeids"
            ]
          },
          "RAIDVolumesIds": {
            "Fn::If": [
              "CreateRAIDSubstack",
              {
                "Fn::GetAtt": [
                  "RAIDSubstack",
                  "Outputs.Volumeids"
                ]
              },
              "NONE"
            ]
          },
          "EFSFileSystemId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              "NONE"
            ]
          },
          "FSXFileSystemId": {
            "Fn::If": [
              "CreateFSXSubstack",
              {
                "Fn::GetAtt": [
                  "FSXSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              "NONE"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${ResourcesS3Bucket}.s3.${AWS::Region}.${s3_url}/${ArtifactS3RootDirectory}/templates/cw-dashboard-substack.rendered.cfn.yaml",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterUser": {
      "Description": "Username to login to head node",
      "Value": {
        "Fn::FindInMap": [
          "OSFeatures",
          {
            "Ref": "BaseOS"
          },
          "User"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP Address of the head node",
      "Value": {
        "Fn::GetAtt": [
          "MasterServerSubstack",
          "Outputs.MasterPrivateIP"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the head node",
      "Value": {
        "Fn::GetAtt": [
          "MasterServerSubstack",
          "Outputs.MasterPublicIP"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServerSubstack",
                "Outputs.MasterPrivateIP"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServerSubstack",
                "Outputs.MasterPublicIP"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where AWS ParallelCluster resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      }
    },
    "ArtifactS3RootDirectory": {
      "Description": "Root directory in S3 bucket where cluster artifacts are stored",
      "Value": {
        "Ref": "ArtifactS3RootDirectory"
      }
    },
    "BatchComputeEnvironmentArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.ComputeEnvironmentArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobQueueArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionMnpArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.MNPJobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchUserRole": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.BatchUserRole"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "IsHITCluster": {
      "Value": "true",
      "Condition": "CreateHITSubstack"
    },
    "ClusterConfigMetadata": {
      "Value": {
        "Ref": "ClusterConfigMetadata"
      }
    }
  }
}

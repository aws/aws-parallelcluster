{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS ParallelCluster Template. Version: aws-parallelcluster-2.0.0",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network - Basic Settings"
          },
          "Parameters": [
            "VPCId",
            "MasterSubnetId"
          ]
        },
        {
          "Label": {
            "default": "Cluster - Basic Setting"
          },
          "Parameters": [
            "KeyName",
            "AvailabilityZone",
            "MasterInstanceType",
            "ComputeInstanceType",
            "BaseOS",
            "Scheduler"
          ]
        },
        {
          "Label": {
            "default": "EBS - Basic Settings"
          },
          "Parameters": [
            "VolumeSize"
          ]
        },
        {
          "Label": {
            "default": "Network - Advanced Settings"
          },
          "Parameters": [
            "AccessFrom",
            "ComputeSubnetId",
            "ComputeSubnetCidr",
            "UsePublicIps",
            "AdditionalSG",
            "VPCSecurityGroupId"
          ]
        },
        {
          "Label": {
            "default": "Cluster - Advanced Setting"
          },
          "Parameters": [
            "MinSize",
            "DesiredSize",
            "MaxSize",
            "ComputeWaitConditionCount",
            "SpotPrice",
            "ClusterType",
            "ProxyServer",
            "CustomAMI",
            "PreInstallScript",
            "PreInstallArgs",
            "PostInstallArgs",
            "PostInstallScript",
            "S3ReadResource",
            "S3ReadWriteResource",
            "Placement",
            "PlacementGroup",
            "EncryptedEphemeral",
            "EphemeralDir",
            "SharedDir",
            "CustomChefRunList",
            "CustomChefCookbook",
            "ExtraJson",
            "Tenancy",
            "EphemeralKMSKeyId",
            "ClusterReadyScript",
            "MasterRootVolumeSize",
            "ComputeRootVolumeSize",
            "EC2IAMRoleName"
          ]
        },
        {
          "Label": {
            "default": "EBS - Advanced Settings"
          },
          "Parameters": [
            "VolumeType",
            "EBSSnapshotId",
            "VolumeIOPS",
            "EBSEncryption",
            "EBSKMSKeyId",
            "EBSVolumeId"
          ]
        },
        {
          "Label": {
            "default": "Scaling Settings"
          },
          "Parameters": [
            "ScaleDownIdleTime"
          ]
        },
        {
          "Label": {
            "default": "Additonal Settings"
          },
          "Parameters": [
            "CLITemplate"
          ]
        }
      ],
      "ParameterLabels": {
        "KeyName": {
          "default": "key_name"
        },
        "AccessFrom": {
          "default": "access_from",
          "AccessFrom": {
            "default": "access_from"
          }
        },
        "VPCId": {
          "default": "vpc_id"
        },
        "MasterSubnetId": {
          "default": "master_subnet_id"
        },
        "ComputeSubnetId": {
          "default": "compute_subnet_id"
        },
        "ComputeSubnetCidr": {
          "default": "compute_subnet_cidr"
        },
        "UsePublicIps": {
          "default": "use_public_ips"
        },
        "AdditionalSG": {
          "default": "additional_sg"
        },
        "VPCSecurityGroupId": {
          "default": "vpc_security_group_id"
        },
        "ComputeInstanceType": {
          "default": "compute_instance_type"
        },
        "MasterInstanceType": {
          "default": "master_instance_type"
        },
        "MinSize": {
          "default": "initial_queue_size"
        },
        "DesiredSize": {
          "default": "desired_size"
        },
        "MaxSize": {
          "default": "max_queue_size"
        },
        "Scheduler": {
          "default": "scheduler"
        },
        "ClusterType": {
          "default": "cluster_type"
        },
        "EphemeralDir": {
          "default": "ephemeral_dir"
        },
        "SpotPrice": {
          "default": "spot_price"
        },
        "CustomAMI": {
          "default": "custom_ami"
        },
        "PreInstallScript": {
          "default": "pre_install"
        },
        "PostInstallScript": {
          "default": "post_install"
        },
        "PreInstallArgs": {
          "default": "pre_install_args"
        },
        "PostInstallArgs": {
          "default": "post_install_args"
        },
        "S3ReadResource": {
          "default": "s3_read_resource"
        },
        "S3ReadWriteResource": {
          "default": "s3_read_write_resource"
        },
        "ProxyServer": {
          "default": "proxy_server"
        },
        "Placement": {
          "default": "placement"
        },
        "PlacementGroup": {
          "default": "placement_group"
        },
        "EncryptedEphemeral": {
          "default": "encrypted_ephemeral"
        },
        "SharedDir": {
          "default": "shared_dir"
        },
        "Tenancy": {
          "default": "tenancy"
        },
        "EphemeralKMSKeyId": {
          "default": "ephemeral_kms_key_id"
        },
        "ClusterReadyScript": {
          "default": "cluster_ready"
        },
        "MasterRootVolumeSize": {
          "default": "master_root_volume_size"
        },
        "ComputeRootVolumeSize": {
          "default": "compute_volume_size"
        },
        "BaseOS": {
          "default": "base_os"
        },
        "EC2IAMRoleName": {
          "default": "ec2_iam_role"
        },
        "ExtraJson": {
          "default": "extra_json"
        },
        "CustomChefCookbook": {
          "default": "custom_chef_cookbook"
        },
        "CustomChefRunList": {
          "default": "custom_chef_runlist"
        },
        "EBSSnapshotId": {
          "default": "ebs_snapshot_id"
        },
        "VolumeType": {
          "default": "volume_type"
        },
        "VolumeSize": {
          "default": "volume_size"
        },
        "EBSKMSKeyId": {
          "default": "ebs_kms_key_id"
        },
        "VolumeIOPS": {
          "default": "volume_iops"
        },
        "EBSEncryption": {
          "default": "ebs_encryption"
        },
        "EBSVolumeId": {
          "default": "ebs_volume_id"
        },
        "ScaleDownIdleTime": {
          "default": "scaledown_idletime"
        },
        "ComputeWaitConditionCount": {
          "default": "WAIT COUNT"
        },
        "AvailabilityZone": {
          "default": "AVAILABILITY ZONE"
        },
        "CLITemplate": {
          "default": "CLI TEMPLATE"
        }
      }
    },
    "AWS::CloudFormation::Designer": {
      "ee5f3006-419e-4786-b527-e9503a662e5e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -170,
          "y": 390
        },
        "z": 1,
        "embeds": []
      },
      "c8d3da13-fd27-4377-b606-0f41728c17e1": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -170,
          "y": 310
        },
        "z": 1,
        "embeds": []
      },
      "2904615e-c0ad-4325-b0c5-b9ea7c482b4e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 390
        },
        "z": 1,
        "embeds": []
      },
      "45360a4f-64aa-49f8-b016-78fe5ed86819": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 310
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "2904615e-c0ad-4325-b0c5-b9ea7c482b4e"
        ]
      },
      "619070e4-82e5-445a-93a0-4795ff69d61c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 480
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "2904615e-c0ad-4325-b0c5-b9ea7c482b4e"
        ]
      },
      "466554d3-0e10-4ae4-bfee-51b0aadbf923": {
        "source": {
          "id": "2904615e-c0ad-4325-b0c5-b9ea7c482b4e"
        },
        "target": {
          "id": "619070e4-82e5-445a-93a0-4795ff69d61c"
        }
      },
      "0824f592-a72b-4bb5-8c67-4ce6df509cdd": {
        "size": {
          "width": 240,
          "height": 240
        },
        "position": {
          "x": -430,
          "y": 30
        },
        "z": 1,
        "embeds": []
      },
      "596ddc76-44b9-4747-921c-c000c5b636c0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 150
        },
        "z": 0,
        "embeds": [],
        "references": [
          "45360a4f-64aa-49f8-b016-78fe5ed86819"
        ]
      },
      "bb5a532f-bb43-472a-9965-c4054cd61cc9": {
        "size": {
          "width": 150,
          "height": 150
        },
        "position": {
          "x": -150,
          "y": 70
        },
        "z": 1,
        "embeds": []
      },
      "9dd9772e-03a3-4983-b28e-a52ac42f0ffe": {
        "source": {
          "id": "0824f592-a72b-4bb5-8c67-4ce6df509cdd"
        },
        "target": {
          "id": "bb5a532f-bb43-472a-9965-c4054cd61cc9"
        }
      },
      "d5bad569-ad14-487d-bcc6-5569373bc8cd": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 310
        },
        "z": 1,
        "embeds": []
      },
      "e9ac6c41-8110-49b9-a92c-de57be8a292a": {
        "source": {
          "id": "d5bad569-ad14-487d-bcc6-5569373bc8cd"
        },
        "target": {
          "id": "45360a4f-64aa-49f8-b016-78fe5ed86819"
        }
      },
      "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 270,
          "y": 30
        },
        "z": 1,
        "embeds": []
      },
      "a8fbc80f-2514-4cc9-aee8-ba7936add0a7": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 170,
          "y": 30
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb"
        ]
      },
      "0c5a1e92-ffdd-4344-8ba0-65270e5fd472": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 390,
          "y": 30
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb"
        ]
      },
      "2522b048-2b7c-44ed-9d35-6cc66069ca5b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 390,
          "y": 130
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb"
        ]
      },
      "d3204db6-c821-400d-bf31-6afd5739923c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 480
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "619070e4-82e5-445a-93a0-4795ff69d61c"
        ],
        "isrelatedto": [
          "2522b048-2b7c-44ed-9d35-6cc66069ca5b"
        ]
      },
      "88da1502-8179-4be3-9123-fdc5eac0b6a3": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -50,
          "y": 310
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "45360a4f-64aa-49f8-b016-78fe5ed86819"
        ],
        "isrelatedto": [
          "2522b048-2b7c-44ed-9d35-6cc66069ca5b",
          "ee5f3006-419e-4786-b527-e9503a662e5e"
        ]
      },
      "789cb442-3b1a-4673-a07e-8acb1c59c271": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 270,
          "y": 380
        },
        "z": 1,
        "embeds": []
      },
      "2f599618-92e8-49cf-92bd-551ba9775f39": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 450,
          "y": 380
        },
        "z": 1,
        "embeds": []
      },
      "7b0e0a3f-3a02-4e70-9e79-7647b98fd579": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 270,
          "y": 130
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb"
        ],
        "isrelatedto": [
          "2f599618-92e8-49cf-92bd-551ba9775f39",
          "789cb442-3b1a-4673-a07e-8acb1c59c271"
        ]
      },
      "210b5501-b505-4ee1-917c-a20cae3ac837": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 360,
          "y": 380
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "2f599618-92e8-49cf-92bd-551ba9775f39"
        ]
      },
      "3fa053e5-8ab7-4cdf-a737-4d20386e4717": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -50,
          "y": 480
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "d3204db6-c821-400d-bf31-6afd5739923c"
        ],
        "dependson": [
          "88da1502-8179-4be3-9123-fdc5eac0b6a3"
        ],
        "isrelatedto": [
          "bb5a532f-bb43-472a-9965-c4054cd61cc9",
          "210b5501-b505-4ee1-917c-a20cae3ac837",
          "ee5f3006-419e-4786-b527-e9503a662e5e"
        ]
      },
      "8e63b592-a50f-4b89-a40b-e991adaef77b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -50,
          "y": 600
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "3fa053e5-8ab7-4cdf-a737-4d20386e4717"
        ]
      },
      "23ed10e0-7726-4099-8370-4116c0bc78a2": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": -50,
          "y": 680
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "8e63b592-a50f-4b89-a40b-e991adaef77b"
        ]
      },
      "89b41ceb-a2fb-4e17-a808-9bedc37b2b2c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 600
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "3fa053e5-8ab7-4cdf-a737-4d20386e4717"
        ]
      },
      "127f78c3-d47a-4770-8aad-3fd733c3e1b0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 680
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "89b41ceb-a2fb-4e17-a808-9bedc37b2b2c"
        ]
      },
      "6a874346-80de-4412-9677-00590371a8a2": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 450,
          "y": 470
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "2f599618-92e8-49cf-92bd-551ba9775f39"
        ],
        "isrelatedto": [
          "210b5501-b505-4ee1-917c-a20cae3ac837"
        ]
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances using the default cluster user.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MasterInstanceType": {
      "Description": "MasterServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "ComputeInstanceType": {
      "Description": "ComputeFleet EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "MinSize": {
      "Description": "Initial number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "DesiredSize": {
      "Description": "Desired number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "MaxSize": {
      "Description": "Maximum number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "ComputeSubnetId": {
      "Description": "ID of the Subnet you want to provision the Compute Servers into",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^subnet-[0-9a-z]{8}$|^subnet-[0-9a-z]{17}$)"
    },
    "SpotPrice": {
      "Description": "Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType = \"spot\". When awsbatch is the scheduler, this is spot bid percentage.",
      "Type": "Number",
      "Default": "0.00"
    },
    "ClusterType": {
      "Description": "Type of cluster to launch. Can either be \"ondemand\" or \"spot\". Choosing \"spot\" will cause the ComputeFleet AutoScaling group to launch EC2 Spot instances. Default value is \"ondemand\".",
      "Type": "String",
      "Default": "ondemand",
      "ConstraintDescription": "Must be a supported cluster type: ondemand, spot",
      "AllowedValues": [
        "ondemand",
        "spot"
      ]
    },
    "ProxyServer": {
      "Description": "hostname and port of HTTP proxy server for cfn-init, boto and yum i.e. proxy.example.com:8080",
      "Type": "String",
      "Default": "NONE"
    },
    "VolumeSize": {
      "Description": "Comma delimited list of size of EBS volume in GB, if creating a new one",
      "Type": "String",
      "Default": "20, 20, 20, 20, 20"
    },
    "VolumeType": {
      "Description": "Comma delimited list of type of volume to create either new or from snapshot",
      "Type": "String",
      "Default": "gp2, gp2, gp2, gp2, gp2",
      "ConstraintDescription": "must be a supported volume type: standard, io1, gp2, st1, sc1",
      "AllowedPattern": "^(NONE|standard|io1|gp2|st1|sc1)((,|, )(NONE|standard|io1|gp2|st1|sc1)){4}$"
    },
    "MasterSubnetId": {
      "Description": "ID of the Subnet you want to provision the Master server into",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AvailabilityZone": {
      "Description": "Availability Zone the cluster will launch into. THIS IS REQUIRED",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "EBSSnapshotId": {
      "Description": "Comma delimited list of Id of EBS snapshot if using snapshot as source for volume",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE",
      "AllowedPattern": "^(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})((,|, )(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})){4}$"
    },
    "CustomAMI": {
      "Description": "ID of a Custom AMI, to use instead of published AMI's",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)"
    },
    "VPCId": {
      "Description": "ID of the VPC you want to provision cluster into. Only used with UseVPCBase=false",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AccessFrom": {
      "Description": "Lockdown SSH/HTTP access (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ComputeSubnetCidr": {
      "Description": "CIDR(s) for new backend subnet(s) i.e. 10.0.100.0/24. This is a comma-delimited list and can support multiple CIDR ranges for a multi-AZ cluster. The order and length of this list MUST match the AvailabilityZones parameter.",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "AllowedPattern": "(NONE|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "Default": "NONE"
    },
    "UsePublicIps": {
      "Description": "Boolean flag to use public IP's for instances. If false, the VPC must be correctly setup to use NAT for all traffic.",
      "Type": "String",
      "Default": "true",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeIOPS": {
      "Description": "Comma delimited list of number of IOPS for volume type io1. Not used for other volume types.",
      "Type": "String",
      "Default": "100, 100, 100, 100, 100"
    },
    "PreInstallScript": {
      "Description": "Preinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallScript": {
      "Description": "Postinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "ComputeWaitConditionCount": {
      "Description": "Specific number of instances to wait for while creating the cluster",
      "Type": "Number",
      "Default": "2"
    },
    "S3ReadResource": {
      "Description": "S3 resource with read access from AWS ParallelCluster nodes",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadWriteResource": {
      "Description": "Addtional policy document to be added to EC2 IAM role created and assigned to all nodes.",
      "Type": "String",
      "Default": "NONE"
    },
    "Placement": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "cluster",
      "AllowedValues": [
        "cluster",
        "compute"
      ]
    },
    "PlacementGroup": {
      "Description": "The name of an existing placement group",
      "Type": "String",
      "Default": "NONE"
    },
    "EncryptedEphemeral": {
      "Description": "Boolean flag to encrypt local ephemeral drives. The keys are in-memory and non-recoverable.",
      "Type": "String",
      "Default": "false",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "PreInstallArgs": {
      "Description": "Preinstall script args passed to the preinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallArgs": {
      "Description": "Postinstall script args passed to the postinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "EBSEncryption": {
      "Description": "Comma delimited list of boolean flag to use EBS encryption for /shared volume. (Not to be used for snapshots)",
      "Type": "String",
      "Default": "false, false, false, false, false",
      "ConstraintDescription": "true/false",
      "AllowedPattern": "^(NONE|true|false)((,|, )(NONE|true|false)){4}$"
    },
    "EphemeralDir": {
      "Description": "The path/mountpoint for the ephemeral drive",
      "Type": "String",
      "Default": "/scratch"
    },
    "BaseOS": {
      "Description": "Base OS type for cluster AMI",
      "Type": "String",
      "Default": "alinux",
      "ConstraintDescription": "must be a supported base OS",
      "AllowedValues": [
        "centos6",
        "centos7",
        "alinux",
        "ubuntu1404",
        "ubuntu1604"
      ]
    },
    "ScaleDownIdleTime": {
      "Description": "Period in minutes without jobs after which compute node will terminate ",
      "Type": "String",
      "Default": "10"
    },
    "Scheduler": {
      "Description": "Cluster scheduler",
      "Type": "String",
      "Default": "sge",
      "ConstraintDescription": "must be a supported scheduler",
      "AllowedValues": [
        "sge",
        "torque",
        "slurm",
        "custom",
        "awsbatch",
        "test"
      ]
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String",
      "Default": "/shared"
    },
    "CLITemplate": {
      "Description": "cluster_template section used in the config.",
      "Type": "String",
      "Default": "default"
    },
    "AdditionalSG": {
      "Description": "Additional VPC security group to be added to instances. Defaults to NONE",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "CustomChefRunList": {
      "Description": "Custom run list, which will override the default",
      "Type": "String",
      "Default": "NONE"
    },
    "CustomChefCookbook": {
      "Description": "URL of custom cookbook that will override the default. This will be unpacked and then dependencies resolved with Berkshelf.",
      "Type": "String",
      "Default": "NONE"
    },
    "ExtraJson": {
      "Description": "Extra json to be added to Chef dna.json",
      "Type": "String",
      "Default": "{}"
    },
    "Tenancy": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "default",
      "AllowedValues": [
        "default",
        "dedicated"
      ]
    },
    "EBSKMSKeyId": {
      "Description": "Comma delimited list of KMS ARN for customer created master key, will be used for EBS encryption",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE"
    },
    "EphemeralKMSKeyId": {
      "Description": "KMS ARN for customer created master key, will be used for ephemeral encryption",
      "Type": "String",
      "Default": "NONE"
    },
    "ClusterReadyScript": {
      "Description": "Cluster ready script URL. This is only on the MasterServer, when the cluster reaches CREATE_COMPLETE.",
      "Type": "String",
      "Default": "NONE"
    },
    "MasterRootVolumeSize": {
      "Description": "Size of MasterServer EBS root volume in GB",
      "Type": "Number",
      "Default": "15",
      "MinValue": "15"
    },
    "ComputeRootVolumeSize": {
      "Description": "Size of ComputeFleet EBS root volume in GB",
      "Type": "Number",
      "Default": "15",
      "MinValue": "15"
    },
    "EC2IAMRoleName": {
      "Description": "Existing EC2 IAM role name",
      "Type": "String",
      "Default": "NONE"
    },
    "VPCSecurityGroupId": {
      "Description": "Existing VPC security group Id",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "EBSVolumeId": {
      "Description": "Comma delimited list of existing EBS volume Id",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE",
      "AllowedPattern": "^(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})((,|, )(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})){4}$"
    },
    "AdditionalCfnTemplate": {
      "Description": "A second CloudFormation template to launch with the cluster",
      "Type": "String",
      "Default": "NONE"
    },
    "CustomAWSBatchTemplateURL": {
      "Description": "URL of custom batch template that will override the default one.",
      "Type": "String",
      "Default": "NONE"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 bucket where resources needed by the stack are located. The bucket gets deleted on stack deletion.",
      "Type": "String",
      "Default": "NONE"
    },
    "NumberOfEBSVol": {
      "Description": "Number of EBS Volumes the user requested, up to 5",
      "Type": "Number",
      "Default": "1"
    }
  },
  "Conditions": {
    "IsMasterInstanceEbsOpt": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "cc2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cr1.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "g2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "i2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "i2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cg1.4xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.nano",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.micro",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.small",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.2xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "UseSpotInstances": {
      "Fn::Equals": [
        {
          "Ref": "ClusterType"
        },
        "spot"
      ]
    },
    "UseSpotPrice": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0.00"
          ]
        }
      ]
    },
    "CreateComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetCidr"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetId"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetCidr"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseCustomRunList": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomChefRunList"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAMI"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseProxy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ProxyServer"
            },
            "NONE"
          ]
        }
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIps"
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "UsePublicIps"
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "S3ReadResource"
            },
            "NONE"
          ]
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "Placement"
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "S3ReadWriteResource"
            },
            "NONE"
          ]
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSG"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEphemeralKMSKey": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "EphemeralKMSKeyId"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "EncryptedEphemeral"
            },
            "true"
          ]
        }
      ]
    },
    "UseDedicatedTenancy": {
      "Fn::Equals": [
        {
          "Ref": "Tenancy"
        },
        "dedicated"
      ]
    },
    "UseEC2IAMRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EC2IAMRoleName"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateEC2IAMRole": {
      "Fn::Equals": [
        {
          "Ref": "EC2IAMRoleName"
        },
        "NONE"
      ]
    },
    "UseExistingSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCSecurityGroupId"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateSecurityGroups": {
      "Fn::Equals": [
        {
          "Ref": "VPCSecurityGroupId"
        },
        "NONE"
      ]
    },
    "CreateSubStack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalCfnTemplate"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreatePlacementGroup": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "DYNAMIC"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "GovCloudRegion": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition"
        },
        "aws-us-gov"
      ]
    },
    "CreateLaunchTemplate": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Condition": "GovCloudRegion"
            }
          ]
        },
        {
          "Condition": "CreateComputeFleet"
        }
      ]
    },
    "CreateLaunchConfig": {
      "Fn::And": [
        {
          "Condition": "GovCloudRegion"
        },
        {
          "Condition": "CreateComputeFleet"
        }
      ]
    },
    "CreateComputeFleet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Scheduler"
            },
            "awsbatch"
          ]
        }
      ]
    },
    "CreateAWSBatchStack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "awsbatch"
      ]
    },
    "UseCustomAWSBatchTemplateURL": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            "NONE"
          ]
        }
      ]
    },
    "HasResourcesS3Bucket": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ResourcesS3Bucket"
            },
            "NONE"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSRegionOS2AMI": {
      "ap-northeast-1": {
        "alinux": "ami-08c04a0569b16816f",
        "centos6": "ami-08de0666a4da5f5fc",
        "centos7": "ami-06045122c79c423e1",
        "ubuntu1404": "ami-0c0924559823b93c0",
        "ubuntu1604": "ami-0c30dfd96b8690fdd"
      },
      "ap-northeast-2": {
        "alinux": "ami-018526e34f3a85697",
        "centos6": "ami-008d3e512e291e70d",
        "centos7": "ami-0ac50960c0a5ae00c",
        "ubuntu1404": "ami-0d643759fe0c90dfe",
        "ubuntu1604": "ami-00869b542a8db65d3"
      },
      "ap-northeast-3": {
        "alinux": "ami-0da337ee71872f299",
        "centos6": "ami-072ab949458cd950e",
        "centos7": "ami-01b656500a4071b3a",
        "ubuntu1404": "ami-0b55233b9f455734e",
        "ubuntu1604": "ami-0485f1e6818832f64"
      },
      "ap-south-1": {
        "alinux": "ami-04ae4fe63b64488ea",
        "centos6": "ami-031f1c573badfa635",
        "centos7": "ami-02ddc1d9f44c566c2",
        "ubuntu1404": "ami-011ac103bd318c4f0",
        "ubuntu1604": "ami-09b6c1c1739feda4e"
      },
      "ap-southeast-1": {
        "alinux": "ami-0ef67040197e26c33",
        "centos6": "ami-0bb41d4f2cfc4ca15",
        "centos7": "ami-070b86fd24ef2d7c9",
        "ubuntu1404": "ami-044ee41b74748b14b",
        "ubuntu1604": "ami-01122ad2b1c4db300"
      },
      "ap-southeast-2": {
        "alinux": "ami-0c6ecd6e881cc2c31",
        "centos6": "ami-028034e9ac1bf03c7",
        "centos7": "ami-092bef65ff0508906",
        "ubuntu1404": "ami-0be3f5dda13b1479a",
        "ubuntu1604": "ami-0efccc4c3318d501b"
      },
      "ca-central-1": {
        "alinux": "ami-020b507ac8b79f7d6",
        "centos6": "ami-04792e65239b0748c",
        "centos7": "ami-0a56053f030f82a8a",
        "ubuntu1404": "ami-0b1277901ccc02b4a",
        "ubuntu1604": "ami-0abccf43b3ff619a9"
      },
      "eu-central-1": {
        "alinux": "ami-0d2cafd9b48bc8963",
        "centos6": "ami-0c0aaee33f089ab06",
        "centos7": "ami-08fd6208a8b58d721",
        "ubuntu1404": "ami-04b779daeadd6b36d",
        "ubuntu1604": "ami-092cebaf7bbcb7cc0"
      },
      "eu-west-1": {
        "alinux": "ami-057f0f526ccae7889",
        "centos6": "ami-04a04b41e1286fe83",
        "centos7": "ami-06969961d3eee219d",
        "ubuntu1404": "ami-0dfce92b55976019d",
        "ubuntu1604": "ami-0e3ed2901daab328f"
      },
      "eu-west-2": {
        "alinux": "ami-01cfa1d371ca9466b",
        "centos6": "ami-0085395d34063f43f",
        "centos7": "ami-0af679d19ee648dfa",
        "ubuntu1404": "ami-03057f9983c8b2b4e",
        "ubuntu1604": "ami-021e23d37ecd73fbe"
      },
      "eu-west-3": {
        "alinux": "ami-0b0dafd71b020e820",
        "centos6": "ami-0e1af3c4e01529966",
        "centos7": "ami-00c272853a92ebb2c",
        "ubuntu1404": "ami-0f738b98eb8cbf980",
        "ubuntu1604": "ami-0df78d76f1b37640b"
      },
      "sa-east-1": {
        "alinux": "ami-0913cf800486338e5",
        "centos6": "ami-013a6e3f5a064fb4e",
        "centos7": "ami-0c3be73b9f96fb277",
        "ubuntu1404": "ami-04d9c6053cea1a9b8",
        "ubuntu1604": "ami-08496be9e7d11f719"
      },
      "us-east-1": {
        "alinux": "ami-0a2c25a8172eec71c",
        "centos6": "ami-0184675ff8c65c0bc",
        "centos7": "ami-017b013ef58a362fb",
        "ubuntu1404": "ami-066db1295a21665ff",
        "ubuntu1604": "ami-0bbb9dca0032a126e"
      },
      "us-east-2": {
        "alinux": "ami-019889b6183b0751f",
        "centos6": "ami-07afd519966722bbd",
        "centos7": "ami-07d7833b4ed0cecb9",
        "ubuntu1404": "ami-049ab692f5f6b9a1f",
        "ubuntu1604": "ami-07c0ca931443ca676"
      },
      "us-gov-west-1": {
        "alinux": "ami-40492d21",
        "ubuntu1404": "ami-48422629",
        "ubuntu1604": "ami-7f41251e"
      },
      "us-west-1": {
        "alinux": "ami-0b3012424f60c792a",
        "centos6": "ami-07dda37d7bc8ce503",
        "centos7": "ami-02fc3c4c4efb59328",
        "ubuntu1404": "ami-0ca2af9e72a8f47be",
        "ubuntu1604": "ami-0a73055cf4e7648b6"
      },
      "us-west-2": {
        "alinux": "ami-0e90b41d94021b52d",
        "centos6": "ami-0a5f44b3a2be04fad",
        "centos7": "ami-0d973fa1955142bc9",
        "ubuntu1404": "ami-03c8c030fd8fe5c72",
        "ubuntu1604": "ami-0f44eab09f8e01e0f"
      }
    },
    "OSFeatures": {
      "centos6": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "centos7": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "alinux": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "ubuntu1404": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      },
      "ubuntu1604": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      }
    },
    "PackagesVersions": {
      "default": {
        "cfncluster": "2.0.0",
        "cookbook": "aws-parallelcluster-cookbook-2.0.0",
        "chef": "14.2.0",
        "ridley": "5.1.1",
        "berkshelf": "7.0.4",
        "ami": "dev"
      }
    }
  },
  "Resources": {
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2f599618-92e8-49cf-92bd-551ba9775f39"
        }
      }
    },
    "SQSPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SendMessage-From-AS-SNS-Topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNS"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "SQS"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6a874346-80de-4412-9677-00590371a8a2"
        }
      }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "SQS",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "210b5501-b505-4ee1-917c-a20cae3ac837"
        }
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "instanceId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "789cb442-3b1a-4673-a07e-8acb1c59c271"
        }
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Fn::If": [
              "CreateAWSBatchStack",
              "arn:aws:iam::aws:policy/AWSBatchFullAccess",
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Condition": "CreateEC2IAMRole",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ce1cdcde-8551-4c33-b846-e1b0ab9ac8fb"
        }
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2522b048-2b7c-44ed-9d35-6cc66069ca5b"
        }
      }
    },
    "ParallelClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:DescribeVolumes",
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "SQSQueue",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SQS",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Sid": "Autoscaling",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:DescribeTags"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "Cloudformation",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":cloudformation:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":stack/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Ref": "DynamoDBTable"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "S3GetObj",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-aws-parallelcluster/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "S3PutObj",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*"
                }
              ]
            },
            {
              "Sid": "SQSList",
              "Action": [
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "7b0e0a3f-3a02-4e70-9e79-7647b98fd579"
        }
      }
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0c5a1e92-ffdd-4344-8ba0-65270e5fd472"
        }
      }
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadWriteResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a8fbc80f-2514-4cc9-aee8-ba7936add0a7"
        }
      }
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "d5bad569-ad14-487d-bcc6-5569373bc8cd"
        }
      }
    },
    "MasterServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "MasterInstanceType"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          },
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "OSFeatures",
                {
                  "Ref": "BaseOS"
                },
                "RootDevice"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "MasterRootVolumeSize"
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "Master"
          }
        ],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "MasterENI"
            },
            "DeviceIndex": "0"
          }
        ],
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Ref": "CustomAMI"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "BaseOS"
                }
              ]
            }
          ]
        },
        "EbsOptimized": {
          "Fn::If": [
            "IsMasterInstanceEbsOpt",
            "true",
            "false"
          ]
        },
        "IamInstanceProfile": {
          "Fn::If": [
            "UseEC2IAMRole",
            {
              "Ref": "EC2IAMRoleName"
            },
            {
              "Ref": "RootInstanceProfile"
            }
          ]
        },
        "PlacementGroupName": {
          "Fn::If": [
            "UseClusterPlacement",
            {
              "Fn::If": [
                "CreatePlacementGroup",
                {
                  "Ref": "DynamicPlacementGroup"
                },
                {
                  "Ref": "PlacementGroup"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tenancy": {
          "Ref": "Tenancy"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#cloud-config:\n",
                "runcmd:\n",
                " - [ sh, -c, 'which yum && echo \"proxy=",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "_none_"
                  ]
                },
                "\" >> /etc/yum.conf' ]\n",
                " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "false"
                  ]
                },
                "\\\";\" >> /etc/apt/apt.conf ]\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#!/bin/bash -x\n\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "function bootstrap_instance\n",
                "{\n",
                "  which yum 2>/dev/null; yum=$?\n",
                "  which apt-get 2>/dev/null; apt=$?\n",
                "  if [ \"${yum}\" == \"0\" ]; then\n",
                "    yum -y groupinstall development && yum -y install curl wget jq\n",
                "  fi\n",
                "  if [ \"${apt}\" == \"0\" ]; then\n",
                "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq\n",
                "  fi\n",
                "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                "  curl -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                "  mkdir /opt/parallelcluster && echo ${cfncluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                "}\n",
                "proxy=",
                {
                  "Ref": "ProxyServer"
                },
                "\n",
                "custom_cookbook=",
                {
                  "Ref": "CustomChefCookbook"
                },
                "\n",
                "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "  touch /tmp/proxy.sh\n",
                "fi\n",
                "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                "  cookbook_url=${custom_cookbook}\n",
                "else\n",
                "  if [ \"",
                {
                  "Ref": "AWS::Region"
                },
                "\" == \"us-east-1\" ]; then\n",
                "    s3_prefix=s3\n",
                "  else\n",
                "    s3_prefix=s3-",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  fi\n",
                "  cookbook_url=https://${s3_prefix}.amazonaws.com/",
                {
                  "Ref": "AWS::Region"
                },
                "-aws-parallelcluster/cookbooks/",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                ".tgz\n",
                "fi\n",
                "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                "export cfncluster_version=aws-parallelcluster-",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cfncluster"
                  ]
                },
                "\n",
                "export cookbook_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                "\n",
                "export chef_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "chef"
                  ]
                },
                "\n",
                "export ridley_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "ridley"
                  ]
                },
                "\n",
                "export berkshelf_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "berkshelf"
                  ]
                },
                "\n",
                "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                "  if [ \"${cfncluster_version}\" != \"${installed_version}\" ]; then\n",
                "    bootstrap_instance\n",
                "  fi\n",
                "else\n",
                "  bootstrap_instance\n",
                "fi\n",
                "mkdir /tmp/cookbooks\n",
                "cd /tmp/cookbooks\n",
                "curl -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                "cd /tmp\n",
                "# Call CloudFormation\n",
                "cfn-init ${proxy_args} -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -v -c default -r MasterServer --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# End of file\n",
                "--==BOUNDARY==\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Master server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "shellForkClusterReadyInstall"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_volume": {
                      "Fn::GetAtt": [
                        "EBSCfnStack",
                        "Outputs.Volumeids"
                      ]
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_max_queue_size": {
                      "Ref": "MaxSize"
                    },
                    "compute_instance_type": {
                      "Ref": "ComputeInstanceType"
                    },
                    "cfn_node_type": "MasterServer",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    },
                    "cfn_ddb_table": {
                      "Ref": "DynamoDBTable"
                    },
                    "cfn_sqs_queue": {
                      "Fn::GetAtt": [
                        "SQS",
                        "QueueName"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": ". /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done ",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp"
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "shellForkClusterReadyInstall": {
            "commands": {
              "clusterreadyinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -clusterreadyinstall"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "88da1502-8179-4be3-9123-fdc5eac0b6a3"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "ComputeFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Fn::If": [
            "GovCloudRegion",
            {
              "Ref": "ComputeServerLaunchConfig"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "LaunchTemplate": {
          "Fn::If": [
            "CreateLaunchTemplate",
            {
              "LaunchTemplateId": {
                "Ref": "ComputeServerLaunchTemplate"
              },
              "Version": {
                "Fn::GetAtt": [
                  "ComputeServerLaunchTemplate",
                  "LatestVersionNumber"
                ]
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredSize"
        },
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "SNS"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_TERMINATE"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute",
            "PropagateAtLaunch": "true"
          }
        ],
        "PlacementGroup": {
          "Fn::If": [
            "UsePlacementGroup",
            {
              "Fn::If": [
                "CreatePlacementGroup",
                {
                  "Ref": "DynamicPlacementGroup"
                },
                {
                  "Ref": "PlacementGroup"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "DependsOn": "MasterServer",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M",
          "Count": {
            "Ref": "ComputeWaitConditionCount"
          }
        }
      },
      "Condition": "CreateComputeFleet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "3fa053e5-8ab7-4cdf-a737-4d20386e4717"
        }
      }
    },
    "ComputeServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Condition": "CreateLaunchConfig",
      "Properties": {
        "SecurityGroups": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "ComputePublicIps",
            "true",
            "false"
          ]
        },
        "InstanceType": {
          "Ref": "ComputeInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Fn::If": [
            "UseEC2IAMRole",
            {
              "Ref": "EC2IAMRoleName"
            },
            {
              "Ref": "RootInstanceProfile"
            }
          ]
        },
        "SpotPrice": {
          "Fn::If": [
            "UseSpotInstances",
            {
              "Ref": "SpotPrice"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Ref": "CustomAMI"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "BaseOS"
                }
              ]
            }
          ]
        },
        "InstanceMonitoring": "false",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          },
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "OSFeatures",
                {
                  "Ref": "BaseOS"
                },
                "RootDevice"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "ComputeRootVolumeSize"
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "PlacementTenancy": {
          "Fn::If": [
            "UseDedicatedTenancy",
            {
              "Ref": "Tenancy"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#cloud-config:\n",
                "runcmd:\n",
                " - [ sh, -c, 'which yum && echo \"proxy=",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "_none_"
                  ]
                },
                "\" >> /etc/yum.conf' ]\n",
                " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "false"
                  ]
                },
                "\\\";\" >> /etc/apt/apt.conf' ]\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#!/bin/bash -x\n\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "function bootstrap_instance\n",
                "{\n",
                "  which yum 2>/dev/null; yum=$?\n",
                "  which apt-get 2>/dev/null; apt=$?\n",
                "  if [ \"${yum}\" == \"0\" ]; then\n",
                "    yum -y groupinstall development && yum -y install curl wget jq\n",
                "  fi\n",
                "  if [ \"${apt}\" == \"0\" ]; then\n",
                "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq\n",
                "  fi\n",
                "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                "  curl -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                "  mkdir /opt/parallelcluster && echo ${cfncluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                "}\n",
                "proxy=",
                {
                  "Ref": "ProxyServer"
                },
                "\n",
                "custom_cookbook=",
                {
                  "Ref": "CustomChefCookbook"
                },
                "\n",
                "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "  touch /tmp/proxy.sh\n",
                "fi\n",
                "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                "  cookbook_url=${custom_cookbook}\n",
                "else\n",
                "  if [ \"",
                {
                  "Ref": "AWS::Region"
                },
                "\" == \"us-east-1\" ]; then\n",
                "    s3_prefix=s3\n",
                "  else\n",
                "    s3_prefix=s3-",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  fi\n",
                "  cookbook_url=https://${s3_prefix}.amazonaws.com/",
                {
                  "Ref": "AWS::Region"
                },
                "-aws-parallelcluster/cookbooks/",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                ".tgz\n",
                "fi\n",
                "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                "export cfncluster_version=aws-parallelcluster-",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cfncluster"
                  ]
                },
                "\n",
                "export cookbook_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                "\n",
                "export chef_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "chef"
                  ]
                },
                "\n",
                "export ridley_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "ridley"
                  ]
                },
                "\n",
                "export berkshelf_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "berkshelf"
                  ]
                },
                "\n",
                "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                "  if [ \"${cfncluster_version}\" != \"${installed_version}\" ]; then\n",
                "    bootstrap_instance\n",
                "  fi\n",
                "else\n",
                "  bootstrap_instance\n",
                "fi\n",
                "mkdir /tmp/cookbooks\n",
                "cd /tmp/cookbooks\n",
                "curl -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                "cd /tmp\n",
                "# Call CloudFormation\n",
                "cfn-init ${proxy_args} -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -v -c default -r ComputeServerLaunchConfig --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# End of file\n",
                "--==BOUNDARY==\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "shellForkClusterReadyInstall",
              "signalComputeReady"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQS"
                    },
                    "cfn_master": {
                      "Fn::GetAtt": [
                        "MasterServer",
                        "PrivateDnsName"
                      ]
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "/usr/local/bin/jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": ". /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done ",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp"
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "shellForkClusterReadyInstall": {
            "commands": {
              "clusterreadyinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -clusterreadyinstall"
              }
            }
          },
          "signalComputeReady": {
            "commands": {
              "compute_ready": {
                "command": "/opt/parallelcluster/scripts/compute_ready"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "d3204db6-c821-400d-bf31-6afd5739923c"
        }
      }
    },
    "ComputeServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "AssociatePublicIpAddress": {
                "Fn::If": [
                  "ComputePublicIps",
                  true,
                  false
                ]
              }
            }
          ],
          "InstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "IamInstanceProfile": {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Name": {
                  "Ref": "EC2IAMRoleName"
                }
              },
              {
                "Name": {
                  "Ref": "RootInstanceProfile"
                }
              }
            ]
          },
          "InstanceMarketOptions": {
            "Fn::If": [
              "UseSpotInstances",
              {
                "SpotOptions": {
                  "SpotInstanceType": "one-time",
                  "InstanceInterruptionBehavior": "terminate",
                  "MaxPrice": {
                    "Fn::If": [
                      "UseSpotPrice",
                      {
                        "Ref": "SpotPrice"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                "MarketType": "spot"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::FindInMap": [
                  "AWSRegionOS2AMI",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "BaseOS"
                  }
                ]
              }
            ]
          },
          "Monitoring": {
            "Enabled": "false"
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdba",
              "VirtualName": "ephemeral0"
            },
            {
              "DeviceName": "/dev/xvdbb",
              "VirtualName": "ephemeral1"
            },
            {
              "DeviceName": "/dev/xvdbc",
              "VirtualName": "ephemeral2"
            },
            {
              "DeviceName": "/dev/xvdbd",
              "VirtualName": "ephemeral3"
            },
            {
              "DeviceName": "/dev/xvdbe",
              "VirtualName": "ephemeral4"
            },
            {
              "DeviceName": "/dev/xvdbf",
              "VirtualName": "ephemeral5"
            },
            {
              "DeviceName": "/dev/xvdbg",
              "VirtualName": "ephemeral6"
            },
            {
              "DeviceName": "/dev/xvdbh",
              "VirtualName": "ephemeral7"
            },
            {
              "DeviceName": "/dev/xvdbi",
              "VirtualName": "ephemeral8"
            },
            {
              "DeviceName": "/dev/xvdbj",
              "VirtualName": "ephemeral9"
            },
            {
              "DeviceName": "/dev/xvdbk",
              "VirtualName": "ephemeral10"
            },
            {
              "DeviceName": "/dev/xvdbl",
              "VirtualName": "ephemeral11"
            },
            {
              "DeviceName": "/dev/xvdbm",
              "VirtualName": "ephemeral12"
            },
            {
              "DeviceName": "/dev/xvdbn",
              "VirtualName": "ephemeral13"
            },
            {
              "DeviceName": "/dev/xvdbo",
              "VirtualName": "ephemeral14"
            },
            {
              "DeviceName": "/dev/xvdbp",
              "VirtualName": "ephemeral15"
            },
            {
              "DeviceName": "/dev/xvdbq",
              "VirtualName": "ephemeral16"
            },
            {
              "DeviceName": "/dev/xvdbr",
              "VirtualName": "ephemeral17"
            },
            {
              "DeviceName": "/dev/xvdbs",
              "VirtualName": "ephemeral18"
            },
            {
              "DeviceName": "/dev/xvdbt",
              "VirtualName": "ephemeral19"
            },
            {
              "DeviceName": "/dev/xvdbu",
              "VirtualName": "ephemeral20"
            },
            {
              "DeviceName": "/dev/xvdbv",
              "VirtualName": "ephemeral21"
            },
            {
              "DeviceName": "/dev/xvdbw",
              "VirtualName": "ephemeral22"
            },
            {
              "DeviceName": "/dev/xvdbx",
              "VirtualName": "ephemeral23"
            },
            {
              "DeviceName": {
                "Fn::FindInMap": [
                  "OSFeatures",
                  {
                    "Ref": "BaseOS"
                  },
                  "RootDevice"
                ]
              },
              "Ebs": {
                "VolumeSize": {
                  "Ref": "ComputeRootVolumeSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "Placement": {
            "Fn::If": [
              "UseDedicatedTenancy",
              {
                "Tenancy": {
                  "Ref": "Tenancy"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                  "MIME-Version: 1.0\n\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#cloud-config:\n",
                  "runcmd:\n",
                  " - [ sh, -c, 'which yum && echo \"proxy=",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "_none_"
                    ]
                  },
                  "\" >> /etc/yum.conf' ]\n",
                  " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "false"
                    ]
                  },
                  "\\\";\" >> /etc/apt/apt.conf' ]\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "function error_exit\n",
                  "{\n",
                  "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  exit 1\n",
                  "}\n",
                  "function bootstrap_instance\n",
                  "{\n",
                  "  which yum 2>/dev/null; yum=$?\n",
                  "  which apt-get 2>/dev/null; apt=$?\n",
                  "  if [ \"${yum}\" == \"0\" ]; then\n",
                  "    yum -y groupinstall development && yum -y install curl wget\n",
                  "  fi\n",
                  "  if [ \"${apt}\" == \"0\" ]; then\n",
                  "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget\n",
                  "  fi\n",
                  "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                  "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                  "  curl -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                  "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                  "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                  "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                  "  curl -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                  "  mkdir /opt/parallelcluster && echo ${cfncluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                  "}\n",
                  "proxy=",
                  {
                    "Ref": "ProxyServer"
                  },
                  "\n",
                  "custom_cookbook=",
                  {
                    "Ref": "CustomChefCookbook"
                  },
                  "\n",
                  "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                  "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                  "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                  "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                  "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                  "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                  "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                  "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                  "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                  "else\n",
                  "  proxy_args=\"\"\n",
                  "  touch /tmp/proxy.sh\n",
                  "fi\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  cookbook_url=${custom_cookbook}\n",
                  "else\n",
                  "  if [ \"",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\" == \"us-east-1\" ]; then\n",
                  "    s3_prefix=s3\n",
                  "  else\n",
                  "    s3_prefix=s3-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  fi\n",
                  "  cookbook_url=https://${s3_prefix}.amazonaws.com/",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-aws-parallelcluster/cookbooks/",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  ".tgz\n",
                  "fi\n",
                  "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                  "export cfncluster_version=aws-parallelcluster-",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cfncluster"
                    ]
                  },
                  "\n",
                  "export cookbook_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  "\n",
                  "export chef_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "chef"
                    ]
                  },
                  "\n",
                  "export ridley_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "ridley"
                    ]
                  },
                  "\n",
                  "export berkshelf_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "berkshelf"
                    ]
                  },
                  "\n",
                  "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                  "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                  "  if [ \"${cfncluster_version}\" != \"${installed_version}\" ]; then\n",
                  "    bootstrap_instance\n",
                  "  fi\n",
                  "else\n",
                  "  bootstrap_instance\n",
                  "fi\n",
                  "mkdir /tmp/cookbooks\n",
                  "cd /tmp/cookbooks\n",
                  "curl -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                  "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                  "cd /tmp\n",
                  "# Call CloudFormation\n",
                  "cfn-init ${proxy_args} -s ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " -v -c default -r ComputeServerLaunchTemplate --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                  "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# End of file\n",
                  "--==BOUNDARY==\n"
                ]
              ]
            }
          }
        }
      },
      "Condition": "CreateLaunchTemplate",
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "shellForkClusterReadyInstall",
              "signalComputeReady"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQS"
                    },
                    "cfn_master": {
                      "Fn::GetAtt": [
                        "MasterServer",
                        "PrivateDnsName"
                      ]
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": ". /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done ",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp"
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "shellForkClusterReadyInstall": {
            "commands": {
              "clusterreadyinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -clusterreadyinstall"
              }
            }
          },
          "signalComputeReady": {
            "commands": {
              "compute_ready": {
                "command": "/opt/parallelcluster/scripts/compute_ready"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "d3204db6-c821-400d-bf31-6afd5739923c"
        }
      }
    },
    "ComputeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "CidrBlock": {
          "Ref": "ComputeSubnetCidr"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        }
      },
      "Condition": "CreateComputeSubnetForCompute",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "bb5a532f-bb43-472a-9965-c4054cd61cc9"
        }
      }
    },
    "ComputeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ]
      },
      "Condition": "CreateComputeSubnetForCompute",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0824f592-a72b-4bb5-8c67-4ce6df509cdd"
        }
      }
    },
    "ComputeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "CreateComputeSubnetForCompute",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "596ddc76-44b9-4747-921c-c000c5b636c0"
        }
      }
    },
    "ComputeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "ComputeSubnet"
        },
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        }
      },
      "Condition": "CreateComputeSubnetForCompute",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "9dd9772e-03a3-4983-b28e-a52ac42f0ffe"
        }
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Master host",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AccessFrom"
            }
          }
        ]
      },
      "Condition": "CreateSecurityGroups",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2904615e-c0ad-4325-b0c5-b9ea7c482b4e"
        }
      }
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "466554d3-0e10-4ae4-bfee-51b0aadbf923"
        }
      }
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      },
      "Condition": "CreateSecurityGroups",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "619070e4-82e5-445a-93a0-4795ff69d61c"
        }
      }
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS ParallelCluster Master Server",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "45360a4f-64aa-49f8-b016-78fe5ed86819"
        }
      }
    },
    "AdditionalCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "AdditionalCfnTemplate"
        }
      },
      "Condition": "CreateSubStack"
    },
    "AWSBatchStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "CleanupResourcesCustomResource"
      ],
      "Properties": {
        "Parameters": {
          "MinvCpus": {
            "Ref": "MinSize"
          },
          "DesiredvCpus": {
            "Ref": "DesiredSize"
          },
          "MaxvCpus": {
            "Ref": "MaxSize"
          },
          "InstanceTypes": {
            "Ref": "ComputeInstanceType"
          },
          "Subnet": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "OS": {
            "Ref": "BaseOS"
          },
          "ClusterName": {
            "Ref": "AWS::StackName"
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SpotBidPercentage": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "Ref": "SpotPrice"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          }
        },
        "TemplateURL": {
          "Fn::If": [
            "UseCustomAWSBatchTemplateURL",
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            {
              "Fn::Sub": [
                "https://${s3_domain}/${AWS::Region}-aws-parallelcluster/templates/batch-substack-${version}.cfn.json",
                {
                  "s3_domain": {
                    "Fn::If": [
                      "GovCloudRegion",
                      {
                        "Fn::Sub": "s3-${AWS::Region}.amazonaws.com"
                      },
                      "s3.amazonaws.com"
                    ]
                  },
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cfncluster"
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      "Condition": "CreateAWSBatchStack"
    },
    "AssociateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e9ac6c41-8110-49b9-a92c-de57be8a292a"
        }
      }
    },
    "DynamicPlacementGroup": {
      "Type": "AWS::EC2::PlacementGroup",
      "Properties": {
        "Strategy": "cluster"
      },
      "Condition": "CreatePlacementGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ee5f3006-419e-4786-b527-e9503a662e5e"
        }
      }
    },
    "CleanupResourcesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${ResourcesS3Bucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ResourcesS3Bucket}/*"
                    }
                  ],
                  "Sid": "S3BucketPolicy"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ResourcesS3Bucket": {
          "Ref": "ResourcesS3Bucket"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CleanupResourcesFunction",
        "CleanupResourcesFunctionLogGroup"
      ],
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": "custom_resources_code/artifacts.zip"
        },
        "Handler": "cleanup_resources.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CleanupResourcesFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      },
      "Condition": "HasResourcesS3Bucket",
      "DependsOn": "CleanupResourcesFunctionExecutionRole"
    },
    "CleanupResourcesFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${CleanupResourcesFunction}"
        },
        "RetentionInDays": 1
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "EBSCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          },
          "VolumeSize": {
            "Ref": "VolumeSize"
          },
          "VolumeType": {
            "Ref": "VolumeType"
          },
          "VolumeIOPS": {
            "Ref": "VolumeIOPS"
          },
          "EBSEncryption": {
            "Ref": "EBSEncryption"
          },
          "EBSKMSKeyId": {
            "Ref": "EBSKMSKeyId"
          },
          "EBSVolumeId": {
            "Ref": "EBSVolumeId"
          },
          "EBSSnapshotId": {
            "Ref": "EBSSnapshotId"
          },
          "NumberOfEBSVol": {
            "Ref": "NumberOfEBSVol"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${s3_domain}/${AWS::Region}-aws-parallelcluster/templates/ebs-substack-${version}.cfn.json",
            {
              "s3_domain": {
                "Fn::If": [
                  "GovCloudRegion",
                  {
                    "Fn::Sub": "s3-${AWS::Region}.amazonaws.com"
                  },
                  "s3.amazonaws.com"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "cfncluster"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterUser": {
      "Description": "Username to login to Master host",
      "Value": {
        "Fn::FindInMap": [
          "OSFeatures",
          {
            "Ref": "BaseOS"
          },
          "User"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PrivateIp"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PublicIp"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PrivateIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PublicIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where AWS ParallelCluster resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "BatchComputeEnvironmentArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.ComputeEnvironmentArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobQueueArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    }
  }
}

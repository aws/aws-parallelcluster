{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS ParallelCluster Template. Version: aws-parallelcluster-2.1.1",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network - Basic Settings"
          },
          "Parameters": [
            "VPCId",
            "MasterSubnetId"
          ]
        },
        {
          "Label": {
            "default": "Cluster - Basic Setting"
          },
          "Parameters": [
            "KeyName",
            "AvailabilityZone",
            "MasterInstanceType",
            "ComputeInstanceType",
            "BaseOS",
            "Scheduler"
          ]
        },
        {
          "Label": {
            "default": "EBS - Basic Settings"
          },
          "Parameters": [
            "VolumeSize"
          ]
        },
        {
          "Label": {
            "default": "Network - Advanced Settings"
          },
          "Parameters": [
            "AccessFrom",
            "ComputeSubnetId",
            "ComputeSubnetCidr",
            "UsePublicIps",
            "AdditionalSG",
            "VPCSecurityGroupId"
          ]
        },
        {
          "Label": {
            "default": "Cluster - Advanced Setting"
          },
          "Parameters": [
            "MinSize",
            "DesiredSize",
            "MaxSize",
            "ComputeWaitConditionCount",
            "SpotPrice",
            "ClusterType",
            "ProxyServer",
            "CustomAMI",
            "PreInstallScript",
            "PreInstallArgs",
            "PostInstallArgs",
            "PostInstallScript",
            "S3ReadResource",
            "S3ReadWriteResource",
            "Placement",
            "PlacementGroup",
            "EncryptedEphemeral",
            "EphemeralDir",
            "SharedDir",
            "CustomChefRunList",
            "CustomChefCookbook",
            "ExtraJson",
            "Tenancy",
            "MasterRootVolumeSize",
            "ComputeRootVolumeSize",
            "EC2IAMRoleName"
          ]
        },
        {
          "Label": {
            "default": "EBS - Advanced Settings"
          },
          "Parameters": [
            "VolumeType",
            "EBSSnapshotId",
            "VolumeIOPS",
            "EBSEncryption",
            "EBSKMSKeyId",
            "EBSVolumeId"
          ]
        },
        {
          "Label": {
            "default": "Scaling Settings"
          },
          "Parameters": [
            "ScaleDownIdleTime"
          ]
        },
        {
          "Label": {
            "default": "Additonal Settings"
          },
          "Parameters": [
            "CLITemplate"
          ]
        }
      ],
      "ParameterLabels": {
        "KeyName": {
          "default": "key_name"
        },
        "AccessFrom": {
          "default": "access_from",
          "AccessFrom": {
            "default": "access_from"
          }
        },
        "VPCId": {
          "default": "vpc_id"
        },
        "MasterSubnetId": {
          "default": "master_subnet_id"
        },
        "ComputeSubnetId": {
          "default": "compute_subnet_id"
        },
        "ComputeSubnetCidr": {
          "default": "compute_subnet_cidr"
        },
        "UsePublicIps": {
          "default": "use_public_ips"
        },
        "AdditionalSG": {
          "default": "additional_sg"
        },
        "VPCSecurityGroupId": {
          "default": "vpc_security_group_id"
        },
        "ComputeInstanceType": {
          "default": "compute_instance_type"
        },
        "MasterInstanceType": {
          "default": "master_instance_type"
        },
        "MinSize": {
          "default": "initial_queue_size"
        },
        "DesiredSize": {
          "default": "desired_size"
        },
        "MaxSize": {
          "default": "max_queue_size"
        },
        "Scheduler": {
          "default": "scheduler"
        },
        "ClusterType": {
          "default": "cluster_type"
        },
        "EphemeralDir": {
          "default": "ephemeral_dir"
        },
        "SpotPrice": {
          "default": "spot_price"
        },
        "CustomAMI": {
          "default": "custom_ami"
        },
        "PreInstallScript": {
          "default": "pre_install"
        },
        "PostInstallScript": {
          "default": "post_install"
        },
        "PreInstallArgs": {
          "default": "pre_install_args"
        },
        "PostInstallArgs": {
          "default": "post_install_args"
        },
        "S3ReadResource": {
          "default": "s3_read_resource"
        },
        "S3ReadWriteResource": {
          "default": "s3_read_write_resource"
        },
        "ProxyServer": {
          "default": "proxy_server"
        },
        "Placement": {
          "default": "placement"
        },
        "PlacementGroup": {
          "default": "placement_group"
        },
        "EncryptedEphemeral": {
          "default": "encrypted_ephemeral"
        },
        "SharedDir": {
          "default": "shared_dir"
        },
        "Tenancy": {
          "default": "tenancy"
        },
        "MasterRootVolumeSize": {
          "default": "master_root_volume_size"
        },
        "ComputeRootVolumeSize": {
          "default": "compute_volume_size"
        },
        "BaseOS": {
          "default": "base_os"
        },
        "EC2IAMRoleName": {
          "default": "ec2_iam_role"
        },
        "ExtraJson": {
          "default": "extra_json"
        },
        "CustomChefCookbook": {
          "default": "custom_chef_cookbook"
        },
        "CustomChefRunList": {
          "default": "custom_chef_runlist"
        },
        "EBSSnapshotId": {
          "default": "ebs_snapshot_id"
        },
        "VolumeType": {
          "default": "volume_type"
        },
        "VolumeSize": {
          "default": "volume_size"
        },
        "EBSKMSKeyId": {
          "default": "ebs_kms_key_id"
        },
        "VolumeIOPS": {
          "default": "volume_iops"
        },
        "EBSEncryption": {
          "default": "ebs_encryption"
        },
        "EBSVolumeId": {
          "default": "ebs_volume_id"
        },
        "ScaleDownIdleTime": {
          "default": "scaledown_idletime"
        },
        "ComputeWaitConditionCount": {
          "default": "WAIT COUNT"
        },
        "AvailabilityZone": {
          "default": "AVAILABILITY ZONE"
        },
        "CLITemplate": {
          "default": "CLI TEMPLATE"
        }
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances using the default cluster user.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MasterInstanceType": {
      "Description": "MasterServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "ComputeInstanceType": {
      "Description": "ComputeFleet EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "MinSize": {
      "Description": "Initial number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "DesiredSize": {
      "Description": "Desired number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "MaxSize": {
      "Description": "Maximum number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "ComputeSubnetId": {
      "Description": "ID of the Subnet you want to provision the Compute Servers into",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^subnet-[0-9a-z]{8}$|^subnet-[0-9a-z]{17}$)"
    },
    "SpotPrice": {
      "Description": "Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType = \"spot\". When awsbatch is the scheduler, this is spot bid percentage.",
      "Type": "Number",
      "Default": "0.00"
    },
    "ClusterType": {
      "Description": "Type of cluster to launch. Can either be \"ondemand\" or \"spot\". Choosing \"spot\" will cause the ComputeFleet AutoScaling group to launch EC2 Spot instances. Default value is \"ondemand\".",
      "Type": "String",
      "Default": "ondemand",
      "ConstraintDescription": "Must be a supported cluster type: ondemand, spot",
      "AllowedValues": [
        "ondemand",
        "spot"
      ]
    },
    "ProxyServer": {
      "Description": "hostname and port of HTTP proxy server for cfn-init, boto and yum i.e. proxy.example.com:8080",
      "Type": "String",
      "Default": "NONE"
    },
    "VolumeSize": {
      "Description": "Comma delimited list of size of EBS volume in GB, if creating a new one",
      "Type": "String",
      "Default": "20, 20, 20, 20, 20"
    },
    "VolumeType": {
      "Description": "Comma delimited list of type of volume to create either new or from snapshot",
      "Type": "String",
      "Default": "gp2, gp2, gp2, gp2, gp2",
      "ConstraintDescription": "must be a supported volume type: standard, io1, gp2, st1, sc1",
      "AllowedPattern": "^(NONE|standard|io1|gp2|st1|sc1)((,|, )(NONE|standard|io1|gp2|st1|sc1)){4}$"
    },
    "MasterSubnetId": {
      "Description": "ID of the Subnet you want to provision the Master server into",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AvailabilityZone": {
      "Description": "Availability Zone the cluster will launch into. THIS IS REQUIRED",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "EBSSnapshotId": {
      "Description": "Comma delimited list of Id of EBS snapshot if using snapshot as source for volume",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE",
      "AllowedPattern": "^(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})((,|, )(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})){4}$"
    },
    "CustomAMI": {
      "Description": "ID of a Custom AMI, to use instead of published AMI's",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)"
    },
    "VPCId": {
      "Description": "ID of the VPC you want to provision cluster into. Only used with UseVPCBase=false",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AccessFrom": {
      "Description": "Lockdown SSH/HTTP access (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ComputeSubnetCidr": {
      "Description": "CIDR(s) for new backend subnet(s) i.e. 10.0.100.0/24. This is a comma-delimited list and can support multiple CIDR ranges for a multi-AZ cluster. The order and length of this list MUST match the AvailabilityZones parameter.",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "AllowedPattern": "(NONE|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "Default": "NONE"
    },
    "UsePublicIps": {
      "Description": "Boolean flag to use public IP's for instances. If false, the VPC must be correctly setup to use NAT for all traffic.",
      "Type": "String",
      "Default": "true",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeIOPS": {
      "Description": "Comma delimited list of number of IOPS for volume type io1. Not used for other volume types.",
      "Type": "String",
      "Default": "100, 100, 100, 100, 100"
    },
    "PreInstallScript": {
      "Description": "Preinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallScript": {
      "Description": "Postinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "ComputeWaitConditionCount": {
      "Description": "Specific number of instances to wait for while creating the cluster",
      "Type": "Number",
      "Default": "2"
    },
    "S3ReadResource": {
      "Description": "S3 resource with read access from AWS ParallelCluster nodes",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadWriteResource": {
      "Description": "Addtional policy document to be added to EC2 IAM role created and assigned to all nodes.",
      "Type": "String",
      "Default": "NONE"
    },
    "Placement": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "cluster",
      "AllowedValues": [
        "cluster",
        "compute"
      ]
    },
    "PlacementGroup": {
      "Description": "The name of an existing placement group",
      "Type": "String",
      "Default": "NONE"
    },
    "EncryptedEphemeral": {
      "Description": "Boolean flag to encrypt local ephemeral drives. The keys are in-memory and non-recoverable.",
      "Type": "String",
      "Default": "false",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "PreInstallArgs": {
      "Description": "Preinstall script args passed to the preinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallArgs": {
      "Description": "Postinstall script args passed to the postinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "EBSEncryption": {
      "Description": "Comma delimited list of boolean flag to use EBS encryption for /shared volume. (Not to be used for snapshots)",
      "Type": "String",
      "Default": "false, false, false, false, false",
      "ConstraintDescription": "true/false",
      "AllowedPattern": "^(NONE|true|false)((,|, )(NONE|true|false)){4}$"
    },
    "EphemeralDir": {
      "Description": "The path/mountpoint for the ephemeral drive",
      "Type": "String",
      "Default": "/scratch"
    },
    "BaseOS": {
      "Description": "Base OS type for cluster AMI",
      "Type": "String",
      "Default": "alinux",
      "ConstraintDescription": "must be a supported base OS",
      "AllowedValues": [
        "centos6",
        "centos7",
        "alinux",
        "ubuntu1404",
        "ubuntu1604"
      ]
    },
    "ScaleDownIdleTime": {
      "Description": "Period in minutes without jobs after which compute node will terminate ",
      "Type": "String",
      "Default": "10"
    },
    "Scheduler": {
      "Description": "Cluster scheduler",
      "Type": "String",
      "Default": "sge",
      "ConstraintDescription": "must be a supported scheduler",
      "AllowedValues": [
        "sge",
        "torque",
        "slurm",
        "custom",
        "awsbatch",
        "test"
      ]
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String",
      "Default": "/shared"
    },
    "CLITemplate": {
      "Description": "cluster_template section used in the config.",
      "Type": "String",
      "Default": "default"
    },
    "AdditionalSG": {
      "Description": "Additional VPC security group to be added to instances. Defaults to NONE",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "CustomChefRunList": {
      "Description": "Custom run list, which will override the default",
      "Type": "String",
      "Default": "NONE"
    },
    "CustomChefCookbook": {
      "Description": "URL of custom cookbook that will override the default. This will be unpacked and then dependencies resolved with Berkshelf.",
      "Type": "String",
      "Default": "NONE"
    },
    "ExtraJson": {
      "Description": "Extra json to be added to Chef dna.json",
      "Type": "String",
      "Default": "{}"
    },
    "Tenancy": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "default",
      "AllowedValues": [
        "default",
        "dedicated"
      ]
    },
    "EBSKMSKeyId": {
      "Description": "Comma delimited list of KMS ARN for customer created master key, will be used for EBS encryption",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE"
    },
    "MasterRootVolumeSize": {
      "Description": "Size of MasterServer EBS root volume in GB",
      "Type": "Number",
      "Default": "15",
      "MinValue": "15"
    },
    "ComputeRootVolumeSize": {
      "Description": "Size of ComputeFleet EBS root volume in GB",
      "Type": "Number",
      "Default": "15",
      "MinValue": "15"
    },
    "EC2IAMRoleName": {
      "Description": "Existing EC2 IAM role name",
      "Type": "String",
      "Default": "NONE"
    },
    "VPCSecurityGroupId": {
      "Description": "Existing VPC security group Id",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "EBSVolumeId": {
      "Description": "Comma delimited list of existing EBS volume Id",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE",
      "AllowedPattern": "^(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})((,|, )(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})){4}$"
    },
    "AdditionalCfnTemplate": {
      "Description": "A second CloudFormation template to launch with the cluster",
      "Type": "String",
      "Default": "NONE"
    },
    "CustomAWSBatchTemplateURL": {
      "Description": "URL of custom batch template that will override the default one.",
      "Type": "String",
      "Default": "NONE"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 bucket where resources needed by the stack are located. The bucket gets deleted on stack deletion.",
      "Type": "String",
      "Default": "NONE"
    },
    "RAIDOptions": {
      "Description": "Comma Separated List of RAID options",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|.+)(,|, )(NONE|\\d)(,|, )(NONE|\\d)(,|, )(NONE|standard|io1|gp2|st1|sc1)(,|, )(NONE|\\d+)(,|, )(NONE|\\d+)(,|, )(NONE|true|false)(,|, )(NONE|.+)$"
    },
    "NumberOfEBSVol": {
      "Description": "Number of EBS Volumes the user requested, up to 5",
      "Type": "Number",
      "Default": "1"
    },
    "EFSOptions": {
      "Description": "Comma separated list of efs related options, 8 parameters in total, [shared_dir,efs_fs_id,performance_mode,efs_kms_key_id,provisioned_throughput,encrypted,throughput_mode,valid_existing_MTorNot]",
      "Type": "String",
      "Default": "NONE, NONE, NONE, NONE, NONE, NONE, NONE, NONE"
    }
  },
  "Conditions": {
    "CreateEFSSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "EFSOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateRAIDSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "NONE",
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "RAIDOptions"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "IsMasterInstanceEbsOpt": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "cc2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cr1.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "g2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "i2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "i2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cg1.4xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.nano",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.micro",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.small",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.2xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "UseSpotInstances": {
      "Fn::Equals": [
        {
          "Ref": "ClusterType"
        },
        "spot"
      ]
    },
    "UseSpotPrice": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0.00"
          ]
        }
      ]
    },
    "CreateComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetCidr"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseCustomRunList": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomChefRunList"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAMI"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseProxy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ProxyServer"
            },
            "NONE"
          ]
        }
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIps"
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "UsePublicIps"
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "S3ReadResource"
            },
            "NONE"
          ]
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "Placement"
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "S3ReadWriteResource"
            },
            "NONE"
          ]
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSG"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseDedicatedTenancy": {
      "Fn::Equals": [
        {
          "Ref": "Tenancy"
        },
        "dedicated"
      ]
    },
    "UseEC2IAMRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EC2IAMRoleName"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateEC2IAMRole": {
      "Fn::Equals": [
        {
          "Ref": "EC2IAMRoleName"
        },
        "NONE"
      ]
    },
    "UseExistingSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCSecurityGroupId"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateSecurityGroups": {
      "Fn::Equals": [
        {
          "Ref": "VPCSecurityGroupId"
        },
        "NONE"
      ]
    },
    "CreateSubStack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalCfnTemplate"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreatePlacementGroup": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "DYNAMIC"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "GovCloudRegion": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition"
        },
        "aws-us-gov"
      ]
    },
    "ChinaRegion": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition"
        },
        "aws-cn"
      ]
    },
    "CreateLaunchTemplate": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Or": [
                {
                  "Condition": "ChinaRegion"
                },
                {
                  "Condition": "GovCloudRegion"
                }
              ]
            }
          ]
        },
        {
          "Condition": "CreateComputeFleet"
        }
      ]
    },
    "CreateLaunchConfig": {
      "Fn::And": [
        {
          "Fn::Or": [
            {
              "Condition": "ChinaRegion"
            },
            {
              "Condition": "GovCloudRegion"
            }
          ]
        },
        {
          "Condition": "CreateComputeFleet"
        }
      ]
    },
    "CreateComputeFleet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Scheduler"
            },
            "awsbatch"
          ]
        }
      ]
    },
    "CreateAWSBatchStack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "awsbatch"
      ]
    },
    "UseCustomAWSBatchTemplateURL": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            "NONE"
          ]
        }
      ]
    },
    "HasResourcesS3Bucket": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ResourcesS3Bucket"
            },
            "NONE"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "AWSRegionOS2AMI": {
      "ap-northeast-1": {
        "alinux": "ami-0ac1d0c35dc3b2a97",
        "centos6": "ami-003cfe6266cadd576",
        "centos7": "ami-0c0049e4eeb0ef1ac",
        "ubuntu1404": "ami-053a84278e34b7a59",
        "ubuntu1604": "ami-026669cfcef23b3de"
      },
      "ap-northeast-2": {
        "alinux": "ami-0dddb89f66485f828",
        "centos6": "ami-032b3f2a4f1ac91a0",
        "centos7": "ami-00f8f46a043a04530",
        "ubuntu1404": "ami-03d314c5ac10beb53",
        "ubuntu1604": "ami-048214d1413ed8462"
      },
      "ap-northeast-3": {
        "alinux": "ami-0dbb09bfada65298f",
        "centos6": "ami-0c4de7aece7b2db33",
        "centos7": "ami-0043e5e12872a00d4",
        "ubuntu1404": "ami-070f9069b20a797ec",
        "ubuntu1604": "ami-038900edb73cb9496"
      },
      "ap-south-1": {
        "alinux": "ami-0ed1bb8f2ab0edffb",
        "centos6": "ami-0581583c3d7507d9e",
        "centos7": "ami-03dd063b05c3082f1",
        "ubuntu1404": "ami-0641d7ca885530589",
        "ubuntu1604": "ami-0cc424ec58256ea88"
      },
      "ap-southeast-1": {
        "alinux": "ami-058bcd8377aba9bef",
        "centos6": "ami-0d00309b80b772532",
        "centos7": "ami-00fcdc55bd29f691e",
        "ubuntu1404": "ami-0e3de99412375e882",
        "ubuntu1604": "ami-059ba95190db36590"
      },
      "ap-southeast-2": {
        "alinux": "ami-012557ce9426ef1a0",
        "centos6": "ami-00ecf7e455945e8bc",
        "centos7": "ami-0baa1787fd7a71950",
        "ubuntu1404": "ami-09eae4580e8fc835a",
        "ubuntu1604": "ami-04df2433ab61d3f37"
      },
      "ca-central-1": {
        "alinux": "ami-059dda8ee9af7c20c",
        "centos6": "ami-0416d41ed6dbc0bd7",
        "centos7": "ami-0c2a8b54dfd0c405f",
        "ubuntu1404": "ami-08aeb7a57f73b58ab",
        "ubuntu1604": "ami-039a1b0ada060b5ce"
      },
      "cn-north-1": {
        "alinux": "ami-00237da8e056b0936",
        "ubuntu1404": "ami-00f2cae5406fb3fce",
        "ubuntu1604": "ami-072046713a0458796"
      },
      "cn-northwest-1": {
        "alinux": "ami-0974fc483e449f5ee"
      },
      "eu-central-1": {
        "alinux": "ami-09cff6787920e967c",
        "centos6": "ami-0b1f52047bb2b7f83",
        "centos7": "ami-00b3f34240b6021dd",
        "ubuntu1404": "ami-0b24a435216670b4a",
        "ubuntu1604": "ami-0d816068d1164f4d2"
      },
      "eu-north-1": {
        "alinux": "ami-086f4f382fb1119f0",
        "centos6": "ami-04fc976e8108996e6",
        "centos7": "ami-07ac74edc9e96b343",
        "ubuntu1404": "ami-0921b515f8ed512c3",
        "ubuntu1604": "ami-046c32486a9abf742"
      },
      "eu-west-1": {
        "alinux": "ami-080a7d5c75253bd1b",
        "centos6": "ami-073f1f5db6cfdd3d1",
        "centos7": "ami-0879d97613ba8075a",
        "ubuntu1404": "ami-076fbdec21cd5c940",
        "ubuntu1604": "ami-0f641e63ebaf647b1"
      },
      "eu-west-2": {
        "alinux": "ami-0b284f1028a743865",
        "centos6": "ami-0ace56d1d9c1aa466",
        "centos7": "ami-06aa0ca6f28c29fdb",
        "ubuntu1404": "ami-0fb01b5b56bc27509",
        "ubuntu1604": "ami-067c1c0157477c166"
      },
      "eu-west-3": {
        "alinux": "ami-099197e40d0c5de6e",
        "centos6": "ami-0d377bccde07c887d",
        "centos7": "ami-0b28dcaf2b4d00d87",
        "ubuntu1404": "ami-0ea8b79c622d0a4a2",
        "ubuntu1604": "ami-0102caf8c6ec0768a"
      },
      "sa-east-1": {
        "alinux": "ami-02e542e4935ff9647",
        "centos6": "ami-0b1c8f6aad337d5b6",
        "centos7": "ami-00a570d9536621660",
        "ubuntu1404": "ami-00cf3910c959e9fd5",
        "ubuntu1604": "ami-0ef5c70aec338bcfb"
      },
      "us-east-1": {
        "alinux": "ami-0cd2dd3198972a68c",
        "centos6": "ami-0919d912e0e33d247",
        "centos7": "ami-09d092c1b054832df",
        "ubuntu1404": "ami-095016c5ff0ab7ae6",
        "ubuntu1604": "ami-098c8e582ca818cff"
      },
      "us-east-2": {
        "alinux": "ami-057e70f0fbb007ab6",
        "centos6": "ami-0bbd43b2b8991cdae",
        "centos7": "ami-0e0cda1cdec7fcecf",
        "ubuntu1404": "ami-02a21f90af8a453f0",
        "ubuntu1604": "ami-055279b0b09d12a71"
      },
      "us-gov-east-1": {
        "alinux": "ami-022f96b137a63c9ff",
        "ubuntu1404": "ami-09274e2587c4154f2",
        "ubuntu1604": "ami-0b664ce8c427b77eb"
      },
      "us-gov-west-1": {
        "alinux": "ami-fefb989f",
        "ubuntu1404": "ami-6cf0930d",
        "ubuntu1604": "ami-5ef6953f"
      },
      "us-west-1": {
        "alinux": "ami-09686d4090e35a702",
        "centos6": "ami-0ac1cf1e68288fa36",
        "centos7": "ami-084c065e503e74449",
        "ubuntu1404": "ami-099ebeb456dbf0646",
        "ubuntu1604": "ami-0db5e85c0b1ce2c20"
      },
      "us-west-2": {
        "alinux": "ami-0c588cdc9e91b0db3",
        "centos6": "ami-08b28682da5721f5b",
        "centos7": "ami-070345cb145f2d2f0",
        "ubuntu1404": "ami-05ddc7ec0edb9069f",
        "ubuntu1604": "ami-02393fa61ac61547a"
      }
    },
    "OSFeatures": {
      "centos6": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "centos7": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "alinux": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "ubuntu1404": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      },
      "ubuntu1604": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      }
    },
    "Partition2Url": {
      "aws": {
        "url": "amazonaws.com"
      },
      "aws-us-gov": {
        "url": "amazonaws.com"
      },
      "aws-cn": {
        "url": "amazonaws.com.cn"
      }
    },
    "PackagesVersions": {
      "default": {
        "parallelcluster": "2.1.1",
        "cookbook": "aws-parallelcluster-cookbook-2.1.1",
        "chef": "14.2.0",
        "ridley": "5.1.1",
        "berkshelf": "7.0.4",
        "ami": "dev"
      }
    }
  },
  "Resources": {
    "EFSSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "SubnetId": {
            "Ref": "MasterSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/efs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateEFSSubstack"
    },
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600
      }
    },
    "SQSPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SendMessage-From-AS-SNS-Topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNS"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "SQS"
          }
        ]
      }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "SQS",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "instanceId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Fn::If": [
              "CreateAWSBatchStack",
              "arn:aws:iam::aws:policy/AWSBatchFullAccess",
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": [
                      "ec2.${s3_url}",
                      {
                        "s3_url": {
                          "Fn::FindInMap": [
                            "Partition2Url",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "url"
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Condition": "CreateEC2IAMRole"
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          }
        ]
      }
    },
    "ParallelClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:DescribeVolumes",
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "SQSQueue",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SQS",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Sid": "Autoscaling",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:DescribeTags"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "Cloudformation",
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":cloudformation:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":stack/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/",
                      {
                        "Ref": "DynamoDBTable"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "S3GetObj",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-aws-parallelcluster/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Sid": "S3PutObj",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*"
                }
              ]
            },
            {
              "Sid": "SQSList",
              "Action": [
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "BatchJobPassRole",
              "Action": [
                "iam:PassRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster-*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole"
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy"
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadWriteResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy"
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp"
    },
    "MasterServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "MasterInstanceType"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          },
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "OSFeatures",
                {
                  "Ref": "BaseOS"
                },
                "RootDevice"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "MasterRootVolumeSize"
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "Master"
          },
          {
            "Key": "aws-parallelcluster-attributes",
            "Value": {
              "Fn::Sub": [
                "${BaseOS}, ${Scheduler}, ${version}",
                {
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  }
                }
              ]
            }
          },
          {
            "Key": "aws-parallelcluster-filesystem",
            "Value": {
              "Fn::Sub": [
                "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
                {
                  "efs": {
                    "Fn::If": [
                      "CreateEFSSubstack",
                      "1",
                      "0"
                    ]
                  },
                  "raid": {
                    "Fn::If": [
                      "CreateRAIDSubstack",
                      "1",
                      "0"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "MasterENI"
            },
            "DeviceIndex": "0"
          }
        ],
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Ref": "CustomAMI"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "BaseOS"
                }
              ]
            }
          ]
        },
        "EbsOptimized": {
          "Fn::If": [
            "IsMasterInstanceEbsOpt",
            true,
            false
          ]
        },
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "PlacementGroupName": {
          "Fn::If": [
            "UseClusterPlacement",
            {
              "Fn::If": [
                "CreatePlacementGroup",
                {
                  "Ref": "DynamicPlacementGroup"
                },
                {
                  "Ref": "PlacementGroup"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tenancy": {
          "Ref": "Tenancy"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#cloud-config:\n",
                "runcmd:\n",
                " - [ sh, -c, 'which yum && echo \"proxy=",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "_none_"
                  ]
                },
                "\" >> /etc/yum.conf' ]\n",
                " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "false"
                  ]
                },
                "\\\";\" >> /etc/apt/apt.conf' ]\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#!/bin/bash -x\n\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "function bootstrap_instance\n",
                "{\n",
                "  which yum 2>/dev/null; yum=$?\n",
                "  which apt-get 2>/dev/null; apt=$?\n",
                "  if [ \"${yum}\" == \"0\" ]; then\n",
                "    yum -y groupinstall development && yum -y install curl wget jq\n",
                "  fi\n",
                "  if [ \"${apt}\" == \"0\" ]; then\n",
                "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq\n",
                "  fi\n",
                "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${_region}.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                "  curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                "  mkdir /opt/parallelcluster && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                "}\n",
                "proxy=",
                {
                  "Ref": "ProxyServer"
                },
                "\n",
                "custom_cookbook=",
                {
                  "Ref": "CustomChefCookbook"
                },
                "\n",
                "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "  touch /tmp/proxy.sh\n",
                "fi\n",
                "  export _region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "s3_url=",
                {
                  "Fn::FindInMap": [
                    "Partition2Url",
                    {
                      "Ref": "AWS::Partition"
                    },
                    "url"
                  ]
                },
                "\n",
                "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                "  cookbook_url=${custom_cookbook}\n",
                "else\n",
                "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                ".tgz\n",
                "fi\n",
                "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                "export parallelcluster_version=aws-parallelcluster-",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                },
                "\n",
                "export cookbook_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                "\n",
                "export chef_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "chef"
                  ]
                },
                "\n",
                "export ridley_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "ridley"
                  ]
                },
                "\n",
                "export berkshelf_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "berkshelf"
                  ]
                },
                "\n",
                "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                "    bootstrap_instance\n",
                "  fi\n",
                "else\n",
                "  bootstrap_instance\n",
                "fi\n",
                "mkdir /tmp/cookbooks\n",
                "cd /tmp/cookbooks\n",
                "curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                "cd /tmp\n",
                "# Call CloudFormation\n",
                "cfn-init ${proxy_args} -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -v -c default -r MasterServer --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=MasterServer --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# End of file\n",
                "--==BOUNDARY==\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Master server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_raid_vol_ids": {
                      "Fn::If": [
                        "CreateRAIDSubstack",
                        {
                          "Fn::GetAtt": [
                            "RAIDSubstack",
                            "Outputs.Volumeids"
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_base_os": {
                      "Ref": "BaseOS"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Fn::If": [
                        "CreateEFSSubstack",
                        {
                          "Fn::GetAtt": [
                            "EFSSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_volume": {
                      "Fn::GetAtt": [
                        "EBSCfnStack",
                        "Outputs.Volumeids"
                      ]
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_max_queue_size": {
                      "Ref": "MaxSize"
                    },
                    "compute_instance_type": {
                      "Ref": "ComputeInstanceType"
                    },
                    "cfn_node_type": "MasterServer",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    },
                    "cfn_ddb_table": {
                      "Ref": "DynamoDBTable"
                    },
                    "cfn_sqs_queue": {
                      "Fn::GetAtt": [
                        "SQS",
                        "QueueName"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": "if [ ! -f /opt/parallelcluster/.bootstrapped -o \"$(cat /opt/parallelcluster/.bootstrapped)\" != \"$parallelcluster_version\" -o \"$custom_cookbook\" != \"NONE\" ]; then . /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done; fi",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp",
                  "custom_cookbook": {
                    "Ref": "CustomChefCookbook"
                  },
                  "parallelcluster_version": {
                    "Fn::Join": [
                      "",
                      [
                        "aws-parallelcluster-",
                        {
                          "Fn::FindInMap": [
                            "PackagesVersions",
                            "default",
                            "parallelcluster"
                          ]
                        }
                      ]
                    ]
                  }
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "ComputeFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Fn::If": [
            "CreateLaunchConfig",
            {
              "Ref": "ComputeServerLaunchConfig"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "LaunchTemplate": {
          "Fn::If": [
            "CreateLaunchTemplate",
            {
              "LaunchTemplateId": {
                "Ref": "ComputeServerLaunchTemplate"
              },
              "Version": {
                "Fn::GetAtt": [
                  "ComputeServerLaunchTemplate",
                  "LatestVersionNumber"
                ]
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredSize"
        },
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "SNS"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_TERMINATE"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute",
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-attributes",
            "Value": {
              "Fn::Sub": [
                "${BaseOS}, ${Scheduler}, ${version}",
                {
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  }
                }
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-filesystem",
            "Value": {
              "Fn::Sub": [
                "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
                {
                  "efs": {
                    "Fn::If": [
                      "CreateEFSSubstack",
                      "1",
                      "0"
                    ]
                  },
                  "raid": {
                    "Fn::If": [
                      "CreateRAIDSubstack",
                      "1",
                      "0"
                    ]
                  }
                }
              ]
            },
            "PropagateAtLaunch": true
          }
        ],
        "PlacementGroup": {
          "Fn::If": [
            "UsePlacementGroup",
            {
              "Fn::If": [
                "CreatePlacementGroup",
                {
                  "Ref": "DynamicPlacementGroup"
                },
                {
                  "Ref": "PlacementGroup"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      },
      "DependsOn": "MasterServer",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M",
          "Count": {
            "Ref": "ComputeWaitConditionCount"
          }
        }
      },
      "Condition": "CreateComputeFleet"
    },
    "ComputeServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Condition": "CreateLaunchConfig",
      "Properties": {
        "SecurityGroups": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "ComputePublicIps",
            true,
            false
          ]
        },
        "InstanceType": {
          "Ref": "ComputeInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "SpotPrice": {
          "Fn::If": [
            "UseSpotInstances",
            {
              "Ref": "SpotPrice"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "ImageId": {
          "Fn::If": [
            "UseCustomAMI",
            {
              "Ref": "CustomAMI"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionOS2AMI",
                {
                  "Ref": "AWS::Region"
                },
                {
                  "Ref": "BaseOS"
                }
              ]
            }
          ]
        },
        "InstanceMonitoring": false,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdba",
            "VirtualName": "ephemeral0"
          },
          {
            "DeviceName": "/dev/xvdbb",
            "VirtualName": "ephemeral1"
          },
          {
            "DeviceName": "/dev/xvdbc",
            "VirtualName": "ephemeral2"
          },
          {
            "DeviceName": "/dev/xvdbd",
            "VirtualName": "ephemeral3"
          },
          {
            "DeviceName": "/dev/xvdbe",
            "VirtualName": "ephemeral4"
          },
          {
            "DeviceName": "/dev/xvdbf",
            "VirtualName": "ephemeral5"
          },
          {
            "DeviceName": "/dev/xvdbg",
            "VirtualName": "ephemeral6"
          },
          {
            "DeviceName": "/dev/xvdbh",
            "VirtualName": "ephemeral7"
          },
          {
            "DeviceName": "/dev/xvdbi",
            "VirtualName": "ephemeral8"
          },
          {
            "DeviceName": "/dev/xvdbj",
            "VirtualName": "ephemeral9"
          },
          {
            "DeviceName": "/dev/xvdbk",
            "VirtualName": "ephemeral10"
          },
          {
            "DeviceName": "/dev/xvdbl",
            "VirtualName": "ephemeral11"
          },
          {
            "DeviceName": "/dev/xvdbm",
            "VirtualName": "ephemeral12"
          },
          {
            "DeviceName": "/dev/xvdbn",
            "VirtualName": "ephemeral13"
          },
          {
            "DeviceName": "/dev/xvdbo",
            "VirtualName": "ephemeral14"
          },
          {
            "DeviceName": "/dev/xvdbp",
            "VirtualName": "ephemeral15"
          },
          {
            "DeviceName": "/dev/xvdbq",
            "VirtualName": "ephemeral16"
          },
          {
            "DeviceName": "/dev/xvdbr",
            "VirtualName": "ephemeral17"
          },
          {
            "DeviceName": "/dev/xvdbs",
            "VirtualName": "ephemeral18"
          },
          {
            "DeviceName": "/dev/xvdbt",
            "VirtualName": "ephemeral19"
          },
          {
            "DeviceName": "/dev/xvdbu",
            "VirtualName": "ephemeral20"
          },
          {
            "DeviceName": "/dev/xvdbv",
            "VirtualName": "ephemeral21"
          },
          {
            "DeviceName": "/dev/xvdbw",
            "VirtualName": "ephemeral22"
          },
          {
            "DeviceName": "/dev/xvdbx",
            "VirtualName": "ephemeral23"
          },
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "OSFeatures",
                {
                  "Ref": "BaseOS"
                },
                "RootDevice"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "ComputeRootVolumeSize"
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "PlacementTenancy": {
          "Fn::If": [
            "UseDedicatedTenancy",
            {
              "Ref": "Tenancy"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                "MIME-Version: 1.0\n\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#cloud-config:\n",
                "runcmd:\n",
                " - [ sh, -c, 'which yum && echo \"proxy=",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "_none_"
                  ]
                },
                "\" >> /etc/yum.conf' ]\n",
                " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                {
                  "Fn::If": [
                    "UseProxy",
                    {
                      "Ref": "ProxyServer"
                    },
                    "false"
                  ]
                },
                "\\\";\" >> /etc/apt/apt.conf' ]\n",
                "--==BOUNDARY==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n\n",
                "#!/bin/bash -x\n\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "  exit 1\n",
                "}\n",
                "function bootstrap_instance\n",
                "{\n",
                "  which yum 2>/dev/null; yum=$?\n",
                "  which apt-get 2>/dev/null; apt=$?\n",
                "  if [ \"${yum}\" == \"0\" ]; then\n",
                "    yum -y groupinstall development && yum -y install curl wget jq\n",
                "  fi\n",
                "  if [ \"${apt}\" == \"0\" ]; then\n",
                "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq\n",
                "  fi\n",
                "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${_region}.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                "  curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                "  mkdir /opt/parallelcluster && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                "}\n",
                "proxy=",
                {
                  "Ref": "ProxyServer"
                },
                "\n",
                "custom_cookbook=",
                {
                  "Ref": "CustomChefCookbook"
                },
                "\n",
                "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                "else\n",
                "  proxy_args=\"\"\n",
                "  touch /tmp/proxy.sh\n",
                "fi\n",
                "  _region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "s3_url=",
                {
                  "Fn::FindInMap": [
                    "Partition2Url",
                    {
                      "Ref": "AWS::Partition"
                    },
                    "url"
                  ]
                },
                "\n",
                "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                "  cookbook_url=${custom_cookbook}\n",
                "else\n",
                "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                ".tgz\n",
                "fi\n",
                "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                "export parallelcluster_version=aws-parallelcluster-",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                },
                "\n",
                "export cookbook_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "cookbook"
                  ]
                },
                "\n",
                "export chef_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "chef"
                  ]
                },
                "\n",
                "export ridley_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "ridley"
                  ]
                },
                "\n",
                "export berkshelf_version=",
                {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "berkshelf"
                  ]
                },
                "\n",
                "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                "    bootstrap_instance\n",
                "  fi\n",
                "else\n",
                "  bootstrap_instance\n",
                "fi\n",
                "mkdir /tmp/cookbooks\n",
                "cd /tmp/cookbooks\n",
                "curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                "cd /tmp\n",
                "# Call CloudFormation\n",
                "cfn-init ${proxy_args} -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -v -c default -r ComputeServerLaunchConfig --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource=ComputeFleet --region=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# End of file\n",
                "--==BOUNDARY==\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "signalComputeReady"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Fn::If": [
                        "CreateEFSSubstack",
                        {
                          "Fn::GetAtt": [
                            "EFSSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQS"
                    },
                    "cfn_master": {
                      "Fn::GetAtt": [
                        "MasterServer",
                        "PrivateDnsName"
                      ]
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": "if [ ! -f /opt/parallelcluster/.bootstrapped -o \"$(cat /opt/parallelcluster/.bootstrapped)\" != \"$parallelcluster_version\" -o \"$custom_cookbook\" != \"NONE\" ]; then . /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done; fi",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp",
                  "custom_cookbook": {
                    "Ref": "CustomChefCookbook"
                  },
                  "parallelcluster_version": {
                    "Fn::Join": [
                      "",
                      [
                        "aws-parallelcluster-",
                        {
                          "Fn::FindInMap": [
                            "PackagesVersions",
                            "default",
                            "parallelcluster"
                          ]
                        }
                      ]
                    ]
                  }
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "signalComputeReady": {
            "commands": {
              "compute_ready": {
                "command": "/opt/parallelcluster/scripts/compute_ready"
              }
            }
          }
        }
      }
    },
    "ComputeServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "AssociatePublicIpAddress": {
                "Fn::If": [
                  "ComputePublicIps",
                  true,
                  false
                ]
              }
            }
          ],
          "InstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "RootInstanceProfile"
            }
          },
          "InstanceMarketOptions": {
            "Fn::If": [
              "UseSpotInstances",
              {
                "SpotOptions": {
                  "SpotInstanceType": "one-time",
                  "InstanceInterruptionBehavior": "terminate",
                  "MaxPrice": {
                    "Fn::If": [
                      "UseSpotPrice",
                      {
                        "Ref": "SpotPrice"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                "MarketType": "spot"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::FindInMap": [
                  "AWSRegionOS2AMI",
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "BaseOS"
                  }
                ]
              }
            ]
          },
          "Monitoring": {
            "Enabled": false
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdba",
              "VirtualName": "ephemeral0"
            },
            {
              "DeviceName": "/dev/xvdbb",
              "VirtualName": "ephemeral1"
            },
            {
              "DeviceName": "/dev/xvdbc",
              "VirtualName": "ephemeral2"
            },
            {
              "DeviceName": "/dev/xvdbd",
              "VirtualName": "ephemeral3"
            },
            {
              "DeviceName": "/dev/xvdbe",
              "VirtualName": "ephemeral4"
            },
            {
              "DeviceName": "/dev/xvdbf",
              "VirtualName": "ephemeral5"
            },
            {
              "DeviceName": "/dev/xvdbg",
              "VirtualName": "ephemeral6"
            },
            {
              "DeviceName": "/dev/xvdbh",
              "VirtualName": "ephemeral7"
            },
            {
              "DeviceName": "/dev/xvdbi",
              "VirtualName": "ephemeral8"
            },
            {
              "DeviceName": "/dev/xvdbj",
              "VirtualName": "ephemeral9"
            },
            {
              "DeviceName": "/dev/xvdbk",
              "VirtualName": "ephemeral10"
            },
            {
              "DeviceName": "/dev/xvdbl",
              "VirtualName": "ephemeral11"
            },
            {
              "DeviceName": "/dev/xvdbm",
              "VirtualName": "ephemeral12"
            },
            {
              "DeviceName": "/dev/xvdbn",
              "VirtualName": "ephemeral13"
            },
            {
              "DeviceName": "/dev/xvdbo",
              "VirtualName": "ephemeral14"
            },
            {
              "DeviceName": "/dev/xvdbp",
              "VirtualName": "ephemeral15"
            },
            {
              "DeviceName": "/dev/xvdbq",
              "VirtualName": "ephemeral16"
            },
            {
              "DeviceName": "/dev/xvdbr",
              "VirtualName": "ephemeral17"
            },
            {
              "DeviceName": "/dev/xvdbs",
              "VirtualName": "ephemeral18"
            },
            {
              "DeviceName": "/dev/xvdbt",
              "VirtualName": "ephemeral19"
            },
            {
              "DeviceName": "/dev/xvdbu",
              "VirtualName": "ephemeral20"
            },
            {
              "DeviceName": "/dev/xvdbv",
              "VirtualName": "ephemeral21"
            },
            {
              "DeviceName": "/dev/xvdbw",
              "VirtualName": "ephemeral22"
            },
            {
              "DeviceName": "/dev/xvdbx",
              "VirtualName": "ephemeral23"
            },
            {
              "DeviceName": {
                "Fn::FindInMap": [
                  "OSFeatures",
                  {
                    "Ref": "BaseOS"
                  },
                  "RootDevice"
                ]
              },
              "Ebs": {
                "VolumeSize": {
                  "Ref": "ComputeRootVolumeSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "Placement": {
            "Fn::If": [
              "UseDedicatedTenancy",
              {
                "Tenancy": {
                  "Ref": "Tenancy"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                  "MIME-Version: 1.0\n\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#cloud-config:\n",
                  "runcmd:\n",
                  " - [ sh, -c, 'which yum && echo \"proxy=",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "_none_"
                    ]
                  },
                  "\" >> /etc/yum.conf' ]\n",
                  " - [ sh, -c, 'which apt-get && echo \"Acquire::http::Proxy \\\"",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "false"
                    ]
                  },
                  "\\\";\" >> /etc/apt/apt.conf' ]\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "function error_exit\n",
                  "{\n",
                  "  cfn-signal ${proxy_args} --exit-code=1 --reason=\"$1\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  exit 1\n",
                  "}\n",
                  "function bootstrap_instance\n",
                  "{\n",
                  "  which yum 2>/dev/null; yum=$?\n",
                  "  which apt-get 2>/dev/null; apt=$?\n",
                  "  if [ \"${yum}\" == \"0\" ]; then\n",
                  "    yum -y groupinstall development && yum -y install curl wget jq\n",
                  "  fi\n",
                  "  if [ \"${apt}\" == \"0\" ]; then\n",
                  "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq\n",
                  "  fi\n",
                  "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${_region}.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                  "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                  "  curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}\n",
                  "  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                  "  mkdir /opt/parallelcluster && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped\n",
                  "}\n",
                  "proxy=",
                  {
                    "Ref": "ProxyServer"
                  },
                  "\n",
                  "custom_cookbook=",
                  {
                    "Ref": "CustomChefCookbook"
                  },
                  "\n",
                  "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                  "  proxy_args=\"--http-proxy=${proxy} --https-proxy=${proxy}\"\n",
                  "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                  "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                  "  export http_proxy=${proxy}; export https_proxy=${http_proxy}\n",
                  "  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\n",
                  "  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n",
                  "  echo -e \"export http_proxy=${proxy}; export https_proxy=${http_proxy}\nexport HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}\nexport no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254\n\" >/tmp/proxy.sh\n",
                  "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                  "else\n",
                  "  proxy_args=\"\"\n",
                  "  touch /tmp/proxy.sh\n",
                  "fi\n",
                  "  export _region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "s3_url=",
                  {
                    "Fn::FindInMap": [
                      "Partition2Url",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "url"
                    ]
                  },
                  "\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  cookbook_url=${custom_cookbook}\n",
                  "else\n",
                  "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  ".tgz\n",
                  "fi\n",
                  "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                  "export parallelcluster_version=aws-parallelcluster-",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  },
                  "\n",
                  "export cookbook_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  "\n",
                  "export chef_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "chef"
                    ]
                  },
                  "\n",
                  "export ridley_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "ridley"
                    ]
                  },
                  "\n",
                  "export berkshelf_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "berkshelf"
                    ]
                  },
                  "\n",
                  "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                  "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                  "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                  "    bootstrap_instance\n",
                  "  fi\n",
                  "else\n",
                  "  bootstrap_instance\n",
                  "fi\n",
                  "mkdir /tmp/cookbooks\n",
                  "cd /tmp/cookbooks\n",
                  "curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                  "tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                  "cd /tmp\n",
                  "# Call CloudFormation\n",
                  "cfn-init ${proxy_args} -s ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " -v -c default -r ComputeServerLaunchTemplate --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                  "cfn-signal ${proxy_args} --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# End of file\n",
                  "--==BOUNDARY==\n"
                ]
              ]
            }
          }
        }
      },
      "Condition": "CreateLaunchTemplate",
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "getCookbooks",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "signalComputeReady"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Fn::If": [
                        "CreateEFSSubstack",
                        {
                          "Fn::GetAtt": [
                            "EFSSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQS"
                    },
                    "cfn_master": {
                      "Fn::GetAtt": [
                        "MasterServer",
                        "PrivateDnsName"
                      ]
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::If": [
                      "UseCustomRunList",
                      {
                        "Ref": "CustomChefRunList"
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "recipe[aws-parallelcluster::",
                            {
                              "Ref": "Scheduler"
                            },
                            "_config]"
                          ]
                        ]
                      }
                    ]
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "getCookbooks": {
            "commands": {
              "berk": {
                "command": "if [ ! -f /opt/parallelcluster/.bootstrapped -o \"$(cat /opt/parallelcluster/.bootstrapped)\" != \"$parallelcluster_version\" -o \"$custom_cookbook\" != \"NONE\" ]; then . /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete; done; fi",
                "cwd": "/tmp/cookbooks",
                "env": {
                  "HOME": "/tmp",
                  "custom_cookbook": {
                    "Ref": "CustomChefCookbook"
                  },
                  "parallelcluster_version": {
                    "Fn::Join": [
                      "",
                      [
                        "aws-parallelcluster-",
                        {
                          "Fn::FindInMap": [
                            "PackagesVersions",
                            "default",
                            "parallelcluster"
                          ]
                        }
                      ]
                    ]
                  }
                }
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "signalComputeReady": {
            "commands": {
              "compute_ready": {
                "command": "/opt/parallelcluster/scripts/compute_ready"
              }
            }
          }
        }
      }
    },
    "ComputeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "CidrBlock": {
          "Ref": "ComputeSubnetCidr"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ]
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "ComputeSubnet"
        },
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Master host",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "AccessFrom"
            }
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": 0,
            "ToPort": 65535
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS ParallelCluster Master Server",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": false,
        "GroupSet": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      }
    },
    "AdditionalCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "AdditionalCfnTemplate"
        }
      },
      "Condition": "CreateSubStack"
    },
    "AWSBatchStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "CleanupResourcesCustomResource"
      ],
      "Properties": {
        "Parameters": {
          "AttributeTags": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "S3Url": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "FileSystemTags": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "EFSSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "EFSOptions"
                  }
                ]
              }
            ]
          },
          "EFSFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "MinvCpus": {
            "Ref": "MinSize"
          },
          "DesiredvCpus": {
            "Ref": "DesiredSize"
          },
          "MaxvCpus": {
            "Ref": "MaxSize"
          },
          "InstanceTypes": {
            "Ref": "ComputeInstanceType"
          },
          "Subnet": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "OS": {
            "Ref": "BaseOS"
          },
          "ClusterName": {
            "Ref": "AWS::StackName"
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SpotBidPercentage": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "Ref": "SpotPrice"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "RAIDSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "RAIDOptions"
                  }
                ]
              }
            ]
          }
        },
        "TemplateURL": {
          "Fn::If": [
            "UseCustomAWSBatchTemplateURL",
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            {
              "Fn::Sub": [
                "https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/batch-substack-${version}.cfn.json",
                {
                  "s3_url": {
                    "Fn::FindInMap": [
                      "Partition2Url",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "url"
                    ]
                  },
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      "Condition": "CreateAWSBatchStack"
    },
    "AssociateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp"
    },
    "DynamicPlacementGroup": {
      "Type": "AWS::EC2::PlacementGroup",
      "Properties": {
        "Strategy": "cluster"
      },
      "Condition": "CreatePlacementGroup"
    },
    "CleanupResourcesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": [
                      "lambda.${s3_url}",
                      {
                        "s3_url": {
                          "Fn::FindInMap": [
                            "Partition2Url",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "url"
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${ResourcesS3Bucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ResourcesS3Bucket}/*"
                    }
                  ],
                  "Sid": "S3BucketPolicy"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ResourcesS3Bucket": {
          "Ref": "ResourcesS3Bucket"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CleanupResourcesFunctionLogGroup"
      ],
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": "custom_resources_code/artifacts.zip"
        },
        "Handler": "cleanup_resources.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CleanupResourcesFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${CleanupResourcesFunction}"
        },
        "RetentionInDays": 1
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "RAIDSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/raid-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateRAIDSubstack"
    },
    "EBSCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          },
          "VolumeSize": {
            "Ref": "VolumeSize"
          },
          "VolumeType": {
            "Ref": "VolumeType"
          },
          "VolumeIOPS": {
            "Ref": "VolumeIOPS"
          },
          "EBSEncryption": {
            "Ref": "EBSEncryption"
          },
          "EBSKMSKeyId": {
            "Ref": "EBSKMSKeyId"
          },
          "EBSVolumeId": {
            "Ref": "EBSVolumeId"
          },
          "EBSSnapshotId": {
            "Ref": "EBSSnapshotId"
          },
          "NumberOfEBSVol": {
            "Ref": "NumberOfEBSVol"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/ebs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterUser": {
      "Description": "Username to login to Master host",
      "Value": {
        "Fn::FindInMap": [
          "OSFeatures",
          {
            "Ref": "BaseOS"
          },
          "User"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PrivateIp"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PublicIp"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PrivateIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PublicIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where AWS ParallelCluster resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "BatchComputeEnvironmentArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.ComputeEnvironmentArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobQueueArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionMnpArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.MNPJobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchUserRole": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.BatchUserRole"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "CLITemplate": {
      "Value": {
        "Ref": "CLITemplate"
      }
    }
  }
}

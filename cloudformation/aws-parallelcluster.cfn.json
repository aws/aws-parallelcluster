{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS ParallelCluster Template. Version: aws-parallelcluster-2.8.0",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances using the default cluster user.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MasterInstanceType": {
      "Description": "MasterServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "ComputeInstanceType": {
      "Description": "ComputeFleet EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 instance type, with support for HVM."
    },
    "MinSize": {
      "Description": "Initial number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "DesiredSize": {
      "Description": "Desired number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "MaxSize": {
      "Description": "Maximum number of compute EC2 instances / vCpus to launch within the cluster.",
      "Type": "Number"
    },
    "ComputeSubnetId": {
      "Description": "ID of the Subnet you want to provision the Compute Servers into",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^subnet-[0-9a-z]{8}$|^subnet-[0-9a-z]{17}$)"
    },
    "SpotPrice": {
      "Description": "Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType = \"spot\". When awsbatch is the scheduler, this is spot bid percentage.",
      "Type": "Number",
      "Default": "0"
    },
    "ClusterType": {
      "Description": "Type of cluster to launch. Can either be \"ondemand\" or \"spot\". Choosing \"spot\" will cause the ComputeFleet AutoScaling group to launch EC2 Spot instances. Default value is \"ondemand\".",
      "Type": "String",
      "Default": "ondemand",
      "ConstraintDescription": "Must be a supported cluster type: ondemand, spot",
      "AllowedValues": [
        "ondemand",
        "spot"
      ]
    },
    "ProxyServer": {
      "Description": "hostname and port of HTTP proxy server for cfn-init, boto and yum i.e. proxy.example.com:8080",
      "Type": "String",
      "Default": "NONE"
    },
    "VolumeSize": {
      "Description": "Comma delimited list of size of EBS volume in GB, if creating a new one",
      "Type": "String",
      "Default": "20,20,20,20,20"
    },
    "VolumeType": {
      "Description": "Comma delimited list of type of volume to create either new or from snapshot",
      "Type": "String",
      "Default": "gp2,gp2,gp2,gp2,gp2",
      "ConstraintDescription": "must be a supported volume type: standard, io1, gp2, st1, sc1",
      "AllowedPattern": "^(NONE|standard|io1|gp2|st1|sc1)((,|, )(NONE|standard|io1|gp2|st1|sc1)){4}$"
    },
    "MasterSubnetId": {
      "Description": "ID of the Subnet you want to provision the Master server into",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AvailabilityZone": {
      "Description": "Availability Zone the cluster will launch into. THIS IS REQUIRED",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "EBSSnapshotId": {
      "Description": "Comma delimited list of Id of EBS snapshot if using snapshot as source for volume",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})((,|, )(NONE|snap-[0-9a-z]{8}|snap-[0-9a-z]{17})){4}$"
    },
    "CustomAMI": {
      "Description": "ID of a Custom AMI, to use instead of published AMI's",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)"
    },
    "VPCId": {
      "Description": "ID of the VPC you want to provision cluster into. Only used with UseVPCBase=false",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AccessFrom": {
      "Description": "Lockdown SSH/HTTP access (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "ComputeSubnetCidr": {
      "Description": "CIDR(s) for new backend subnet(s) i.e. 10.0.100.0/24. This is a comma-delimited list and can support multiple CIDR ranges for a multi-AZ cluster. The order and length of this list MUST match the AvailabilityZones parameter.",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "AllowedPattern": "(NONE|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))",
      "Default": "NONE"
    },
    "UsePublicIps": {
      "Description": "Boolean flag to use public IP's for instances. If false, the VPC must be correctly setup to use NAT for all traffic.",
      "Type": "String",
      "Default": "true",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeIOPS": {
      "Description": "Comma delimited list of number of IOPS for volume type io1. Not used for other volume types.",
      "Type": "String",
      "Default": "100,100,100,100,100"
    },
    "PreInstallScript": {
      "Description": "Preinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallScript": {
      "Description": "Postinstall script URL. This is run before any host configuration.",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadResource": {
      "Description": "S3 resource with read access from AWS ParallelCluster nodes",
      "Type": "String",
      "Default": "NONE"
    },
    "S3ReadWriteResource": {
      "Description": "Addtional policy document to be added to EC2 IAM role created and assigned to all nodes.",
      "Type": "String",
      "Default": "NONE"
    },
    "Placement": {
      "Description": "Type of placement requird in AWS ParallelCluster, it can either be cluster or compute.",
      "Type": "String",
      "Default": "compute",
      "AllowedValues": [
        "cluster",
        "compute"
      ]
    },
    "PlacementGroup": {
      "Description": "The name of an existing placement group",
      "Type": "String",
      "Default": "NONE"
    },
    "EncryptedEphemeral": {
      "Description": "Boolean flag to encrypt local ephemeral drives. The keys are in-memory and non-recoverable.",
      "Type": "String",
      "Default": "false",
      "ConstraintDescription": "true/false",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "PreInstallArgs": {
      "Description": "Preinstall script args passed to the preinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "PostInstallArgs": {
      "Description": "Postinstall script args passed to the postinstall script.",
      "Type": "String",
      "Default": "NONE"
    },
    "EBSEncryption": {
      "Description": "Comma delimited list of boolean flag to use EBS encryption for /shared volume. (Not to be used for snapshots)",
      "Type": "String",
      "Default": "false,false,false,false,false",
      "ConstraintDescription": "true/false",
      "AllowedPattern": "^(NONE|true|false)((,|, )(NONE|true|false)){4}$"
    },
    "EphemeralDir": {
      "Description": "The path/mountpoint for the ephemeral drive",
      "Type": "String",
      "Default": "/scratch"
    },
    "BaseOS": {
      "Description": "Base OS type for cluster AMI",
      "Type": "String",
      "Default": "alinux2",
      "ConstraintDescription": "must be a supported base OS",
      "AllowedValues": [
        "centos6",
        "centos7",
        "alinux",
        "alinux2",
        "ubuntu1604",
        "ubuntu1804"
      ]
    },
    "Architecture": {
      "Description": "Architecture to use when selecting default AMIs",
      "Type": "String",
      "Default": "x86_64",
      "ConstraintDescription": "Must be either x86_64 or arm64",
      "AllowedValues": [
        "x86_64",
        "arm64"
      ]
    },
    "ScaleDownIdleTime": {
      "Description": "Period in minutes without jobs after which compute node will terminate ",
      "Type": "String",
      "Default": "10"
    },
    "Scheduler": {
      "Description": "Cluster scheduler",
      "Type": "String",
      "Default": "slurm",
      "ConstraintDescription": "must be a supported scheduler",
      "AllowedValues": [
        "sge",
        "torque",
        "slurm",
        "awsbatch"
      ]
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String",
      "Default": "/shared"
    },
    "ClusterConfigMetadata": {
      "Description": "Cluster configuration metadata.",
      "Type": "String",
      "Default": "{}"
    },
    "AdditionalSG": {
      "Description": "Additional VPC security group to be added to instances. Defaults to NONE",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "CustomChefCookbook": {
      "Description": "URL of custom cookbook that will override the default. This will be unpacked and then dependencies resolved with Berkshelf.",
      "Type": "String",
      "Default": "NONE"
    },
    "ExtraJson": {
      "Description": "Extra json to be added to Chef dna.json",
      "Type": "String",
      "Default": "{}"
    },
    "EBSKMSKeyId": {
      "Description": "Comma delimited list of KMS ARN for customer created master key, will be used for EBS encryption",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE"
    },
    "MasterRootVolumeSize": {
      "Description": "Size of MasterServer EBS root volume in GB",
      "Type": "Number",
      "Default": "25",
      "MinValue": "25"
    },
    "ComputeRootVolumeSize": {
      "Description": "Size of ComputeFleet EBS root volume in GB",
      "Type": "Number",
      "Default": "25",
      "MinValue": "25"
    },
    "EC2IAMRoleName": {
      "Description": "Existing EC2 IAM role name",
      "Type": "String",
      "Default": "NONE"
    },
    "EC2IAMPolicies": {
      "Description": "Attach additional IAM Policies to the created Root Role",
      "Type": "CommaDelimitedList",
      "Default": "NONE"
    },
    "VPCSecurityGroupId": {
      "Description": "Existing VPC security group Id",
      "Type": "String",
      "Default": "NONE",
      "AllowedPattern": "(NONE|^sg-[0-9a-z]{8}$|^sg-[0-9a-z]{17}$)"
    },
    "EBSVolumeId": {
      "Description": "Comma delimited list of existing EBS volume Id",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})((,|, )(NONE|vol-[0-9a-z]{8}|vol-[0-9a-z]{17})){4}$"
    },
    "AdditionalCfnTemplate": {
      "Description": "A second CloudFormation template to launch with the cluster",
      "Type": "String",
      "Default": "NONE"
    },
    "CustomAWSBatchTemplateURL": {
      "Description": "URL of custom batch template that will override the default one.",
      "Type": "String",
      "Default": "NONE"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 bucket where resources needed by the stack are located. The bucket gets deleted on stack deletion.",
      "Type": "String",
      "Default": "NONE"
    },
    "RAIDOptions": {
      "Description": "Comma Separated List of RAID options",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE",
      "AllowedPattern": "^(NONE|.+)(,|, )(NONE|\\d)(,|, )(NONE|\\d)(,|, )(NONE|standard|io1|gp2|st1|sc1)(,|, )(NONE|\\d+)(,|, )(NONE|\\d+)(,|, )(NONE|true|false)(,|, )(NONE|.+)$"
    },
    "NumberOfEBSVol": {
      "Description": "Number of EBS Volumes the user requested, up to 5",
      "Type": "Number",
      "Default": "1"
    },
    "FSXOptions": {
      "Description": "Comma separated list of FSx related options, 14 parameters in total, [shared_dir,fsx_fs_id,storage_capacity,fsx_kms_key_id,imported_file_chunk_size,export_path,import_path,weekly_maintenance_start_time,deployment_type,per_unit_storage_throughput,daily_automatic_backup_start_time,automatic_backup_retention_days,copy_tags_to_backups,fsx_backup_id]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "EFSOptions": {
      "Description": "Comma separated list of efs related options, 9 parameters in total, [shared_dir,efs_fs_id,performance_mode,efs_kms_key_id,provisioned_throughput,encrypted,throughput_mode,exists_valid_master_mt,exists_valid_compute_mt]",
      "Type": "String",
      "Default": "NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE"
    },
    "Cores": {
      "Description": "Comma seperated string of [master cores], [compute cores]. If set to -1,-1 no CpuOptions are set.",
      "Type": "CommaDelimitedList",
      "Default": "-1,-1"
    },
    "EFA": {
      "Description": "Enable EFA on the compute nodes, enable_efa = compute",
      "Type": "String",
      "Default": "NONE"
    },
    "DCVOptions": {
      "Description": "Comma separated list of NICE DCV related options, 3 parameters in total, [enabled,port,access_from]",
      "Type": "String",
      "Default": "NONE,NONE,NONE"
    },
    "IntelHPCPlatform": {
      "Description": "Enable Intel HPC Platform packages.",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "CWLogOptions": {
      "Description": "Comma separated list of CloudWatch logging, 2 parameters in total, [enabled, retention_days]",
      "Type": "String",
      "Default": "true,14"
    }
  },
  "Conditions": {
    "CreateEFSSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "EFSOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateRAIDSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "NONE",
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "RAIDOptions"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "IsMasterInstanceEbsOpt": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "cc2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cr1.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "g2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "m3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "c3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "r3.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "i2.8xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            },
            {
              "Fn::Or": [
                {
                  "Fn::Equals": [
                    "i2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "cg1.4xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.nano",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.micro",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.small",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.medium",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.large",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                },
                {
                  "Fn::Equals": [
                    "t2.2xlarge",
                    {
                      "Ref": "MasterInstanceType"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "CreateFSXSubstack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    ",",
                    {
                      "Ref": "FSXOptions"
                    }
                  ]
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "UseSpotInstances": {
      "Fn::Equals": [
        {
          "Ref": "ClusterType"
        },
        "spot"
      ]
    },
    "UseSpotPrice": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "SpotPrice"
            },
            "0"
          ]
        }
      ]
    },
    "CreateComputeSubnetForCompute": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            "NONE"
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        }
      ]
    },
    "UseMasterSubnetForCompute": {
      "Fn::Or": [
        {
          "Fn::And": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetId"
                },
                "NONE"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "ComputeSubnetCidr"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ComputeSubnetId"
            },
            {
              "Ref": "MasterSubnetId"
            }
          ]
        }
      ]
    },
    "UseCustomAMI": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAMI"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseProxy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ProxyServer"
            },
            "NONE"
          ]
        }
      ]
    },
    "MasterPublicIp": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIps"
        },
        "true"
      ]
    },
    "ComputePublicIps": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "UsePublicIps"
            },
            "true"
          ]
        },
        {
          "Condition": "UseMasterSubnetForCompute"
        }
      ]
    },
    "UseS3ReadPolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "UsePlacementGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseClusterPlacement": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "Placement"
            },
            "cluster"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "UseS3ReadWritePolicy": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "S3ReadWriteResource"
                },
                "NONE"
              ]
            }
          ]
        },
        {
          "Condition": "CreateEC2IAMRole"
        }
      ]
    },
    "AddAdditionalSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSG"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EC2IAMRoleName"
            },
            "NONE"
          ]
        }
      ]
    },
    "UseEC2IAMPolicies": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "EC2IAMPolicies"
                }
              ]
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateEC2IAMRole": {
      "Fn::Equals": [
        {
          "Ref": "EC2IAMRoleName"
        },
        "NONE"
      ]
    },
    "UseExistingSecurityGroup": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "VPCSecurityGroupId"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateSecurityGroups": {
      "Fn::Equals": [
        {
          "Ref": "VPCSecurityGroupId"
        },
        "NONE"
      ]
    },
    "CreateSubStack": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalCfnTemplate"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreatePlacementGroup": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "PlacementGroup"
            },
            "DYNAMIC"
          ]
        },
        {
          "Condition": "UsePlacementGroup"
        }
      ]
    },
    "GovCloudRegion": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Partition"
        },
        "aws-us-gov"
      ]
    },
    "CreateComputeFleet": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Scheduler"
            },
            "awsbatch"
          ]
        }
      ]
    },
    "CreateAWSBatchStack": {
      "Fn::Equals": [
        {
          "Ref": "Scheduler"
        },
        "awsbatch"
      ]
    },
    "UseCustomAWSBatchTemplateURL": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            "NONE"
          ]
        }
      ]
    },
    "HasResourcesS3Bucket": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ResourcesS3Bucket"
            },
            "NONE"
          ]
        }
      ]
    },
    "EnableEFA": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EFA"
            },
            "NONE"
          ]
        }
      ]
    },
    "DisableHyperthreading": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Ref": "Cores"
                }
              ]
            },
            "-1"
          ]
        }
      ]
    },
    "EnableDCV": {
      "Fn::Equals": [
        {
          "Fn::Select": [
            "0",
            {
              "Fn::Split": [
                ",",
                {
                  "Ref": "DCVOptions"
                }
              ]
            }
          ]
        },
        "master"
      ]
    },
    "UseArmAMIs": {
      "Fn::Equals": [
        {
          "Ref": "Architecture"
        },
        "arm64"
      ]
    }
  },
  "Mappings": {
    "AWSRegionOS2AMIarm64": {
      "ap-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-08ae5cbcee907d326",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0cb648e05c47b7c94"
      },
      "ap-northeast-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-06116e63f82719482",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-066e43bfb5b35a990"
      },
      "ap-northeast-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-04d22c9b2c4e4b283",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-00df77c664b3c4a69"
      },
      "ap-northeast-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0e6ca07e0b9f82f74",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-091dca52cc0074345"
      },
      "ap-southeast-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-098885d98db4cbf50",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0b9b73283ccf1c878"
      },
      "ap-southeast-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0cc3e1e9cbbe2155c",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0655257fa401f14c6"
      },
      "ca-central-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-09d0af34836db8482",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-025b03df8510fba69"
      },
      "cn-north-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "cn-northwest-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "eu-central-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-056e9fc93cabb5dee",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-05cdcb2e236c19850"
      },
      "eu-north-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-05348cc8afc3c8098",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-08b95c6ae3a2650e5"
      },
      "eu-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0611d8d44e87bc18b",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0f3756ed7165492f8"
      },
      "eu-west-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-09fac839a51d9c9e7",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0ea018021e21731d0"
      },
      "eu-west-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-038104716ed54b6fb",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0260b86cd450a3dfe"
      },
      "sa-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0a1ec30ab7438661a",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-0cb1e57cdc754ddcd"
      },
      "us-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0ed6da030a38ffd4b",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-03d618a7fa26e2619"
      },
      "us-east-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0cab8799757d8cedd",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-00341d0fa8dc294c2"
      },
      "us-gov-east-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "us-gov-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "us-west-1": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-0a7c6c3844e6baec1",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-07876ac440aa8b10d"
      },
      "us-west-2": {
        "alinux": "UNSUPPORTED",
        "alinux2": "ami-068de24c9e50634da",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "ami-057a524c0af266b29"
      }
    },
    "AWSRegionOS2AMIx86": {
      "ap-east-1": {
        "alinux": "ami-0c9f8aa8cd8bc509a",
        "alinux2": "ami-042b158c05c6071d6",
        "centos6": "ami-0b9bb8a43c90e6757",
        "centos7": "ami-0be86b7527d04cc5c",
        "ubuntu1604": "ami-019d0ec359e8301ab",
        "ubuntu1804": "ami-0f1f97321112b92d4"
      },
      "ap-northeast-1": {
        "alinux": "ami-084a853482aa5f9e6",
        "alinux2": "ami-0f22a52a3ce0752a5",
        "centos6": "ami-0a9a73dd3edb8dceb",
        "centos7": "ami-08422a5e75b80f106",
        "ubuntu1604": "ami-01487849c066df2f6",
        "ubuntu1804": "ami-0b89e0cc7bda8d836"
      },
      "ap-northeast-2": {
        "alinux": "ami-0134e7180df5555fc",
        "alinux2": "ami-02dc0be31ac31d775",
        "centos6": "ami-06d48b3bf59523fe9",
        "centos7": "ami-0f41729ea9c94b475",
        "ubuntu1604": "ami-04e3a90f55a615137",
        "ubuntu1804": "ami-0a603d1ad04827d7d"
      },
      "ap-northeast-3": {
        "alinux": "UNSUPPORTED",
        "alinux2": "UNSUPPORTED",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "UNSUPPORTED",
        "ubuntu1804": "UNSUPPORTED"
      },
      "ap-south-1": {
        "alinux": "ami-0b52416294957448a",
        "alinux2": "ami-0ffed3fc0a569ca40",
        "centos6": "ami-03983d5f8f5d5b6b4",
        "centos7": "ami-0ef2e0173a92036b0",
        "ubuntu1604": "ami-0428540c26d6e9bd9",
        "ubuntu1804": "ami-05bdd8d98834ab24d"
      },
      "ap-southeast-1": {
        "alinux": "ami-0ffb6808859b05ee4",
        "alinux2": "ami-0714dba6b2dd0b6c9",
        "centos6": "ami-0e3c4998a7f87aaed",
        "centos7": "ami-042f0f97050e9b990",
        "ubuntu1604": "ami-04552187b06f32a9b",
        "ubuntu1804": "ami-0d9dacead6e617656"
      },
      "ap-southeast-2": {
        "alinux": "ami-06c5e26f79174e985",
        "alinux2": "ami-05c0457e1ba52975f",
        "centos6": "ami-0421653096532faa4",
        "centos7": "ami-0a28907a9bfbbcd33",
        "ubuntu1604": "ami-05ae48a9bf185f159",
        "ubuntu1804": "ami-0cddb7febd7038eee"
      },
      "ca-central-1": {
        "alinux": "ami-0d7f9022941783d57",
        "alinux2": "ami-065dcf5d1c909e3fd",
        "centos6": "ami-056545c0881ccb356",
        "centos7": "ami-07f7a9bc038d1f606",
        "ubuntu1604": "ami-04aa21b2fde3495fd",
        "ubuntu1804": "ami-0be28c2eb6399d770"
      },
      "cn-north-1": {
        "alinux": "ami-049db17f75ec3edfe",
        "alinux2": "ami-028bc21fb2ef2ffaa",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "ami-07a6d3744ffde38df",
        "ubuntu1804": "ami-00852b46f0f634095"
      },
      "cn-northwest-1": {
        "alinux": "ami-006bfea49fd4247f8",
        "alinux2": "ami-0551922085b1798e4",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "ami-0b3f2d9970a9aa184",
        "ubuntu1804": "ami-065736ea673fdfddd"
      },
      "eu-central-1": {
        "alinux": "ami-0013c3345085ea84d",
        "alinux2": "ami-0b94f93aec9a69c45",
        "centos6": "ami-0cc1fadfa0bb457e4",
        "centos7": "ami-076315ad8bab8c7e2",
        "ubuntu1604": "ami-0e78d6cf311989f11",
        "ubuntu1804": "ami-0d971343a41863f60"
      },
      "eu-north-1": {
        "alinux": "ami-010216fc1cbbb9da1",
        "alinux2": "ami-00a93bb3cb06da269",
        "centos6": "ami-03ec7eaed1a5e402e",
        "centos7": "ami-00cc5531ffb4b97b9",
        "ubuntu1604": "ami-03f944e8d46a6a014",
        "ubuntu1804": "ami-03880d16d29f76bfe"
      },
      "eu-west-1": {
        "alinux": "ami-0bed5a581de0d818a",
        "alinux2": "ami-01f48ab0b6096b23b",
        "centos6": "ami-01bd6231af56d9c96",
        "centos7": "ami-00f5b5904cfd50cc9",
        "ubuntu1604": "ami-0b49b83d51395561d",
        "ubuntu1804": "ami-0eb9f8b22afb92518"
      },
      "eu-west-2": {
        "alinux": "ami-031a94a31acd359d6",
        "alinux2": "ami-03ca31b1d743b6ac0",
        "centos6": "ami-0ae23aa6e67eb2623",
        "centos7": "ami-0d4d6b925b9e40158",
        "ubuntu1604": "ami-096eb72d3d9198a21",
        "ubuntu1804": "ami-02ea53a68ffaa3463"
      },
      "eu-west-3": {
        "alinux": "ami-0aabf972875085d50",
        "alinux2": "ami-07d0da1afe846f29c",
        "centos6": "ami-02e2212e67a72c864",
        "centos7": "ami-0d86709d18024c963",
        "ubuntu1604": "ami-0b2680f8d4596b1bb",
        "ubuntu1804": "ami-0aad31cdbf40cd214"
      },
      "sa-east-1": {
        "alinux": "ami-0036d5964edd8b3b3",
        "alinux2": "ami-0fbdb70c27617176f",
        "centos6": "ami-0c56eac5439399e21",
        "centos7": "ami-003b1e818760c5c65",
        "ubuntu1604": "ami-0b7b66d74893a9830",
        "ubuntu1804": "ami-0e2db3f1ab7fb6939"
      },
      "us-east-1": {
        "alinux": "ami-009428e2bfe97a05c",
        "alinux2": "ami-0937cf2341eefb277",
        "centos6": "ami-0098ea5504ad7af97",
        "centos7": "ami-0910b557f90835c10",
        "ubuntu1604": "ami-0e6a46f29c7aebfc4",
        "ubuntu1804": "ami-07843969d7185c4d1"
      },
      "us-east-2": {
        "alinux": "ami-034b3424afdb81a91",
        "alinux2": "ami-0ce0ff49526880068",
        "centos6": "ami-01297ee68c546b87b",
        "centos7": "ami-0683f0c475ae0127a",
        "ubuntu1604": "ami-06fd64e9c29d20c0d",
        "ubuntu1804": "ami-016e59b93e36fb8ce"
      },
      "us-gov-east-1": {
        "alinux": "ami-03d984520f5c199e4",
        "alinux2": "ami-0fdf099ba6711a6a0",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "ami-0395d3762cf062246",
        "ubuntu1804": "ami-06b20a4eb59a0f5f9"
      },
      "us-gov-west-1": {
        "alinux": "ami-0d70496ced763beb2",
        "alinux2": "ami-0dab3bb5bea87160a",
        "centos6": "UNSUPPORTED",
        "centos7": "UNSUPPORTED",
        "ubuntu1604": "ami-0ca40e0ceaf345b6e",
        "ubuntu1804": "ami-074bd1743ecfc7ca7"
      },
      "us-west-1": {
        "alinux": "ami-0791f6d572c3de7bb",
        "alinux2": "ami-0de9f1158c82ffa99",
        "centos6": "ami-07b680a3120838667",
        "centos7": "ami-0414106bf2e9f4303",
        "ubuntu1604": "ami-01f30e2ac75bd06f1",
        "ubuntu1804": "ami-0c4ffb8872a00db97"
      },
      "us-west-2": {
        "alinux": "ami-0f0aba2decd1059b0",
        "alinux2": "ami-0ec7926860d679e98",
        "centos6": "ami-09ead1672389d50b5",
        "centos7": "ami-0bf5994d131081e49",
        "ubuntu1604": "ami-06fb3aeda9d0ab65d",
        "ubuntu1804": "ami-0cd3b6e6e260f721c"
      }
    },
    "OSFeatures": {
      "centos6": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "centos7": {
        "User": "centos",
        "RootDevice": "/dev/sda1"
      },
      "alinux": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "alinux2": {
        "User": "ec2-user",
        "RootDevice": "/dev/xvda"
      },
      "ubuntu1604": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      },
      "ubuntu1804": {
        "User": "ubuntu",
        "RootDevice": "/dev/sda1"
      }
    },
    "PackagesVersions": {
      "default": {
        "parallelcluster": "2.8.0",
        "cookbook": "aws-parallelcluster-cookbook-2.8.0",
        "chef": "15.11.8",
        "berkshelf": "7.0.10",
        "ami": "dev"
      }
    },
    "Partition2Url": {
      "aws": {
        "url": "amazonaws.com"
      },
      "aws-us-gov": {
        "url": "amazonaws.com"
      },
      "aws-cn": {
        "url": "amazonaws.com.cn"
      }
    }
  },
  "Resources": {
    "EFSSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "EFSOptions": {
            "Ref": "EFSOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "MasterSubnetId": {
            "Ref": "MasterSubnetId"
          },
          "ComputeSubnetId": {
            "Ref": "ComputeSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/efs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateEFSSubstack"
    },
    "CloudWatchLogsSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "CWLogOptions": {
            "Ref": "CWLogOptions"
          },
          "CWLogGroupName": {
            "Fn::Sub": [
              "/aws/parallelcluster/${cluster_name}",
              {
                "cluster_name": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        "parallelcluster-",
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "MainStackName": {
            "Ref": "AWS::StackName"
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "CreateCleanupResourcesFunctionLogGroup": {
            "Fn::If": [
              "HasResourcesS3Bucket",
              "true",
              "false"
            ]
          },
          "CreateAWSBatchLogGroups": {
            "Fn::If": [
              "CreateAWSBatchStack",
              "true",
              "false"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/cw-logs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    },
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 1209600
      }
    },
    "FSXSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "FSXOptions": {
            "Ref": "FSXOptions"
          },
          "ComputeSecurityGroup": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroup"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "ComputeSecurityGroupIngress": {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "ComputeSecurityGroupIngress"
              },
              {
                "Ref": "VPCSecurityGroupId"
              }
            ]
          },
          "SubnetId": {
            "Ref": "MasterSubnetId"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/fsx-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateFSXSubstack"
    },
    "SQSPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyQueuePolicy",
          "Statement": [
            {
              "Sid": "Allow-SendMessage-From-AS-SNS-Topic",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "SNS"
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "SQS"
          }
        ]
      }
    },
    "SNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "SQS",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "instanceId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "instanceId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": {
          "Fn::If": [
            "GovCloudRegion",
            {
              "Ref": "AWS::NoValue"
            },
            "PAY_PER_REQUEST"
          ]
        },
        "ProvisionedThroughput": {
          "Fn::If": [
            "GovCloudRegion",
            {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": {
          "Fn::If": [
            "UseEC2IAMPolicies",
            {
              "Ref": "EC2IAMPolicies"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Sub": [
                      "ec2.${s3_url}",
                      {
                        "s3_url": {
                          "Fn::FindInMap": [
                            "Partition2Url",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "url"
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      },
      "Condition": "CreateEC2IAMRole"
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Fn::If": [
              "UseEC2IAMRole",
              {
                "Ref": "EC2IAMRoleName"
              },
              {
                "Ref": "RootRole"
              }
            ]
          }
        ]
      }
    },
    "ParallelClusterPolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "parallelcluster",
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "EC2",
              "Action": [
                "ec2:DescribeVolumes",
                "ec2:AttachVolume",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "DynamoDBList",
              "Action": [
                "dynamodb:ListTables"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "SQSQueue",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SQS",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Sid": "Autoscaling",
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:TerminateInstanceInAutoScalingGroup",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:DescribeTags",
                "autoscaling:SetInstanceHealth"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "Cloudformation",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackResource"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                }
              ]
            },
            {
              "Sid": "DynamoDBTable",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                }
              ]
            },
            {
              "Sid": "S3GetObj",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${AWS::Region}-aws-parallelcluster/*"
                }
              ]
            },
            {
              "Sid": "S3PutObj",
              "Action": [
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*"
                }
              ]
            },
            {
              "Sid": "SQSList",
              "Action": [
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "FSx",
              "Action": [
                "fsx:DescribeFileSystems"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            },
            {
              "Sid": "BatchJobPassRole",
              "Action": [
                "iam:PassRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster-*"
                }
              ]
            },
            {
              "Sid": "DcvLicense",
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": [
                {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "CreateEC2IAMRole"
    },
    "S3ReadRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3Read",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Read",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadPolicy"
    },
    "S3ReadWriteRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3ReadWrite",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3ReadWrite",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Ref": "S3ReadWriteResource"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Condition": "UseS3ReadWritePolicy"
    },
    "MasterEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Condition": "MasterPublicIp"
    },
    "MasterServer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "CloudWatchLogsSubstack"
      ],
      "Properties": {
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "MasterServerLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "MasterServerLaunchTemplate",
              "LatestVersionNumber"
            ]
          }
        }
      }
    },
    "MasterServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "InstanceType": {
            "Ref": "MasterInstanceType"
          },
          "CpuOptions": {
            "CoreCount": {
              "Fn::If": [
                "DisableHyperthreading",
                {
                  "Fn::Select": [
                    "0",
                    {
                      "Ref": "Cores"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ThreadsPerCore": {
              "Fn::If": [
                "DisableHyperthreading",
                1,
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdba",
              "VirtualName": "ephemeral0"
            },
            {
              "DeviceName": "/dev/xvdbb",
              "VirtualName": "ephemeral1"
            },
            {
              "DeviceName": "/dev/xvdbc",
              "VirtualName": "ephemeral2"
            },
            {
              "DeviceName": "/dev/xvdbd",
              "VirtualName": "ephemeral3"
            },
            {
              "DeviceName": "/dev/xvdbe",
              "VirtualName": "ephemeral4"
            },
            {
              "DeviceName": "/dev/xvdbf",
              "VirtualName": "ephemeral5"
            },
            {
              "DeviceName": "/dev/xvdbg",
              "VirtualName": "ephemeral6"
            },
            {
              "DeviceName": "/dev/xvdbh",
              "VirtualName": "ephemeral7"
            },
            {
              "DeviceName": "/dev/xvdbi",
              "VirtualName": "ephemeral8"
            },
            {
              "DeviceName": "/dev/xvdbj",
              "VirtualName": "ephemeral9"
            },
            {
              "DeviceName": "/dev/xvdbk",
              "VirtualName": "ephemeral10"
            },
            {
              "DeviceName": "/dev/xvdbl",
              "VirtualName": "ephemeral11"
            },
            {
              "DeviceName": "/dev/xvdbm",
              "VirtualName": "ephemeral12"
            },
            {
              "DeviceName": "/dev/xvdbn",
              "VirtualName": "ephemeral13"
            },
            {
              "DeviceName": "/dev/xvdbo",
              "VirtualName": "ephemeral14"
            },
            {
              "DeviceName": "/dev/xvdbp",
              "VirtualName": "ephemeral15"
            },
            {
              "DeviceName": "/dev/xvdbq",
              "VirtualName": "ephemeral16"
            },
            {
              "DeviceName": "/dev/xvdbr",
              "VirtualName": "ephemeral17"
            },
            {
              "DeviceName": "/dev/xvdbs",
              "VirtualName": "ephemeral18"
            },
            {
              "DeviceName": "/dev/xvdbt",
              "VirtualName": "ephemeral19"
            },
            {
              "DeviceName": "/dev/xvdbu",
              "VirtualName": "ephemeral20"
            },
            {
              "DeviceName": "/dev/xvdbv",
              "VirtualName": "ephemeral21"
            },
            {
              "DeviceName": "/dev/xvdbw",
              "VirtualName": "ephemeral22"
            },
            {
              "DeviceName": "/dev/xvdbx",
              "VirtualName": "ephemeral23"
            },
            {
              "DeviceName": {
                "Fn::FindInMap": [
                  "OSFeatures",
                  {
                    "Ref": "BaseOS"
                  },
                  "RootDevice"
                ]
              },
              "Ebs": {
                "VolumeSize": {
                  "Ref": "MasterRootVolumeSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "KeyName": {
            "Ref": "KeyName"
          },
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Application",
                  "Value": {
                    "Ref": "AWS::StackName"
                  }
                },
                {
                  "Key": "Name",
                  "Value": "Master"
                },
                {
                  "Key": "ClusterName",
                  "Value": {
                    "Fn::Select": [
                      "1",
                      {
                        "Fn::Split": [
                          "parallelcluster-",
                          {
                            "Ref": "AWS::StackName"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Key": "aws-parallelcluster-attributes",
                  "Value": {
                    "Fn::Sub": [
                      "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
                      {
                        "version": {
                          "Fn::FindInMap": [
                            "PackagesVersions",
                            "default",
                            "parallelcluster"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Key": "aws-parallelcluster-networking",
                  "Value": {
                    "Fn::Sub": "EFA=${EFA}"
                  }
                },
                {
                  "Key": "aws-parallelcluster-filesystem",
                  "Value": {
                    "Fn::Sub": [
                      "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}, fsx=${fsx}",
                      {
                        "efs": {
                          "Fn::If": [
                            "CreateEFSSubstack",
                            "1",
                            "0"
                          ]
                        },
                        "raid": {
                          "Fn::If": [
                            "CreateRAIDSubstack",
                            "1",
                            "0"
                          ]
                        },
                        "fsx": {
                          "Fn::If": [
                            "CreateFSXSubstack",
                            "1",
                            "0"
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "NetworkInterfaces": [
            {
              "NetworkInterfaceId": {
                "Ref": "MasterENI"
              },
              "DeviceIndex": 0
            }
          ],
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "EbsOptimized": {
            "Fn::If": [
              "IsMasterInstanceEbsOpt",
              true,
              false
            ]
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "RootInstanceProfile"
            }
          },
          "Placement": {
            "GroupName": {
              "Fn::If": [
                "UseClusterPlacement",
                {
                  "Fn::If": [
                    "CreatePlacementGroup",
                    {
                      "Ref": "DynamicPlacementGroup"
                    },
                    {
                      "Ref": "PlacementGroup"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                  "MIME-Version: 1.0\n\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/cloud-boothook; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "which yum && echo \"proxy=",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "_none_"
                    ]
                  },
                  "\" >> /etc/yum.conf || echo \"Not yum system\"\n\n",
                  "which apt-get && echo \"Acquire::http::Proxy \\\"",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "false"
                    ]
                  },
                  "\\\";\" >> /etc/apt/apt.conf || echo \"Not apt system\"\n\n",
                  "proxy=",
                  {
                    "Ref": "ProxyServer"
                  },
                  "\n",
                  "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                  "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                  "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                  "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                  "  cat >> /etc/profile.d/proxy.sh <<PROXY\n",
                  "export http_proxy=\"${proxy}\"\n",
                  "export https_proxy=\"${proxy}\"\n",
                  "export no_proxy=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "export HTTP_PROXY=\"${proxy}\"\n",
                  "export HTTPS_PROXY=\"${proxy}\"\n",
                  "export NO_PROXY=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "PROXY\n",
                  "fi\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "function error_exit\n",
                  "{\n",
                  "  cfn-signal --exit-code=1 --reason=\"$1\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=MasterServerWaitCondition --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  exit 1\n",
                  "}\n",
                  "function vendor_cookbook\n",
                  "{\n",
                  "  mkdir /tmp/cookbooks\n",
                  "  cd /tmp/cookbooks\n",
                  "  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                  "  HOME_BAK=\"${HOME}\"\n",
                  "  export HOME=\"/tmp\"\n",
                  "  for d in `ls /tmp/cookbooks`; do\n",
                  "    cd /tmp/cookbooks/$d\n",
                  "    LANG=en_US.UTF-8 /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'\n",
                  "  done;\n",
                  "  export HOME=\"${HOME_BAK}\"\n",
                  "}\n",
                  "function bootstrap_instance\n",
                  "{\n",
                  "  which yum 2>/dev/null; yum=$?\n",
                  "  which apt-get 2>/dev/null; apt=$?\n",
                  "  if [ \"${yum}\" == \"0\" ]; then\n",
                  "    yum -y groupinstall development && yum -y install curl wget jq awscli\n",
                  "  fi\n",
                  "  if [ \"${apt}\" == \"0\" ]; then\n",
                  "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli\n",
                  "  fi\n",
                  "  [[ ${_region} =~ ^cn- ]] && s3_url=\"cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster\"\n",
                  "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                  "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                  "  curl --retry 3 -L https://${_region}-aws-parallelcluster.s3.${_region}.amazonaws.com$([ \"${_region}\" != \"${_region#cn-*}\" ] && echo \".cn\" || exit 0)/archives/cinc/cinc-install.sh | bash -s -- -v ${chef_version}\n",
                  "  /opt/cinc/embedded/bin/gem install --no-document berkshelf:${berkshelf_version}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                  "  vendor_cookbook\n",
                  "  mkdir /opt/parallelcluster\n",
                  "}\n",
                  "[ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh\n",
                  "custom_cookbook=",
                  {
                    "Ref": "CustomChefCookbook"
                  },
                  "\n",
                  "export _region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "s3_url=",
                  {
                    "Fn::FindInMap": [
                      "Partition2Url",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "url"
                    ]
                  },
                  "\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  if [[ \"${custom_cookbook}\" =~ ^s3:// ]]; then\n",
                  "    cookbook_url=$(aws s3 presign \"${custom_cookbook}\" --region \"${_region}\")\n ",
                  "  else\n",
                  "    cookbook_url=${custom_cookbook}\n",
                  "  fi\n",
                  "else\n",
                  "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  ".tgz\n",
                  "fi\n",
                  "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                  "export parallelcluster_version=aws-parallelcluster-",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  },
                  "\n",
                  "export cookbook_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  "\n",
                  "export chef_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "chef"
                    ]
                  },
                  "\n",
                  "export berkshelf_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "berkshelf"
                    ]
                  },
                  "\n",
                  "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                  "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                  "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                  "    bootstrap_instance\n",
                  "  fi\n",
                  "else\n",
                  "  bootstrap_instance\n",
                  "fi\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                  "  vendor_cookbook\n",
                  "fi\n",
                  "cd /tmp\n",
                  "# Call CloudFormation\n",
                  "cfn-init -s ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " -v -c default -r MasterServerLaunchTemplate --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                  "cfn-signal --exit-code=0 --reason=\"MasterServer setup complete\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=MasterServerWaitCondition --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# End of file\n",
                  "--==BOUNDARY==\n"
                ]
              ]
            }
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Master server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "chefFinalize"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "enable_efa": {
                      "Ref": "EFA"
                    },
                    "cfn_raid_vol_ids": {
                      "Fn::If": [
                        "CreateRAIDSubstack",
                        {
                          "Fn::GetAtt": [
                            "RAIDSubstack",
                            "Outputs.Volumeids"
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_scheduler_slots": {
                      "Fn::If": [
                        "DisableHyperthreading",
                        {
                          "Fn::Select": [
                            "1",
                            {
                              "Ref": "Cores"
                            }
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    "cfn_base_os": {
                      "Ref": "BaseOS"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Fn::If": [
                        "CreateEFSSubstack",
                        {
                          "Fn::GetAtt": [
                            "EFSSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_fsx_fs_id": {
                      "Fn::If": [
                        "CreateFSXSubstack",
                        {
                          "Fn::GetAtt": [
                            "FSXSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_fsx_options": {
                      "Ref": "FSXOptions"
                    },
                    "cfn_volume": {
                      "Fn::GetAtt": [
                        "EBSCfnStack",
                        "Outputs.Volumeids"
                      ]
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_max_queue_size": {
                      "Ref": "MaxSize"
                    },
                    "compute_instance_type": {
                      "Ref": "ComputeInstanceType"
                    },
                    "cfn_node_type": "MasterServer",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    },
                    "cfn_ddb_table": {
                      "Ref": "DynamoDBTable"
                    },
                    "cfn_sqs_queue": {
                      "Fn::GetAtt": [
                        "SQS",
                        "QueueName"
                      ]
                    },
                    "dcv_enabled": {
                      "Fn::If": [
                        "EnableDCV",
                        "master",
                        "false"
                      ]
                    },
                    "dcv_port": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            ",",
                            {
                              "Ref": "DCVOptions"
                            }
                          ]
                        }
                      ]
                    },
                    "enable_intel_hpc_platform": {
                      "Ref": "IntelHPCPlatform"
                    },
                    "cfn_cluster_cw_logging_enabled": {
                      "Fn::GetAtt": [
                        "CloudWatchLogsSubstack",
                        "Outputs.Enabled"
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::Sub": "recipe[aws-parallelcluster::${Scheduler}_config]"
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "chefFinalize": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize",
                "cwd": "/etc/chef"
              },
              "bootstrap": {
                "command": "[ ! -f /opt/parallelcluster/.bootstrapped ] && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped || exit 0"
              }
            }
          }
        }
      }
    },
    "MasterServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [
        "MasterServer"
      ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "ComputeFleet": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "CloudWatchLogsSubstack"
      ],
      "Properties": {
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          }
        ],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "ComputeServerLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "ComputeServerLaunchTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "DesiredCapacity": {
          "Ref": "DesiredSize"
        },
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "SNS"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_TERMINATE"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute",
            "PropagateAtLaunch": true
          },
          {
            "Key": "ClusterName",
            "Value": {
              "Fn::Select": [
                "1",
                {
                  "Fn::Split": [
                    "parallelcluster-",
                    {
                      "Ref": "AWS::StackName"
                    }
                  ]
                }
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-attributes",
            "Value": {
              "Fn::Sub": [
                "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
                {
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  }
                }
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-networking",
            "Value": {
              "Fn::Sub": "EFA=${EFA}"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "aws-parallelcluster-filesystem",
            "Value": {
              "Fn::Sub": [
                "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
                {
                  "efs": {
                    "Fn::If": [
                      "CreateEFSSubstack",
                      "1",
                      "0"
                    ]
                  },
                  "raid": {
                    "Fn::If": [
                      "CreateRAIDSubstack",
                      "1",
                      "0"
                    ]
                  }
                }
              ]
            },
            "PropagateAtLaunch": true
          }
        ],
        "PlacementGroup": {
          "Fn::If": [
            "UsePlacementGroup",
            {
              "Fn::If": [
                "CreatePlacementGroup",
                {
                  "Ref": "DynamicPlacementGroup"
                },
                {
                  "Ref": "PlacementGroup"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ]
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M",
          "Count": {
            "Ref": "DesiredSize"
          }
        }
      },
      "Condition": "CreateComputeFleet"
    },
    "ComputeServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "NetworkInterfaces": [
            {
              "DeviceIndex": 0,
              "InterfaceType": {
                "Fn::If": [
                  "EnableEFA",
                  "efa",
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "Groups": [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ],
              "AssociatePublicIpAddress": {
                "Fn::If": [
                  "ComputePublicIps",
                  true,
                  false
                ]
              }
            }
          ],
          "InstanceType": {
            "Ref": "ComputeInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "RootInstanceProfile"
            }
          },
          "InstanceMarketOptions": {
            "Fn::If": [
              "UseSpotInstances",
              {
                "SpotOptions": {
                  "SpotInstanceType": "one-time",
                  "InstanceInterruptionBehavior": "terminate",
                  "MaxPrice": {
                    "Fn::If": [
                      "UseSpotPrice",
                      {
                        "Ref": "SpotPrice"
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                "MarketType": "spot"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ImageId": {
            "Fn::If": [
              "UseCustomAMI",
              {
                "Ref": "CustomAMI"
              },
              {
                "Fn::If": [
                  "UseArmAMIs",
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIarm64",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  },
                  {
                    "Fn::FindInMap": [
                      "AWSRegionOS2AMIx86",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "BaseOS"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "CpuOptions": {
            "CoreCount": {
              "Fn::If": [
                "DisableHyperthreading",
                {
                  "Fn::Select": [
                    "1",
                    {
                      "Ref": "Cores"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "ThreadsPerCore": {
              "Fn::If": [
                "DisableHyperthreading",
                1,
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "Monitoring": {
            "Enabled": false
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvdba",
              "VirtualName": "ephemeral0"
            },
            {
              "DeviceName": "/dev/xvdbb",
              "VirtualName": "ephemeral1"
            },
            {
              "DeviceName": "/dev/xvdbc",
              "VirtualName": "ephemeral2"
            },
            {
              "DeviceName": "/dev/xvdbd",
              "VirtualName": "ephemeral3"
            },
            {
              "DeviceName": "/dev/xvdbe",
              "VirtualName": "ephemeral4"
            },
            {
              "DeviceName": "/dev/xvdbf",
              "VirtualName": "ephemeral5"
            },
            {
              "DeviceName": "/dev/xvdbg",
              "VirtualName": "ephemeral6"
            },
            {
              "DeviceName": "/dev/xvdbh",
              "VirtualName": "ephemeral7"
            },
            {
              "DeviceName": "/dev/xvdbi",
              "VirtualName": "ephemeral8"
            },
            {
              "DeviceName": "/dev/xvdbj",
              "VirtualName": "ephemeral9"
            },
            {
              "DeviceName": "/dev/xvdbk",
              "VirtualName": "ephemeral10"
            },
            {
              "DeviceName": "/dev/xvdbl",
              "VirtualName": "ephemeral11"
            },
            {
              "DeviceName": "/dev/xvdbm",
              "VirtualName": "ephemeral12"
            },
            {
              "DeviceName": "/dev/xvdbn",
              "VirtualName": "ephemeral13"
            },
            {
              "DeviceName": "/dev/xvdbo",
              "VirtualName": "ephemeral14"
            },
            {
              "DeviceName": "/dev/xvdbp",
              "VirtualName": "ephemeral15"
            },
            {
              "DeviceName": "/dev/xvdbq",
              "VirtualName": "ephemeral16"
            },
            {
              "DeviceName": "/dev/xvdbr",
              "VirtualName": "ephemeral17"
            },
            {
              "DeviceName": "/dev/xvdbs",
              "VirtualName": "ephemeral18"
            },
            {
              "DeviceName": "/dev/xvdbt",
              "VirtualName": "ephemeral19"
            },
            {
              "DeviceName": "/dev/xvdbu",
              "VirtualName": "ephemeral20"
            },
            {
              "DeviceName": "/dev/xvdbv",
              "VirtualName": "ephemeral21"
            },
            {
              "DeviceName": "/dev/xvdbw",
              "VirtualName": "ephemeral22"
            },
            {
              "DeviceName": "/dev/xvdbx",
              "VirtualName": "ephemeral23"
            },
            {
              "DeviceName": {
                "Fn::FindInMap": [
                  "OSFeatures",
                  {
                    "Ref": "BaseOS"
                  },
                  "RootDevice"
                ]
              },
              "Ebs": {
                "VolumeSize": {
                  "Ref": "ComputeRootVolumeSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n",
                  "MIME-Version: 1.0\n\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/cloud-boothook; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "which yum && echo \"proxy=",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "_none_"
                    ]
                  },
                  "\" >> /etc/yum.conf || echo \"Not yum system\"\n\n",
                  "which apt-get && echo \"Acquire::http::Proxy \\\"",
                  {
                    "Fn::If": [
                      "UseProxy",
                      {
                        "Ref": "ProxyServer"
                      },
                      "false"
                    ]
                  },
                  "\\\";\" >> /etc/apt/apt.conf || echo \"Not apt system\"\n\n",
                  "proxy=",
                  {
                    "Ref": "ProxyServer"
                  },
                  "\n",
                  "if [ \"${proxy}\" != \"NONE\" ]; then\n",
                  "  proxy_host=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f1)\n",
                  "  proxy_port=$(echo \"${proxy}\" | awk -F/ '{print $3}' | cut -d: -f2)\n",
                  "  echo -e \"[Boto]\nproxy = ${proxy_host}\nproxy_port = ${proxy_port}\n\" >/etc/boto.cfg\n",
                  "  cat >> /etc/profile.d/proxy.sh <<PROXY\n",
                  "export http_proxy=\"${proxy}\"\n",
                  "export https_proxy=\"${proxy}\"\n",
                  "export no_proxy=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "export HTTP_PROXY=\"${proxy}\"\n",
                  "export HTTPS_PROXY=\"${proxy}\"\n",
                  "export NO_PROXY=\"localhost,127.0.0.1,169.254.169.254\"\n",
                  "PROXY\n",
                  "fi\n",
                  "--==BOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "MIME-Version: 1.0\n\n",
                  "#!/bin/bash -x\n\n",
                  "function error_exit\n",
                  "{\n",
                  "  region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "  instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "  log_dir=/home/logs/compute\n",
                  "  mkdir -p ${log_dir}\n",
                  "  echo \"Reporting instance as unhealthy and dumping logs to ${log_dir}/${instance_id}.tar.gz\"\n",
                  "  tar -czf ${log_dir}/${instance_id}.tar.gz /var/log\n",
                  "  aws --region ${region} autoscaling set-instance-health --instance-id ${instance_id} --health-status Unhealthy\n",
                  "  cfn-signal --exit-code=1 --reason=\"$1\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=${region}\n",
                  "  exit 1\n",
                  "}\n",
                  "function vendor_cookbook\n",
                  "{\n",
                  "  mkdir /tmp/cookbooks\n",
                  "  cd /tmp/cookbooks\n",
                  "  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz\n",
                  "  HOME_BAK=\"${HOME}\"\n",
                  "  export HOME=\"/tmp\"\n",
                  "  for d in `ls /tmp/cookbooks`; do\n",
                  "    cd /tmp/cookbooks/$d\n",
                  "    LANG=en_US.UTF-8 /opt/cinc/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'\n",
                  "  done;\n",
                  "  export HOME=\"${HOME_BAK}\"\n",
                  "}\n",
                  "function bootstrap_instance\n",
                  "{\n",
                  "  which yum 2>/dev/null; yum=$?\n",
                  "  which apt-get 2>/dev/null; apt=$?\n",
                  "  if [ \"${yum}\" == \"0\" ]; then\n",
                  "    yum -y groupinstall development && yum -y install curl wget jq awscli\n",
                  "  fi\n",
                  "  if [ \"${apt}\" == \"0\" ]; then\n",
                  "    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli\n",
                  "  fi\n",
                  "  [[ ${_region} =~ ^cn- ]] && s3_url=\"cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster\"\n",
                  "  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)\n",
                  "  mkdir -p /etc/chef && chown -R root:root /etc/chef\n",
                  "  curl --retry 3 -L https://${_region}-aws-parallelcluster.s3.${_region}.amazonaws.com$([ \"${_region}\" != \"${_region#cn-*}\" ] && echo \".cn\" || exit 0)/archives/cinc/cinc-install.sh | bash -s -- -v ${chef_version}\n",
                  "  /opt/cinc/embedded/bin/gem install --no-document berkshelf:${berkshelf_version}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date\n",
                  "  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5\n",
                  "  vendor_cookbook\n",
                  "  mkdir /opt/parallelcluster\n",
                  "}\n",
                  "[ -f /etc/profile.d/proxy.sh ] && . /etc/profile.d/proxy.sh\n",
                  "custom_cookbook=",
                  {
                    "Ref": "CustomChefCookbook"
                  },
                  "\n",
                  "export _region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "s3_url=",
                  {
                    "Fn::FindInMap": [
                      "Partition2Url",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "url"
                    ]
                  },
                  "\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  if [[ \"${custom_cookbook}\" =~ ^s3:// ]]; then\n",
                  "    cookbook_url=$(aws s3 presign \"${custom_cookbook}\" --region \"${_region}\")\n ",
                  "  else\n",
                  "    cookbook_url=${custom_cookbook}\n",
                  "  fi\n",
                  "else\n",
                  "  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  ".tgz\n",
                  "fi\n",
                  "export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\n",
                  "export parallelcluster_version=aws-parallelcluster-",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  },
                  "\n",
                  "export cookbook_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "cookbook"
                    ]
                  },
                  "\n",
                  "export chef_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "chef"
                    ]
                  },
                  "\n",
                  "export berkshelf_version=",
                  {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "berkshelf"
                    ]
                  },
                  "\n",
                  "if [ -f /opt/parallelcluster/.bootstrapped ]; then\n",
                  "  installed_version=$(cat /opt/parallelcluster/.bootstrapped)\n",
                  "  if [ \"${parallelcluster_version}\" != \"${installed_version}\" ]; then\n",
                  "    bootstrap_instance\n",
                  "  fi\n",
                  "else\n",
                  "  bootstrap_instance\n",
                  "fi\n",
                  "if [ \"${custom_cookbook}\" != \"NONE\" ]; then\n",
                  "  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z \"$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)\" ${cookbook_url}\n",
                  "  vendor_cookbook\n",
                  "fi\n",
                  "cd /tmp\n",
                  "\n",
                  "while [ \"${masterServerStatus}\" != \"CREATE_COMPLETE\" ] && [ \"${masterServerStatus}\" != \"UPDATE_COMPLETE\" ]\n",
                  "do\n",
                  "sleep 3\n",
                  "masterServerStatus=$(aws cloudformation describe-stack-resource --stack-name ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --logical-resource-id MasterServerWaitCondition --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " --query StackResourceDetail.ResourceStatus --output text 2>/dev/null)\n",
                  "done\n",
                  "\n",
                  "# Call CloudFormation\n",
                  "cfn-init -s ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " -v -c default -r ComputeServerLaunchTemplate --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  " || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'\n",
                  "cfn-signal --exit-code=0 --reason=\"ComputeServer setup complete\" --stack=",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --resource=ComputeFleet --region=",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# End of file\n",
                  "--==BOUNDARY==\n"
                ]
              ]
            }
          }
        }
      },
      "Metadata": {
        "Comment": "AWS ParallelCluster Compute server",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "deployConfigFiles",
              "chefPrepEnv",
              "shellRunPreInstall",
              "chefConfig",
              "shellRunPostInstall",
              "chefFinalize"
            ]
          },
          "deployConfigFiles": {
            "files": {
              "/tmp/dna.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "cfncluster": {
                    "stack_name": {
                      "Ref": "AWS::StackName"
                    },
                    "enable_efa": {
                      "Ref": "EFA"
                    },
                    "cfn_raid_parameters": {
                      "Ref": "RAIDOptions"
                    },
                    "cfn_preinstall": {
                      "Ref": "PreInstallScript"
                    },
                    "cfn_preinstall_args": {
                      "Ref": "PreInstallArgs"
                    },
                    "cfn_postinstall": {
                      "Ref": "PostInstallScript"
                    },
                    "cfn_postinstall_args": {
                      "Ref": "PostInstallArgs"
                    },
                    "cfn_region": {
                      "Ref": "AWS::Region"
                    },
                    "cfn_efs": {
                      "Fn::If": [
                        "CreateEFSSubstack",
                        {
                          "Fn::GetAtt": [
                            "EFSSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_efs_shared_dir": {
                      "Ref": "EFSOptions"
                    },
                    "cfn_fsx_fs_id": {
                      "Fn::If": [
                        "CreateFSXSubstack",
                        {
                          "Fn::GetAtt": [
                            "FSXSubstack",
                            "Outputs.FileSystemId"
                          ]
                        },
                        ""
                      ]
                    },
                    "cfn_fsx_options": {
                      "Ref": "FSXOptions"
                    },
                    "cfn_scheduler": {
                      "Ref": "Scheduler"
                    },
                    "cfn_scheduler_slots": {
                      "Fn::If": [
                        "DisableHyperthreading",
                        {
                          "Fn::Select": [
                            "1",
                            {
                              "Ref": "Cores"
                            }
                          ]
                        },
                        {
                          "Ref": "AWS::NoValue"
                        }
                      ]
                    },
                    "cfn_scaledown_idletime": {
                      "Ref": "ScaleDownIdleTime"
                    },
                    "cfn_encrypted_ephemeral": {
                      "Ref": "EncryptedEphemeral"
                    },
                    "cfn_ephemeral_dir": {
                      "Ref": "EphemeralDir"
                    },
                    "cfn_shared_dir": {
                      "Ref": "SharedDir"
                    },
                    "cfn_proxy": {
                      "Ref": "ProxyServer"
                    },
                    "cfn_sqs_queue": {
                      "Ref": "SQS"
                    },
                    "cfn_master": {
                      "Fn::GetAtt": [
                        "MasterServer",
                        "PrivateDnsName"
                      ]
                    },
                    "cfn_node_type": "ComputeFleet",
                    "cfn_cluster_user": {
                      "Fn::FindInMap": [
                        "OSFeatures",
                        {
                          "Ref": "BaseOS"
                        },
                        "User"
                      ]
                    },
                    "enable_intel_hpc_platform": {
                      "Ref": "IntelHPCPlatform"
                    },
                    "cfn_cluster_cw_logging_enabled": {
                      "Fn::Select": [
                        "0",
                        {
                          "Fn::Split": [
                            ",",
                            {
                              "Ref": "CWLogOptions"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "run_list": {
                    "Fn::Sub": "recipe[aws-parallelcluster::${Scheduler}_config]"
                  }
                }
              },
              "/etc/chef/client.rb": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "cookbook_path ['/etc/chef/cookbooks']"
                    ]
                  ]
                }
              },
              "/tmp/extra.json": {
                "mode": "000644",
                "owner": "root",
                "group": "root",
                "content": {
                  "Ref": "ExtraJson"
                }
              }
            },
            "commands": {
              "mkdir": {
                "command": "mkdir -p /etc/chef/ohai/hints"
              },
              "touch": {
                "command": "touch /etc/chef/ohai/hints/ec2.json"
              },
              "jq": {
                "command": "jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' > /etc/chef/dna.json || ( echo \"jq not installed\"; cp /tmp/dna.json /etc/chef/dna.json )"
              }
            }
          },
          "chefPrepEnv": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::_prep_env",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPreInstall": {
            "commands": {
              "runpreinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -preinstall"
              }
            }
          },
          "chefConfig": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json",
                "cwd": "/etc/chef"
              }
            }
          },
          "shellRunPostInstall": {
            "commands": {
              "runpostinstall": {
                "command": "/opt/parallelcluster/scripts/fetch_and_run -postinstall"
              }
            }
          },
          "chefFinalize": {
            "commands": {
              "chef": {
                "command": "chef-client --local-mode --config /etc/chef/client.rb --log_level auto --force-formatter --no-color --chef-zero-port 8889 --json-attributes /etc/chef/dna.json --override-runlist aws-parallelcluster::finalize",
                "cwd": "/etc/chef"
              },
              "bootstrap": {
                "command": "[ ! -f /opt/parallelcluster/.bootstrapped ] && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped || exit 0"
              }
            }
          }
        }
      }
    },
    "ComputeSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "CidrBlock": {
          "Ref": "ComputeSubnetCidr"
        },
        "Tags": [
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ],
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "ComputeSubnet"
          }
        ]
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "ComputeSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "ComputeSubnet"
        },
        "RouteTableId": {
          "Ref": "ComputeRouteTable"
        }
      },
      "Condition": "CreateComputeSubnetForCompute"
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Master host",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "AccessFrom"
            }
          },
          {
            "Fn::If": [
              "EnableDCV",
              {
                "IpProtocol": "tcp",
                "FromPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "ToPort": {
                  "Fn::Select": [
                    "1",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                },
                "CidrIp": {
                  "Fn::Select": [
                    "2",
                    {
                      "Fn::Split": [
                        ",",
                        {
                          "Ref": "DCVOptions"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to resources in subnets behind front",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "MasterSecurityGroup"
            },
            "IpProtocol": "-1",
            "FromPort": 0,
            "ToPort": 65535
          }
        ]
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "DestinationSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupNormalEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "DependsOn": "ComputeSecurityGroupEgress",
      "Condition": "CreateSecurityGroups"
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "FromPort": 0,
        "ToPort": 65535,
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      },
      "Condition": "CreateSecurityGroups"
    },
    "MasterENI": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS ParallelCluster Master Server",
        "SubnetId": {
          "Ref": "MasterSubnetId"
        },
        "SourceDestCheck": false,
        "GroupSet": [
          {
            "Fn::If": [
              "CreateSecurityGroups",
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "AddAdditionalSG",
              {
                "Ref": "AdditionalSG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          {
            "Fn::If": [
              "UseExistingSecurityGroup",
              {
                "Ref": "VPCSecurityGroupId"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ]
      }
    },
    "AdditionalCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "AdditionalCfnTemplate"
        }
      },
      "Condition": "CreateSubStack"
    },
    "AWSBatchStack": {
      "Type": "AWS::CloudFormation::Stack",
      "DependsOn": [
        "CleanupResourcesCustomResource",
        "CloudWatchLogsSubstack"
      ],
      "Properties": {
        "Parameters": {
          "AttributeTags": {
            "Fn::Sub": [
              "${BaseOS}, ${Scheduler}, ${version}, ${Architecture}",
              {
                "version": {
                  "Fn::FindInMap": [
                    "PackagesVersions",
                    "default",
                    "parallelcluster"
                  ]
                }
              }
            ]
          },
          "S3Url": {
            "Fn::FindInMap": [
              "Partition2Url",
              {
                "Ref": "AWS::Partition"
              },
              "url"
            ]
          },
          "FileSystemTags": {
            "Fn::Sub": [
              "efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}",
              {
                "efs": {
                  "Fn::If": [
                    "CreateEFSSubstack",
                    "1",
                    "0"
                  ]
                },
                "raid": {
                  "Fn::If": [
                    "CreateRAIDSubstack",
                    "1",
                    "0"
                  ]
                }
              }
            ]
          },
          "EFSSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "EFSOptions"
                  }
                ]
              }
            ]
          },
          "EFSFSId": {
            "Fn::If": [
              "CreateEFSSubstack",
              {
                "Fn::GetAtt": [
                  "EFSSubstack",
                  "Outputs.FileSystemId"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "MinvCpus": {
            "Ref": "MinSize"
          },
          "DesiredvCpus": {
            "Ref": "DesiredSize"
          },
          "MaxvCpus": {
            "Ref": "MaxSize"
          },
          "InstanceTypes": {
            "Ref": "ComputeInstanceType"
          },
          "Subnet": {
            "Fn::If": [
              "UseMasterSubnetForCompute",
              {
                "Ref": "MasterSubnetId"
              },
              {
                "Fn::If": [
                  "CreateComputeSubnetForCompute",
                  {
                    "Ref": "ComputeSubnet"
                  },
                  {
                    "Ref": "ComputeSubnetId"
                  }
                ]
              }
            ]
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::If": [
                    "CreateSecurityGroups",
                    {
                      "Ref": "ComputeSecurityGroup"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "AddAdditionalSG",
                    {
                      "Ref": "AdditionalSG"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Fn::If": [
                    "UseExistingSecurityGroup",
                    {
                      "Ref": "VPCSecurityGroupId"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                }
              ]
            ]
          },
          "OS": {
            "Ref": "BaseOS"
          },
          "ClusterName": {
            "Ref": "AWS::StackName"
          },
          "ClusterType": {
            "Ref": "ClusterType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SpotBidPercentage": {
            "Fn::If": [
              "UseSpotPrice",
              {
                "Ref": "SpotPrice"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "ResourcesS3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "SharedDir": {
            "Ref": "SharedDir"
          },
          "RAIDSharedDir": {
            "Fn::Select": [
              "0",
              {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "RAIDOptions"
                  }
                ]
              }
            ]
          },
          "MainStackUniqueId": {
            "Fn::Select": [
              "2",
              {
                "Fn::Split": [
                  "/",
                  {
                    "Ref": "AWS::StackId"
                  }
                ]
              }
            ]
          },
          "Architecture": {
            "Ref": "Architecture"
          }
        },
        "TemplateURL": {
          "Fn::If": [
            "UseCustomAWSBatchTemplateURL",
            {
              "Ref": "CustomAWSBatchTemplateURL"
            },
            {
              "Fn::Sub": [
                "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/batch-substack-${version}.cfn.json",
                {
                  "s3_url": {
                    "Fn::FindInMap": [
                      "Partition2Url",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "url"
                    ]
                  },
                  "version": {
                    "Fn::FindInMap": [
                      "PackagesVersions",
                      "default",
                      "parallelcluster"
                    ]
                  }
                }
              ]
            }
          ]
        }
      },
      "Condition": "CreateAWSBatchStack"
    },
    "AssociateEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "MasterEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "MasterENI"
        }
      },
      "Condition": "MasterPublicIp"
    },
    "DynamicPlacementGroup": {
      "Type": "AWS::EC2::PlacementGroup",
      "Properties": {
        "Strategy": "cluster"
      },
      "Condition": "CreatePlacementGroup"
    },
    "CleanupResourcesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                  },
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/*"
                    }
                  ],
                  "Sid": "S3BucketPolicy"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ResourcesS3Bucket": {
          "Ref": "ResourcesS3Bucket"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CleanupResourcesFunction",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CloudWatchLogsSubstack"
      ],
      "Condition": "HasResourcesS3Bucket"
    },
    "CleanupResourcesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": [
            "parallelcluster-CleanupResources-${StackId}",
            {
              "StackId": {
                "Fn::Select": [
                  "4",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          "2",
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": "custom_resources_code/artifacts.zip"
        },
        "Handler": "cleanup_resources.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CleanupResourcesFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "RAIDSubstack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "RAIDOptions": {
            "Ref": "RAIDOptions"
          },
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/raid-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      },
      "Condition": "CreateRAIDSubstack"
    },
    "EBSCfnStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "AvailabilityZone": {
            "Ref": "AvailabilityZone"
          },
          "VolumeSize": {
            "Ref": "VolumeSize"
          },
          "VolumeType": {
            "Ref": "VolumeType"
          },
          "VolumeIOPS": {
            "Ref": "VolumeIOPS"
          },
          "EBSEncryption": {
            "Ref": "EBSEncryption"
          },
          "EBSKMSKeyId": {
            "Ref": "EBSKMSKeyId"
          },
          "EBSVolumeId": {
            "Ref": "EBSVolumeId"
          },
          "EBSSnapshotId": {
            "Ref": "EBSSnapshotId"
          },
          "NumberOfEBSVol": {
            "Ref": "NumberOfEBSVol"
          }
        },
        "TemplateURL": {
          "Fn::Sub": [
            "https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${s3_url}/templates/ebs-substack-${version}.cfn.json",
            {
              "s3_url": {
                "Fn::FindInMap": [
                  "Partition2Url",
                  {
                    "Ref": "AWS::Partition"
                  },
                  "url"
                ]
              },
              "version": {
                "Fn::FindInMap": [
                  "PackagesVersions",
                  "default",
                  "parallelcluster"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterUser": {
      "Description": "Username to login to Master host",
      "Value": {
        "Fn::FindInMap": [
          "OSFeatures",
          {
            "Ref": "BaseOS"
          },
          "User"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PrivateIp"
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP Address of the Master host",
      "Value": {
        "Fn::GetAtt": [
          "MasterServer",
          "PublicIp"
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "GangliaPrivateURL": {
      "Description": "Private URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PrivateIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      }
    },
    "GangliaPublicURL": {
      "Description": "Public URL to access Ganglia (disabled by default)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "MasterServer",
                "PublicIp"
              ]
            },
            "/ganglia/"
          ]
        ]
      },
      "Condition": "MasterPublicIp"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where AWS ParallelCluster resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      },
      "Condition": "HasResourcesS3Bucket"
    },
    "BatchComputeEnvironmentArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.ComputeEnvironmentArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobQueueArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobQueueArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.JobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchJobDefinitionMnpArn": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.MNPJobDefinitionArn"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "BatchUserRole": {
      "Value": {
        "Fn::GetAtt": [
          "AWSBatchStack",
          "Outputs.BatchUserRole"
        ]
      },
      "Condition": "CreateAWSBatchStack"
    },
    "ClusterConfigMetadata": {
      "Value": {
        "Ref": "ClusterConfigMetadata"
      }
    }
  }
}

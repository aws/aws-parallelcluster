{
  "Parameters": {
    "MinvCpus": {
      "Description": "Min vCPU's for ComputeEnvironment",
      "Type": "Number"
    },
    "DesiredvCpus": {
      "Description": "Desired vCPU's for ComputeEnvironment",
      "Type": "Number"
    },
    "MaxvCpus": {
      "Description": "Max vCPU's for ComputeEnvironment",
      "Type": "Number"
    },
    "InstanceTypes": {
      "Description": "Comma delimited string of Instance Types",
      "Type": "CommaDelimitedList"
    },
    "Subnet": {
      "Description": "Subnet for ComputeEnvironment",
      "Type": "String"
    },
    "SecurityGroups": {
      "Description": "List Security Groups for ComputeEnvironment",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "OS": {
      "Description": "Operating System for container",
      "Type": "String"
    },
    "ClusterName": {
      "Description": "Name of the cluster",
      "Type": "String"
    },
    "ClusterType": {
      "Description": "spot or ondemand",
      "Type": "String"
    },
    "KeyName": {
      "Description": "EC2 Keypair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SpotBidPercentage": {
      "Description": "Percentage of ondemand price to set as the maximum spot bid.",
      "Type": "Number",
      "Default": "100"
    },
    "ResourcesS3Bucket": {
      "Description": "S3 Bucket where resources needed by this stack are located.",
      "Type": "String"
    },
    "SharedDir": {
      "Description": "The path/mountpoint for the shared drive",
      "Type": "String"
    },
    "EFSSharedDir": {
      "Description": "The path/mountpoint for the EFS file system",
      "Type": "String"
    },
    "EFSFSId": {
      "Description": "ID of EFS file system",
      "Type": "String",
      "Default": "NONE"
    },
    "RAIDSharedDir": {
      "Description": "The path/mountpoint for the shared RAID drive",
      "Type": "String"
    },
    "AttributeTags": {
      "Description": "base_os, scheduler, version",
      "Type": "String"
    },
    "FileSystemTags": {
      "Description": "efs=true/false, multiebs=[1-5]",
      "Type": "String"
    },
    "S3Url": {
      "Description": "amazonaws.com or amazonaws.com.cn",
      "Type": "String"
    },
    "MainStackUniqueId": {
      "Description": "Final 36 digits of the main CloudFormation stack id",
      "Type": "String"
    },
    "Architecture": {
      "Description": "Architecture to use when selecting default AMIs",
      "Type": "String",
      "Default": "x86_64",
      "ConstraintDescription": "Must be either x86_64 or arm64",
      "AllowedValues": [
        "x86_64",
        "arm64"
      ]
    }
  },
  "Conditions": {
    "UseSpot": {
      "Fn::Equals": [
        {
          "Ref": "ClusterType"
        },
        "spot"
      ]
    },
    "UseArmCodeBuildImage": {
      "Fn::Equals": [
        {
          "Ref": "Architecture"
        },
        "arm64"
      ]
    }
  },
  "Resources": {
    "IamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "EcsInstanceRole"
          }
        ]
      }
    },
    "EcsInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "ec2.${S3Url}"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
          }
        ]
      }
    },
    "JobRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess"
          },
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
          }
        ],
        "Policies": [
          {
            "PolicyName": "s3PutObject",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:PutObject",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*"
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "cfnDescribeStacks",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ClusterName}/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "BatchServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "batch.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBatchServiceRole"
          }
        ]
      }
    },
    "BatchUserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "MaxSessionDuration": 36000,
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "BatchUserPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "batch:SubmitJob",
                    "cloudformation:DescribeStacks",
                    "ecs:ListContainerInstances",
                    "ecs:DescribeContainerInstances",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                    "s3:PutObject",
                    "s3:Get*",
                    "s3:DeleteObject",
                    "iam:PassRole"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "${JobDefinitionSerial}"
                    },
                    {
                      "Fn::Sub": "${JobDefinitionMNP}"
                    },
                    {
                      "Fn::Sub": "${JobQueue}"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ClusterName}/*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*"
                    },
                    {
                      "Fn::GetAtt": [
                        "JobRole",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ComputeEnvironmentPrefix}_Batch_*",
                        {
                          "ComputeEnvironmentPrefix": {
                            "Fn::Select": [
                              "1",
                              {
                                "Fn::Split": [
                                  "compute-environment/",
                                  {
                                    "Fn::Sub": "${ComputeEnvironment}"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/batch/job:log-stream:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:List*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "batch:DescribeJobQueues",
                    "batch:TerminateJob",
                    "batch:DescribeJobs",
                    "batch:CancelJob",
                    "batch:DescribeJobDefinitions",
                    "batch:ListJobs",
                    "batch:DescribeComputeEnvironments",
                    "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SpotIamFleetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "spotfleet.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"
          }
        ]
      },
      "Condition": "UseSpot"
    },
    "ComputeEnvironment": {
      "Type": "AWS::Batch::ComputeEnvironment",
      "Properties": {
        "Type": "MANAGED",
        "ServiceRole": {
          "Fn::GetAtt": [
            "BatchServiceRole",
            "Arn"
          ]
        },
        "ComputeResources": {
          "Type": {
            "Fn::If": [
              "UseSpot",
              "SPOT",
              "EC2"
            ]
          },
          "MinvCpus": {
            "Ref": "MinvCpus"
          },
          "DesiredvCpus": {
            "Ref": "DesiredvCpus"
          },
          "MaxvCpus": {
            "Ref": "MaxvCpus"
          },
          "InstanceTypes": {
            "Ref": "InstanceTypes"
          },
          "Subnets": [
            {
              "Ref": "Subnet"
            }
          ],
          "Ec2KeyPair": {
            "Ref": "KeyName"
          },
          "SecurityGroupIds": {
            "Ref": "SecurityGroups"
          },
          "InstanceRole": {
            "Fn::GetAtt": [
              "IamInstanceProfile",
              "Arn"
            ]
          },
          "BidPercentage": {
            "Ref": "SpotBidPercentage"
          },
          "SpotIamFleetRole": {
            "Fn::If": [
              "UseSpot",
              {
                "Fn::GetAtt": [
                  "SpotIamFleetRole",
                  "Arn"
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "Tags": {
            "Name": "Batch Compute",
            "Application": {
              "Ref": "ClusterName"
            },
            "aws-parallelcluster-attributes": {
              "Ref": "AttributeTags"
            },
            "aws-parallelcluster-filesystem": {
              "Ref": "FileSystemTags"
            }
          }
        },
        "State": "ENABLED"
      }
    },
    "JobQueue": {
      "Type": "AWS::Batch::JobQueue",
      "Properties": {
        "Priority": 1,
        "ComputeEnvironmentOrder": [
          {
            "Order": 1,
            "ComputeEnvironment": {
              "Ref": "ComputeEnvironment"
            }
          }
        ]
      }
    },
    "JobDefinitionSerial": {
      "Type": "AWS::Batch::JobDefinition",
      "Properties": {
        "Type": "container",
        "ContainerProperties": {
          "JobRoleArn": {
            "Fn::GetAtt": [
              "JobRole",
              "Arn"
            ]
          },
          "Image": {
            "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${S3Url}/${DockerImagesRepo}:${OS}"
          },
          "Vcpus": 1,
          "Memory": 512,
          "Privileged": true,
          "Environment": [
            {
              "Name": "PCLUSTER_AWS_REGION",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "PCLUSTER_STACK_NAME",
              "Value": {
                "Ref": "ClusterName"
              }
            },
            {
              "Name": "PCLUSTER_SHARED_DIRS",
              "Value": {
                "Ref": "SharedDir"
              }
            },
            {
              "Name": "PCLUSTER_EFS_SHARED_DIR",
              "Value": {
                "Ref": "EFSSharedDir"
              }
            },
            {
              "Name": "PCLUSTER_EFS_FS_ID",
              "Value": {
                "Ref": "EFSFSId"
              }
            },
            {
              "Name": "PCLUSTER_RAID_SHARED_DIR",
              "Value": {
                "Ref": "RAIDSharedDir"
              }
            }
          ]
        }
      }
    },
    "JobDefinitionMNP": {
      "Type": "AWS::Batch::JobDefinition",
      "Properties": {
        "Type": "multinode",
        "NodeProperties": {
          "NumNodes": 1,
          "MainNode": 0,
          "NodeRangeProperties": [
            {
              "TargetNodes": "0:",
              "Container": {
                "Image": {
                  "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${S3Url}/${DockerImagesRepo}:${OS}"
                },
                "JobRoleArn": {
                  "Fn::GetAtt": [
                    "JobRole",
                    "Arn"
                  ]
                },
                "Memory": 512,
                "Privileged": true,
                "Vcpus": 1,
                "Environment": [
                  {
                    "Name": "PCLUSTER_AWS_REGION",
                    "Value": {
                      "Ref": "AWS::Region"
                    }
                  },
                  {
                    "Name": "PCLUSTER_STACK_NAME",
                    "Value": {
                      "Ref": "ClusterName"
                    }
                  },
                  {
                    "Name": "PCLUSTER_SHARED_DIRS",
                    "Value": {
                      "Ref": "SharedDir"
                    }
                  },
                  {
                    "Name": "PCLUSTER_EFS_SHARED_DIR",
                    "Value": {
                      "Ref": "EFSSharedDir"
                    }
                  },
                  {
                    "Name": "PCLUSTER_EFS_FS_ID",
                    "Value": {
                      "Ref": "EFSFSId"
                    }
                  },
                  {
                    "Name": "PCLUSTER_RAID_SHARED_DIR",
                    "Value": {
                      "Ref": "RAIDSharedDir"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "DockerImagesRepo": {
      "Type": "AWS::ECR::Repository"
    },
    "CodeBuildDockerImageBuilderProject": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "ComputeType": {
            "Fn::If": [
              "UseArmCodeBuildImage",
              "BUILD_GENERAL1_LARGE",
              "BUILD_GENERAL1_SMALL"
            ]
          },
          "EnvironmentVariables": [
            {
              "Name": "AWS_REGION",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "IMAGE_REPO_NAME",
              "Value": {
                "Ref": "DockerImagesRepo"
              }
            },
            {
              "Name": "IMAGE",
              "Value": {
                "Ref": "OS"
              }
            },
            {
              "Name": "NOTIFICATION_URL",
              "Value": {
                "Ref": "DockerBuildWaitHandle"
              }
            }
          ],
          "Image": {
            "Fn::If": [
              "UseArmCodeBuildImage",
              "aws/codebuild/amazonlinux2-aarch64-standard:1.0",
              "aws/codebuild/amazonlinux2-x86_64-standard:1.0"
            ]
          },
          "Type": {
            "Fn::If": [
              "UseArmCodeBuildImage",
              "ARM_CONTAINER",
              "LINUX_CONTAINER"
            ]
          },
          "PrivilegedMode": true
        },
        "Name": {
          "Fn::Sub": "${ClusterName}-build-docker-images-project"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "CodeBuildRole",
            "Arn"
          ]
        },
        "Source": {
          "Location": {
            "Fn::Sub": "${ResourcesS3Bucket}/docker/artifacts.zip"
          },
          "Type": "S3"
        },
        "LogsConfig": {
          "CloudWatchLogs": {
            "GroupName": {
              "Fn::Sub": "/aws/codebuild/${ClusterName}-CodeBuildDockerImageBuilderProject"
            },
            "Status": "ENABLED"
          }
        }
      }
    },
    "CodeBuildPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:CompleteLayerUpload",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage",
                "ecr:UploadLayerPart"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DockerImagesRepo",
                  "Arn"
                ]
              },
              "Sid": "ECRRepoPolicy"
            },
            {
              "Action": [
                "ecr:GetAuthorizationToken"
              ],
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "ECRPolicy"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
              },
              "Sid": "CloudWatchLogsPolicy"
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/*"
              },
              "Sid": "S3GetObjectPolicy"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CodeBuildPolicy",
        "Roles": [
          {
            "Ref": "CodeBuildRole"
          }
        ]
      }
    },
    "CodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ]
        }
      }
    },
    "ManageDockerImagesCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "DependsOn": [
        "CodeBuildNotificationRule"
      ],
      "Properties": {
        "CodeBuildProject": {
          "Ref": "CodeBuildDockerImageBuilderProject"
        },
        "EcrRepository": {
          "Ref": "DockerImagesRepo"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "ManageDockerImagesFunction",
            "Arn"
          ]
        }
      }
    },
    "ManageDockerImagesFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "pcluster-ManageDockerImages-${MainStackUniqueId}"
        },
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": "custom_resources_code/artifacts.zip"
        },
        "Handler": "manage_docker_images.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "ManageDockerImagesFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      }
    },
    "ManageDockerImagesFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                  },
                  "Sid": "CloudWatchLogsPolicy"
                },
                {
                  "Action": [
                    "ecr:BatchDeleteImage",
                    "ecr:ListImages"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "DockerImagesRepo",
                      "Arn"
                    ]
                  },
                  "Sid": "ECRPolicy"
                },
                {
                  "Action": [
                    "codebuild:BatchGetBuilds",
                    "codebuild:StartBuild"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::GetAtt": [
                      "CodeBuildDockerImageBuilderProject",
                      "Arn"
                    ]
                  },
                  "Sid": "CodeBuildPolicy"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      }
    },
    "DockerBuildWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "DockerBuildWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "ManageDockerImagesCustomResource",
      "Properties": {
        "Handle": {
          "Ref": "DockerBuildWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SendBuildNotificationFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:logs:*:*:*"
                  },
                  "Sid": "CloudWatchLogsPolicy"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "LambdaPolicy"
          }
        ]
      }
    },
    "SendBuildNotificationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "pcluster-SendBuildNotificat-${MainStackUniqueId}"
        },
        "Code": {
          "S3Bucket": {
            "Ref": "ResourcesS3Bucket"
          },
          "S3Key": "custom_resources_code/artifacts.zip"
        },
        "Handler": "send_build_notification.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "SendBuildNotificationFunctionExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60
      },
      "DependsOn": "DockerBuildWaitHandle"
    },
    "SendBuildNotificationFunctionInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SendBuildNotificationFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CodeBuildNotificationRule",
            "Arn"
          ]
        }
      }
    },
    "CodeBuildNotificationRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "detail": {
            "build-status": [
              "FAILED",
              "STOPPED",
              "SUCCEEDED"
            ],
            "project-name": [
              {
                "Ref": "CodeBuildDockerImageBuilderProject"
              }
            ]
          },
          "detail-type": [
            "CodeBuild Build State Change"
          ],
          "source": [
            "aws.codebuild"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SendBuildNotificationFunction",
                "Arn"
              ]
            },
            "Id": "SendBuildNotificationFunction"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ComputeEnvironmentArn": {
      "Value": {
        "Ref": "ComputeEnvironment"
      }
    },
    "JobQueueArn": {
      "Value": {
        "Ref": "JobQueue"
      }
    },
    "JobDefinitionArn": {
      "Value": {
        "Ref": "JobDefinitionSerial"
      }
    },
    "ECRRepoName": {
      "Description": "Name of the ECR repository where docker images used by AWS Batch are located.",
      "Value": {
        "Ref": "DockerImagesRepo"
      }
    },
    "CodeBuildDockerImageBuilderProject": {
      "Description": "CodeBuild project used to bake docker images.",
      "Value": {
        "Ref": "CodeBuildDockerImageBuilderProject"
      }
    },
    "ResourcesS3Bucket": {
      "Description": "S3 user bucket where resources are stored",
      "Value": {
        "Ref": "ResourcesS3Bucket"
      }
    },
    "MNPJobDefinitionArn": {
      "Value": {
        "Ref": "JobDefinitionMNP"
      }
    },
    "BatchUserRole": {
      "Value": {
        "Fn::GetAtt": [
          "BatchUserRole",
          "Arn"
        ]
      }
    }
  }
}
